{"filter":false,"title":"datatables-1.10.6.js","tooltip":"/js/datatables-1.10.6.js","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":14877,"column":21},"action":"insert","lines":["/*! DataTables 1.10.6"," * Â©2008-2014 SpryMedia Ltd - datatables.net/license"," */","","/**"," * @summary     DataTables"," * @description Paginate, search and order HTML tables"," * @version     1.10.6"," * @file        jquery.dataTables.js"," * @author      SpryMedia Ltd (www.sprymedia.co.uk)"," * @contact     www.sprymedia.co.uk/contact"," * @copyright   Copyright 2008-2014 SpryMedia Ltd."," *"," * This source file is free software, available under the following license:"," *   MIT license - http://datatables.net/license"," *"," * This source file is distributed in the hope that it will be useful, but"," * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY"," * or FITNESS FOR A PARTICULAR PURPOSE. See the license files for details."," *"," * For details please refer to: http://www.datatables.net"," */","","/*jslint evil: true, undef: true, browser: true */","/*globals $,require,jQuery,define,_selector_run,_selector_opts,_selector_first,_selector_row_indexes,_ext,_Api,_api_register,_api_registerPlural,_re_new_lines,_re_html,_re_formatted_numeric,_re_escape_regex,_empty,_intVal,_numToDecimal,_isNumber,_isHtml,_htmlNumeric,_pluck,_pluck_order,_range,_stripHtml,_unique,_fnBuildAjax,_fnAjaxUpdate,_fnAjaxParameters,_fnAjaxUpdateDraw,_fnAjaxDataSrc,_fnAddColumn,_fnColumnOptions,_fnAdjustColumnSizing,_fnVisibleToColumnIndex,_fnColumnIndexToVisible,_fnVisbleColumns,_fnGetColumns,_fnColumnTypes,_fnApplyColumnDefs,_fnHungarianMap,_fnCamelToHungarian,_fnLanguageCompat,_fnBrowserDetect,_fnAddData,_fnAddTr,_fnNodeToDataIndex,_fnNodeToColumnIndex,_fnGetCellData,_fnSetCellData,_fnSplitObjNotation,_fnGetObjectDataFn,_fnSetObjectDataFn,_fnGetDataMaster,_fnClearTable,_fnDeleteIndex,_fnInvalidate,_fnGetRowElements,_fnCreateTr,_fnBuildHead,_fnDrawHead,_fnDraw,_fnReDraw,_fnAddOptionsHtml,_fnDetectHeader,_fnGetUniqueThs,_fnFeatureHtmlFilter,_fnFilterComplete,_fnFilterCustom,_fnFilterColumn,_fnFilter,_fnFilterCreateSearch,_fnEscapeRegex,_fnFilterData,_fnFeatureHtmlInfo,_fnUpdateInfo,_fnInfoMacros,_fnInitialise,_fnInitComplete,_fnLengthChange,_fnFeatureHtmlLength,_fnFeatureHtmlPaginate,_fnPageChange,_fnFeatureHtmlProcessing,_fnProcessingDisplay,_fnFeatureHtmlTable,_fnScrollDraw,_fnApplyToChildren,_fnCalculateColumnWidths,_fnThrottle,_fnConvertToWidth,_fnScrollingWidthAdjust,_fnGetWidestNode,_fnGetMaxLenString,_fnStringToCss,_fnScrollBarWidth,_fnSortFlatten,_fnSort,_fnSortAria,_fnSortListener,_fnSortAttachListener,_fnSortingClasses,_fnSortData,_fnSaveState,_fnLoadState,_fnSettingsFromNode,_fnLog,_fnMap,_fnBindAction,_fnCallbackReg,_fnCallbackFire,_fnLengthOverflow,_fnRenderer,_fnDataSource,_fnRowAttributes*/","","(/** @lends <global> */function( window, document, undefined ) {","","(function( factory ) {","\t\"use strict\";","","\tif ( typeof define === 'function' && define.amd ) {","\t\t// Define as an AMD module if possible","\t\tdefine( 'datatables', ['jquery'], factory );","\t}","    else if ( typeof exports === 'object' ) {","        // Node/CommonJS","        module.exports = factory( require( 'jquery' ) );","    }","\telse if ( jQuery && !jQuery.fn.dataTable ) {","\t\t// Define using browser globals otherwise","\t\t// Prevent multiple instantiations if the script is loaded twice","\t\tfactory( jQuery );","\t}","}","(/** @lends <global> */function( $ ) {","\t\"use strict\";","","\t/**","\t * DataTables is a plug-in for the jQuery Javascript library. It is a highly","\t * flexible tool, based upon the foundations of progressive enhancement,","\t * which will add advanced interaction controls to any HTML table. For a","\t * full list of features please refer to","\t * [DataTables.net](href=\"http://datatables.net).","\t *","\t * Note that the `DataTable` object is not a global variable but is aliased","\t * to `jQuery.fn.DataTable` and `jQuery.fn.dataTable` through which it may","\t * be  accessed.","\t *","\t *  @class","\t *  @param {object} [init={}] Configuration object for DataTables. Options","\t *    are defined by {@link DataTable.defaults}","\t *  @requires jQuery 1.7+","\t *","\t *  @example","\t *    // Basic initialisation","\t *    $(document).ready( function {","\t *      $('#example').dataTable();","\t *    } );","\t *","\t *  @example","\t *    // Initialisation with configuration options - in this case, disable","\t *    // pagination and sorting.","\t *    $(document).ready( function {","\t *      $('#example').dataTable( {","\t *        \"paginate\": false,","\t *        \"sort\": false","\t *      } );","\t *    } );","\t */","\tvar DataTable;","","\t","\t/*","\t * It is useful to have variables which are scoped locally so only the","\t * DataTables functions can access them and they don't leak into global space.","\t * At the same time these functions are often useful over multiple files in the","\t * core and API, so we list, or at least document, all variables which are used","\t * by DataTables as private variables here. This also ensures that there is no","\t * clashing of variable names and that they can easily referenced for reuse.","\t */","\t","\t","\t// Defined else where","\t//  _selector_run","\t//  _selector_opts","\t//  _selector_first","\t//  _selector_row_indexes","\t","\tvar _ext; // DataTable.ext","\tvar _Api; // DataTable.Api","\tvar _api_register; // DataTable.Api.register","\tvar _api_registerPlural; // DataTable.Api.registerPlural","\t","\tvar _re_dic = {};","\tvar _re_new_lines = /[\\r\\n]/g;","\tvar _re_html = /<.*?>/g;","\tvar _re_date_start = /^[\\w\\+\\-]/;","\tvar _re_date_end = /[\\w\\+\\-]$/;","\t","\t// Escape regular expression special characters","\tvar _re_escape_regex = new RegExp( '(\\\\' + [ '/', '.', '*', '+', '?', '|', '(', ')', '[', ']', '{', '}', '\\\\', '$', '^', '-' ].join('|\\\\') + ')', 'g' );","\t","\t// http://en.wikipedia.org/wiki/Foreign_exchange_market","\t// - \\u20BD - Russian ruble.","\t// - \\u20a9 - South Korean Won","\t// - \\u20BA - Turkish Lira","\t// - \\u20B9 - Indian Rupee","\t// - R - Brazil (R$) and South Africa","\t// - fr - Swiss Franc","\t// - kr - Swedish krona, Norwegian krone and Danish krone","\t// - \\u2009 is thin space and \\u202F is narrow no-break space, both used in many","\t//   standards as thousands separators.","\tvar _re_formatted_numeric = /[',$Â£â‚¬Â¥%\\u2009\\u202F\\u20BD\\u20a9\\u20BArfk]/gi;","\t","\t","\tvar _empty = function ( d ) {","\t\treturn !d || d === true || d === '-' ? true : false;","\t};","\t","\t","\tvar _intVal = function ( s ) {","\t\tvar integer = parseInt( s, 10 );","\t\treturn !isNaN(integer) && isFinite(s) ? integer : null;","\t};","\t","\t// Convert from a formatted number with characters other than `.` as the","\t// decimal place, to a Javascript number","\tvar _numToDecimal = function ( num, decimalPoint ) {","\t\t// Cache created regular expressions for speed as this function is called often","\t\tif ( ! _re_dic[ decimalPoint ] ) {","\t\t\t_re_dic[ decimalPoint ] = new RegExp( _fnEscapeRegex( decimalPoint ), 'g' );","\t\t}","\t\treturn typeof num === 'string' && decimalPoint !== '.' ?","\t\t\tnum.replace( /\\./g, '' ).replace( _re_dic[ decimalPoint ], '.' ) :","\t\t\tnum;","\t};","\t","\t","\tvar _isNumber = function ( d, decimalPoint, formatted ) {","\t\tvar strType = typeof d === 'string';","\t","\t\t// If empty return immediately so there must be a number if it is a","\t\t// formatted string (this stops the string \"k\", or \"kr\", etc being detected","\t\t// as a formatted number for currency","\t\tif ( _empty( d ) ) {","\t\t\treturn true;","\t\t}","\t","\t\tif ( decimalPoint && strType ) {","\t\t\td = _numToDecimal( d, decimalPoint );","\t\t}","\t","\t\tif ( formatted && strType ) {","\t\t\td = d.replace( _re_formatted_numeric, '' );","\t\t}","\t","\t\treturn !isNaN( parseFloat(d) ) && isFinite( d );","\t};","\t","\t","\t// A string without HTML in it can be considered to be HTML still","\tvar _isHtml = function ( d ) {","\t\treturn _empty( d ) || typeof d === 'string';","\t};","\t","\t","\tvar _htmlNumeric = function ( d, decimalPoint, formatted ) {","\t\tif ( _empty( d ) ) {","\t\t\treturn true;","\t\t}","\t","\t\tvar html = _isHtml( d );","\t\treturn ! html ?","\t\t\tnull :","\t\t\t_isNumber( _stripHtml( d ), decimalPoint, formatted ) ?","\t\t\t\ttrue :","\t\t\t\tnull;","\t};","\t","\t","\tvar _pluck = function ( a, prop, prop2 ) {","\t\tvar out = [];","\t\tvar i=0, ien=a.length;","\t","\t\t// Could have the test in the loop for slightly smaller code, but speed","\t\t// is essential here","\t\tif ( prop2 !== undefined ) {","\t\t\tfor ( ; i<ien ; i++ ) {","\t\t\t\tif ( a[i] && a[i][ prop ] ) {","\t\t\t\t\tout.push( a[i][ prop ][ prop2 ] );","\t\t\t\t}","\t\t\t}","\t\t}","\t\telse {","\t\t\tfor ( ; i<ien ; i++ ) {","\t\t\t\tif ( a[i] ) {","\t\t\t\t\tout.push( a[i][ prop ] );","\t\t\t\t}","\t\t\t}","\t\t}","\t","\t\treturn out;","\t};","\t","\t","\t// Basically the same as _pluck, but rather than looping over `a` we use `order`","\t// as the indexes to pick from `a`","\tvar _pluck_order = function ( a, order, prop, prop2 )","\t{","\t\tvar out = [];","\t\tvar i=0, ien=order.length;","\t","\t\t// Could have the test in the loop for slightly smaller code, but speed","\t\t// is essential here","\t\tif ( prop2 !== undefined ) {","\t\t\tfor ( ; i<ien ; i++ ) {","\t\t\t\tif ( a[ order[i] ][ prop ] ) {","\t\t\t\t\tout.push( a[ order[i] ][ prop ][ prop2 ] );","\t\t\t\t}","\t\t\t}","\t\t}","\t\telse {","\t\t\tfor ( ; i<ien ; i++ ) {","\t\t\t\tout.push( a[ order[i] ][ prop ] );","\t\t\t}","\t\t}","\t","\t\treturn out;","\t};","\t","\t","\tvar _range = function ( len, start )","\t{","\t\tvar out = [];","\t\tvar end;","\t","\t\tif ( start === undefined ) {","\t\t\tstart = 0;","\t\t\tend = len;","\t\t}","\t\telse {","\t\t\tend = start;","\t\t\tstart = len;","\t\t}","\t","\t\tfor ( var i=start ; i<end ; i++ ) {","\t\t\tout.push( i );","\t\t}","\t","\t\treturn out;","\t};","\t","\t","\tvar _removeEmpty = function ( a )","\t{","\t\tvar out = [];","\t","\t\tfor ( var i=0, ien=a.length ; i<ien ; i++ ) {","\t\t\tif ( a[i] ) { // careful - will remove all falsy values!","\t\t\t\tout.push( a[i] );","\t\t\t}","\t\t}","\t","\t\treturn out;","\t};","\t","\t","\tvar _stripHtml = function ( d ) {","\t\treturn d.replace( _re_html, '' );","\t};","\t","\t","\t/**","\t * Find the unique elements in a source array.","\t *","\t * @param  {array} src Source array","\t * @return {array} Array of unique items","\t * @ignore","\t */","\tvar _unique = function ( src )","\t{","\t\t// A faster unique method is to use object keys to identify used values,","\t\t// but this doesn't work with arrays or objects, which we must also","\t\t// consider. See jsperf.com/compare-array-unique-versions/4 for more","\t\t// information.","\t\tvar","\t\t\tout = [],","\t\t\tval,","\t\t\ti, ien=src.length,","\t\t\tj, k=0;","\t","\t\tagain: for ( i=0 ; i<ien ; i++ ) {","\t\t\tval = src[i];","\t","\t\t\tfor ( j=0 ; j<k ; j++ ) {","\t\t\t\tif ( out[j] === val ) {","\t\t\t\t\tcontinue again;","\t\t\t\t}","\t\t\t}","\t","\t\t\tout.push( val );","\t\t\tk++;","\t\t}","\t","\t\treturn out;","\t};","\t","\t","\t","\t/**","\t * Create a mapping object that allows camel case parameters to be looked up","\t * for their Hungarian counterparts. The mapping is stored in a private","\t * parameter called `_hungarianMap` which can be accessed on the source object.","\t *  @param {object} o","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnHungarianMap ( o )","\t{","\t\tvar","\t\t\thungarian = 'a aa ai ao as b fn i m o s ',","\t\t\tmatch,","\t\t\tnewKey,","\t\t\tmap = {};","\t","\t\t$.each( o, function (key, val) {","\t\t\tmatch = key.match(/^([^A-Z]+?)([A-Z])/);","\t","\t\t\tif ( match && hungarian.indexOf(match[1]+' ') !== -1 )","\t\t\t{","\t\t\t\tnewKey = key.replace( match[0], match[2].toLowerCase() );","\t\t\t\tmap[ newKey ] = key;","\t","\t\t\t\tif ( match[1] === 'o' )","\t\t\t\t{","\t\t\t\t\t_fnHungarianMap( o[key] );","\t\t\t\t}","\t\t\t}","\t\t} );","\t","\t\to._hungarianMap = map;","\t}","\t","\t","\t/**","\t * Convert from camel case parameters to Hungarian, based on a Hungarian map","\t * created by _fnHungarianMap.","\t *  @param {object} src The model object which holds all parameters that can be","\t *    mapped.","\t *  @param {object} user The object to convert from camel case to Hungarian.","\t *  @param {boolean} force When set to `true`, properties which already have a","\t *    Hungarian value in the `user` object will be overwritten. Otherwise they","\t *    won't be.","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnCamelToHungarian ( src, user, force )","\t{","\t\tif ( ! src._hungarianMap ) {","\t\t\t_fnHungarianMap( src );","\t\t}","\t","\t\tvar hungarianKey;","\t","\t\t$.each( user, function (key, val) {","\t\t\thungarianKey = src._hungarianMap[ key ];","\t","\t\t\tif ( hungarianKey !== undefined && (force || user[hungarianKey] === undefined) )","\t\t\t{","\t\t\t\t// For objects, we need to buzz down into the object to copy parameters","\t\t\t\tif ( hungarianKey.charAt(0) === 'o' )","\t\t\t\t{","\t\t\t\t\t// Copy the camelCase options over to the hungarian","\t\t\t\t\tif ( ! user[ hungarianKey ] ) {","\t\t\t\t\t\tuser[ hungarianKey ] = {};","\t\t\t\t\t}","\t\t\t\t\t$.extend( true, user[hungarianKey], user[key] );","\t","\t\t\t\t\t_fnCamelToHungarian( src[hungarianKey], user[hungarianKey], force );","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tuser[hungarianKey] = user[ key ];","\t\t\t\t}","\t\t\t}","\t\t} );","\t}","\t","\t","\t/**","\t * Language compatibility - when certain options are given, and others aren't, we","\t * need to duplicate the values over, in order to provide backwards compatibility","\t * with older language files.","\t *  @param {object} oSettings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnLanguageCompat( lang )","\t{","\t\tvar defaults = DataTable.defaults.oLanguage;","\t\tvar zeroRecords = lang.sZeroRecords;","\t","\t\t/* Backwards compatibility - if there is no sEmptyTable given, then use the same as","\t\t * sZeroRecords - assuming that is given.","\t\t */","\t\tif ( ! lang.sEmptyTable && zeroRecords &&","\t\t\tdefaults.sEmptyTable === \"No data available in table\" )","\t\t{","\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sEmptyTable' );","\t\t}","\t","\t\t/* Likewise with loading records */","\t\tif ( ! lang.sLoadingRecords && zeroRecords &&","\t\t\tdefaults.sLoadingRecords === \"Loading...\" )","\t\t{","\t\t\t_fnMap( lang, lang, 'sZeroRecords', 'sLoadingRecords' );","\t\t}","\t","\t\t// Old parameter name of the thousands separator mapped onto the new","\t\tif ( lang.sInfoThousands ) {","\t\t\tlang.sThousands = lang.sInfoThousands;","\t\t}","\t","\t\tvar decimal = lang.sDecimal;","\t\tif ( decimal ) {","\t\t\t_addNumericSort( decimal );","\t\t}","\t}","\t","\t","\t/**","\t * Map one parameter onto another","\t *  @param {object} o Object to map","\t *  @param {*} knew The new parameter name","\t *  @param {*} old The old parameter name","\t */","\tvar _fnCompatMap = function ( o, knew, old ) {","\t\tif ( o[ knew ] !== undefined ) {","\t\t\to[ old ] = o[ knew ];","\t\t}","\t};","\t","\t","\t/**","\t * Provide backwards compatibility for the main DT options. Note that the new","\t * options are mapped onto the old parameters, so this is an external interface","\t * change only.","\t *  @param {object} init Object to map","\t */","\tfunction _fnCompatOpts ( init )","\t{","\t\t_fnCompatMap( init, 'ordering',      'bSort' );","\t\t_fnCompatMap( init, 'orderMulti',    'bSortMulti' );","\t\t_fnCompatMap( init, 'orderClasses',  'bSortClasses' );","\t\t_fnCompatMap( init, 'orderCellsTop', 'bSortCellsTop' );","\t\t_fnCompatMap( init, 'order',         'aaSorting' );","\t\t_fnCompatMap( init, 'orderFixed',    'aaSortingFixed' );","\t\t_fnCompatMap( init, 'paging',        'bPaginate' );","\t\t_fnCompatMap( init, 'pagingType',    'sPaginationType' );","\t\t_fnCompatMap( init, 'pageLength',    'iDisplayLength' );","\t\t_fnCompatMap( init, 'searching',     'bFilter' );","\t","\t\t// Column search objects are in an array, so it needs to be converted","\t\t// element by element","\t\tvar searchCols = init.aoSearchCols;","\t","\t\tif ( searchCols ) {","\t\t\tfor ( var i=0, ien=searchCols.length ; i<ien ; i++ ) {","\t\t\t\tif ( searchCols[i] ) {","\t\t\t\t\t_fnCamelToHungarian( DataTable.models.oSearch, searchCols[i] );","\t\t\t\t}","\t\t\t}","\t\t}","\t}","\t","\t","\t/**","\t * Provide backwards compatibility for column options. Note that the new options","\t * are mapped onto the old parameters, so this is an external interface change","\t * only.","\t *  @param {object} init Object to map","\t */","\tfunction _fnCompatCols ( init )","\t{","\t\t_fnCompatMap( init, 'orderable',     'bSortable' );","\t\t_fnCompatMap( init, 'orderData',     'aDataSort' );","\t\t_fnCompatMap( init, 'orderSequence', 'asSorting' );","\t\t_fnCompatMap( init, 'orderDataType', 'sortDataType' );","\t","\t\t// orderData can be given as an integer","\t\tvar dataSort = init.aDataSort;","\t\tif ( dataSort && ! $.isArray( dataSort ) ) {","\t\t\tinit.aDataSort = [ dataSort ];","\t\t}","\t}","\t","\t","\t/**","\t * Browser feature detection for capabilities, quirks","\t *  @param {object} settings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnBrowserDetect( settings )","\t{","\t\tvar browser = settings.oBrowser;","\t","\t\t// Scrolling feature / quirks detection","\t\tvar n = $('<div/>')","\t\t\t.css( {","\t\t\t\tposition: 'absolute',","\t\t\t\ttop: 0,","\t\t\t\tleft: 0,","\t\t\t\theight: 1,","\t\t\t\twidth: 1,","\t\t\t\toverflow: 'hidden'","\t\t\t} )","\t\t\t.append(","\t\t\t\t$('<div/>')","\t\t\t\t\t.css( {","\t\t\t\t\t\tposition: 'absolute',","\t\t\t\t\t\ttop: 1,","\t\t\t\t\t\tleft: 1,","\t\t\t\t\t\twidth: 100,","\t\t\t\t\t\toverflow: 'scroll'","\t\t\t\t\t} )","\t\t\t\t\t.append(","\t\t\t\t\t\t$('<div class=\"test\"/>')","\t\t\t\t\t\t\t.css( {","\t\t\t\t\t\t\t\twidth: '100%',","\t\t\t\t\t\t\t\theight: 10","\t\t\t\t\t\t\t} )","\t\t\t\t\t)","\t\t\t)","\t\t\t.appendTo( 'body' );","\t","\t\tvar test = n.find('.test');","\t","\t\t// IE6/7 will oversize a width 100% element inside a scrolling element, to","\t\t// include the width of the scrollbar, while other browsers ensure the inner","\t\t// element is contained without forcing scrolling","\t\tbrowser.bScrollOversize = test[0].offsetWidth === 100;","\t","\t\t// In rtl text layout, some browsers (most, but not all) will place the","\t\t// scrollbar on the left, rather than the right.","\t\tbrowser.bScrollbarLeft = Math.round( test.offset().left ) !== 1;","\t","\t\tn.remove();","\t}","\t","\t","\t/**","\t * Array.prototype reduce[Right] method, used for browsers which don't support","\t * JS 1.6. Done this way to reduce code size, since we iterate either way","\t *  @param {object} settings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnReduce ( that, fn, init, start, end, inc )","\t{","\t\tvar","\t\t\ti = start,","\t\t\tvalue,","\t\t\tisSet = false;","\t","\t\tif ( init !== undefined ) {","\t\t\tvalue = init;","\t\t\tisSet = true;","\t\t}","\t","\t\twhile ( i !== end ) {","\t\t\tif ( ! that.hasOwnProperty(i) ) {","\t\t\t\tcontinue;","\t\t\t}","\t","\t\t\tvalue = isSet ?","\t\t\t\tfn( value, that[i], i, that ) :","\t\t\t\tthat[i];","\t","\t\t\tisSet = true;","\t\t\ti += inc;","\t\t}","\t","\t\treturn value;","\t}","\t","\t/**","\t * Add a column to the list used for the table with default values","\t *  @param {object} oSettings dataTables settings object","\t *  @param {node} nTh The th element for this column","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnAddColumn( oSettings, nTh )","\t{","\t\t// Add column to aoColumns array","\t\tvar oDefaults = DataTable.defaults.column;","\t\tvar iCol = oSettings.aoColumns.length;","\t\tvar oCol = $.extend( {}, DataTable.models.oColumn, oDefaults, {","\t\t\t\"nTh\": nTh ? nTh : document.createElement('th'),","\t\t\t\"sTitle\":    oDefaults.sTitle    ? oDefaults.sTitle    : nTh ? nTh.innerHTML : '',","\t\t\t\"aDataSort\": oDefaults.aDataSort ? oDefaults.aDataSort : [iCol],","\t\t\t\"mData\": oDefaults.mData ? oDefaults.mData : iCol,","\t\t\tidx: iCol","\t\t} );","\t\toSettings.aoColumns.push( oCol );","\t","\t\t// Add search object for column specific search. Note that the `searchCols[ iCol ]`","\t\t// passed into extend can be undefined. This allows the user to give a default","\t\t// with only some of the parameters defined, and also not give a default","\t\tvar searchCols = oSettings.aoPreSearchCols;","\t\tsearchCols[ iCol ] = $.extend( {}, DataTable.models.oSearch, searchCols[ iCol ] );","\t","\t\t// Use the default column options function to initialise classes etc","\t\t_fnColumnOptions( oSettings, iCol, $(nTh).data() );","\t}","\t","\t","\t/**","\t * Apply options for a column","\t *  @param {object} oSettings dataTables settings object","\t *  @param {int} iCol column index to consider","\t *  @param {object} oOptions object with sType, bVisible and bSearchable etc","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnColumnOptions( oSettings, iCol, oOptions )","\t{","\t\tvar oCol = oSettings.aoColumns[ iCol ];","\t\tvar oClasses = oSettings.oClasses;","\t\tvar th = $(oCol.nTh);","\t","\t\t// Try to get width information from the DOM. We can't get it from CSS","\t\t// as we'd need to parse the CSS stylesheet. `width` option can override","\t\tif ( ! oCol.sWidthOrig ) {","\t\t\t// Width attribute","\t\t\toCol.sWidthOrig = th.attr('width') || null;","\t","\t\t\t// Style attribute","\t\t\tvar t = (th.attr('style') || '').match(/width:\\s*(\\d+[pxem%]+)/);","\t\t\tif ( t ) {","\t\t\t\toCol.sWidthOrig = t[1];","\t\t\t}","\t\t}","\t","\t\t/* User specified column options */","\t\tif ( oOptions !== undefined && oOptions !== null )","\t\t{","\t\t\t// Backwards compatibility","\t\t\t_fnCompatCols( oOptions );","\t","\t\t\t// Map camel case parameters to their Hungarian counterparts","\t\t\t_fnCamelToHungarian( DataTable.defaults.column, oOptions );","\t","\t\t\t/* Backwards compatibility for mDataProp */","\t\t\tif ( oOptions.mDataProp !== undefined && !oOptions.mData )","\t\t\t{","\t\t\t\toOptions.mData = oOptions.mDataProp;","\t\t\t}","\t","\t\t\tif ( oOptions.sType )","\t\t\t{","\t\t\t\toCol._sManualType = oOptions.sType;","\t\t\t}","\t","\t\t\t// `class` is a reserved word in Javascript, so we need to provide","\t\t\t// the ability to use a valid name for the camel case input","\t\t\tif ( oOptions.className && ! oOptions.sClass )","\t\t\t{","\t\t\t\toOptions.sClass = oOptions.className;","\t\t\t}","\t","\t\t\t$.extend( oCol, oOptions );","\t\t\t_fnMap( oCol, oOptions, \"sWidth\", \"sWidthOrig\" );","\t","\t\t\t/* iDataSort to be applied (backwards compatibility), but aDataSort will take","\t\t\t * priority if defined","\t\t\t */","\t\t\tif ( oOptions.iDataSort !== undefined )","\t\t\t{","\t\t\t\toCol.aDataSort = [ oOptions.iDataSort ];","\t\t\t}","\t\t\t_fnMap( oCol, oOptions, \"aDataSort\" );","\t\t}","\t","\t\t/* Cache the data get and set functions for speed */","\t\tvar mDataSrc = oCol.mData;","\t\tvar mData = _fnGetObjectDataFn( mDataSrc );","\t\tvar mRender = oCol.mRender ? _fnGetObjectDataFn( oCol.mRender ) : null;","\t","\t\tvar attrTest = function( src ) {","\t\t\treturn typeof src === 'string' && src.indexOf('@') !== -1;","\t\t};","\t\toCol._bAttrSrc = $.isPlainObject( mDataSrc ) && (","\t\t\tattrTest(mDataSrc.sort) || attrTest(mDataSrc.type) || attrTest(mDataSrc.filter)","\t\t);","\t","\t\toCol.fnGetData = function (rowData, type, meta) {","\t\t\tvar innerData = mData( rowData, type, undefined, meta );","\t","\t\t\treturn mRender && type ?","\t\t\t\tmRender( innerData, type, rowData, meta ) :","\t\t\t\tinnerData;","\t\t};","\t\toCol.fnSetData = function ( rowData, val, meta ) {","\t\t\treturn _fnSetObjectDataFn( mDataSrc )( rowData, val, meta );","\t\t};","\t","\t\t// Indicate if DataTables should read DOM data as an object or array","\t\t// Used in _fnGetRowElements","\t\tif ( typeof mDataSrc !== 'number' ) {","\t\t\toSettings._rowReadObject = true;","\t\t}","\t","\t\t/* Feature sorting overrides column specific when off */","\t\tif ( !oSettings.oFeatures.bSort )","\t\t{","\t\t\toCol.bSortable = false;","\t\t\tth.addClass( oClasses.sSortableNone ); // Have to add class here as order event isn't called","\t\t}","\t","\t\t/* Check that the class assignment is correct for sorting */","\t\tvar bAsc = $.inArray('asc', oCol.asSorting) !== -1;","\t\tvar bDesc = $.inArray('desc', oCol.asSorting) !== -1;","\t\tif ( !oCol.bSortable || (!bAsc && !bDesc) )","\t\t{","\t\t\toCol.sSortingClass = oClasses.sSortableNone;","\t\t\toCol.sSortingClassJUI = \"\";","\t\t}","\t\telse if ( bAsc && !bDesc )","\t\t{","\t\t\toCol.sSortingClass = oClasses.sSortableAsc;","\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIAscAllowed;","\t\t}","\t\telse if ( !bAsc && bDesc )","\t\t{","\t\t\toCol.sSortingClass = oClasses.sSortableDesc;","\t\t\toCol.sSortingClassJUI = oClasses.sSortJUIDescAllowed;","\t\t}","\t\telse","\t\t{","\t\t\toCol.sSortingClass = oClasses.sSortable;","\t\t\toCol.sSortingClassJUI = oClasses.sSortJUI;","\t\t}","\t}","\t","\t","\t/**","\t * Adjust the table column widths for new data. Note: you would probably want to","\t * do a redraw after calling this function!","\t *  @param {object} settings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnAdjustColumnSizing ( settings )","\t{","\t\t/* Not interested in doing column width calculation if auto-width is disabled */","\t\tif ( settings.oFeatures.bAutoWidth !== false )","\t\t{","\t\t\tvar columns = settings.aoColumns;","\t","\t\t\t_fnCalculateColumnWidths( settings );","\t\t\tfor ( var i=0 , iLen=columns.length ; i<iLen ; i++ )","\t\t\t{","\t\t\t\tcolumns[i].nTh.style.width = columns[i].sWidth;","\t\t\t}","\t\t}","\t","\t\tvar scroll = settings.oScroll;","\t\tif ( scroll.sY !== '' || scroll.sX !== '')","\t\t{","\t\t\t_fnScrollDraw( settings );","\t\t}","\t","\t\t_fnCallbackFire( settings, null, 'column-sizing', [settings] );","\t}","\t","\t","\t/**","\t * Covert the index of a visible column to the index in the data array (take account","\t * of hidden columns)","\t *  @param {object} oSettings dataTables settings object","\t *  @param {int} iMatch Visible column index to lookup","\t *  @returns {int} i the data index","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnVisibleToColumnIndex( oSettings, iMatch )","\t{","\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );","\t","\t\treturn typeof aiVis[iMatch] === 'number' ?","\t\t\taiVis[iMatch] :","\t\t\tnull;","\t}","\t","\t","\t/**","\t * Covert the index of an index in the data array and convert it to the visible","\t *   column index (take account of hidden columns)","\t *  @param {int} iMatch Column index to lookup","\t *  @param {object} oSettings dataTables settings object","\t *  @returns {int} i the data index","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnColumnIndexToVisible( oSettings, iMatch )","\t{","\t\tvar aiVis = _fnGetColumns( oSettings, 'bVisible' );","\t\tvar iPos = $.inArray( iMatch, aiVis );","\t","\t\treturn iPos !== -1 ? iPos : null;","\t}","\t","\t","\t/**","\t * Get the number of visible columns","\t *  @param {object} oSettings dataTables settings object","\t *  @returns {int} i the number of visible columns","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnVisbleColumns( oSettings )","\t{","\t\treturn _fnGetColumns( oSettings, 'bVisible' ).length;","\t}","\t","\t","\t/**","\t * Get an array of column indexes that match a given property","\t *  @param {object} oSettings dataTables settings object","\t *  @param {string} sParam Parameter in aoColumns to look for - typically","\t *    bVisible or bSearchable","\t *  @returns {array} Array of indexes with matched properties","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnGetColumns( oSettings, sParam )","\t{","\t\tvar a = [];","\t","\t\t$.map( oSettings.aoColumns, function(val, i) {","\t\t\tif ( val[sParam] ) {","\t\t\t\ta.push( i );","\t\t\t}","\t\t} );","\t","\t\treturn a;","\t}","\t","\t","\t/**","\t * Calculate the 'type' of a column","\t *  @param {object} settings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnColumnTypes ( settings )","\t{","\t\tvar columns = settings.aoColumns;","\t\tvar data = settings.aoData;","\t\tvar types = DataTable.ext.type.detect;","\t\tvar i, ien, j, jen, k, ken;","\t\tvar col, cell, detectedType, cache;","\t","\t\t// For each column, spin over the ","\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {","\t\t\tcol = columns[i];","\t\t\tcache = [];","\t","\t\t\tif ( ! col.sType && col._sManualType ) {","\t\t\t\tcol.sType = col._sManualType;","\t\t\t}","\t\t\telse if ( ! col.sType ) {","\t\t\t\tfor ( j=0, jen=types.length ; j<jen ; j++ ) {","\t\t\t\t\tfor ( k=0, ken=data.length ; k<ken ; k++ ) {","\t\t\t\t\t\t// Use a cache array so we only need to get the type data","\t\t\t\t\t\t// from the formatter once (when using multiple detectors)","\t\t\t\t\t\tif ( cache[k] === undefined ) {","\t\t\t\t\t\t\tcache[k] = _fnGetCellData( settings, k, i, 'type' );","\t\t\t\t\t\t}","\t","\t\t\t\t\t\tdetectedType = types[j]( cache[k], settings );","\t","\t\t\t\t\t\t// If null, then this type can't apply to this column, so","\t\t\t\t\t\t// rather than testing all cells, break out. There is an","\t\t\t\t\t\t// exception for the last type which is `html`. We need to","\t\t\t\t\t\t// scan all rows since it is possible to mix string and HTML","\t\t\t\t\t\t// types","\t\t\t\t\t\tif ( ! detectedType && j !== types.length-1 ) {","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t}","\t","\t\t\t\t\t\t// Only a single match is needed for html type since it is","\t\t\t\t\t\t// bottom of the pile and very similar to string","\t\t\t\t\t\tif ( detectedType === 'html' ) {","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t","\t\t\t\t\t// Type is valid for all data points in the column - use this","\t\t\t\t\t// type","\t\t\t\t\tif ( detectedType ) {","\t\t\t\t\t\tcol.sType = detectedType;","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","\t","\t\t\t\t// Fall back - if no type was detected, always use string","\t\t\t\tif ( ! col.sType ) {","\t\t\t\t\tcol.sType = 'string';","\t\t\t\t}","\t\t\t}","\t\t}","\t}","\t","\t","\t/**","\t * Take the column definitions and static columns arrays and calculate how","\t * they relate to column indexes. The callback function will then apply the","\t * definition found for a column to a suitable configuration object.","\t *  @param {object} oSettings dataTables settings object","\t *  @param {array} aoColDefs The aoColumnDefs array that is to be applied","\t *  @param {array} aoCols The aoColumns array that defines columns individually","\t *  @param {function} fn Callback function - takes two parameters, the calculated","\t *    column index and the definition for that column.","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnApplyColumnDefs( oSettings, aoColDefs, aoCols, fn )","\t{","\t\tvar i, iLen, j, jLen, k, kLen, def;","\t\tvar columns = oSettings.aoColumns;","\t","\t\t// Column definitions with aTargets","\t\tif ( aoColDefs )","\t\t{","\t\t\t/* Loop over the definitions array - loop in reverse so first instance has priority */","\t\t\tfor ( i=aoColDefs.length-1 ; i>=0 ; i-- )","\t\t\t{","\t\t\t\tdef = aoColDefs[i];","\t","\t\t\t\t/* Each definition can target multiple columns, as it is an array */","\t\t\t\tvar aTargets = def.targets !== undefined ?","\t\t\t\t\tdef.targets :","\t\t\t\t\tdef.aTargets;","\t","\t\t\t\tif ( ! $.isArray( aTargets ) )","\t\t\t\t{","\t\t\t\t\taTargets = [ aTargets ];","\t\t\t\t}","\t","\t\t\t\tfor ( j=0, jLen=aTargets.length ; j<jLen ; j++ )","\t\t\t\t{","\t\t\t\t\tif ( typeof aTargets[j] === 'number' && aTargets[j] >= 0 )","\t\t\t\t\t{","\t\t\t\t\t\t/* Add columns that we don't yet know about */","\t\t\t\t\t\twhile( columns.length <= aTargets[j] )","\t\t\t\t\t\t{","\t\t\t\t\t\t\t_fnAddColumn( oSettings );","\t\t\t\t\t\t}","\t","\t\t\t\t\t\t/* Integer, basic index */","\t\t\t\t\t\tfn( aTargets[j], def );","\t\t\t\t\t}","\t\t\t\t\telse if ( typeof aTargets[j] === 'number' && aTargets[j] < 0 )","\t\t\t\t\t{","\t\t\t\t\t\t/* Negative integer, right to left column counting */","\t\t\t\t\t\tfn( columns.length+aTargets[j], def );","\t\t\t\t\t}","\t\t\t\t\telse if ( typeof aTargets[j] === 'string' )","\t\t\t\t\t{","\t\t\t\t\t\t/* Class name matching on TH element */","\t\t\t\t\t\tfor ( k=0, kLen=columns.length ; k<kLen ; k++ )","\t\t\t\t\t\t{","\t\t\t\t\t\t\tif ( aTargets[j] == \"_all\" ||","\t\t\t\t\t\t\t     $(columns[k].nTh).hasClass( aTargets[j] ) )","\t\t\t\t\t\t\t{","\t\t\t\t\t\t\t\tfn( k, def );","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t","\t\t// Statically defined columns array","\t\tif ( aoCols )","\t\t{","\t\t\tfor ( i=0, iLen=aoCols.length ; i<iLen ; i++ )","\t\t\t{","\t\t\t\tfn( i, aoCols[i] );","\t\t\t}","\t\t}","\t}","\t","\t/**","\t * Add a data array to the table, creating DOM node etc. This is the parallel to","\t * _fnGatherData, but for adding rows from a Javascript source, rather than a","\t * DOM source.","\t *  @param {object} oSettings dataTables settings object","\t *  @param {array} aData data array to be added","\t *  @param {node} [nTr] TR element to add to the table - optional. If not given,","\t *    DataTables will create a row automatically","\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given","\t *    if nTr is.","\t *  @returns {int} >=0 if successful (index of new aoData entry), -1 if failed","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnAddData ( oSettings, aDataIn, nTr, anTds )","\t{","\t\t/* Create the object for storing information about this new row */","\t\tvar iRow = oSettings.aoData.length;","\t\tvar oData = $.extend( true, {}, DataTable.models.oRow, {","\t\t\tsrc: nTr ? 'dom' : 'data'","\t\t} );","\t","\t\toData._aData = aDataIn;","\t\toSettings.aoData.push( oData );","\t","\t\t/* Create the cells */","\t\tvar nTd, sThisType;","\t\tvar columns = oSettings.aoColumns;","\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )","\t\t{","\t\t\t// When working with a row, the data source object must be populated. In","\t\t\t// all other cases, the data source object is already populated, so we","\t\t\t// don't overwrite it, which might break bindings etc","\t\t\tif ( nTr ) {","\t\t\t\t_fnSetCellData( oSettings, iRow, i, _fnGetCellData( oSettings, iRow, i ) );","\t\t\t}","\t\t\tcolumns[i].sType = null;","\t\t}","\t","\t\t/* Add to the display array */","\t\toSettings.aiDisplayMaster.push( iRow );","\t","\t\t/* Create the DOM information, or register it if already present */","\t\tif ( nTr || ! oSettings.oFeatures.bDeferRender )","\t\t{","\t\t\t_fnCreateTr( oSettings, iRow, nTr, anTds );","\t\t}","\t","\t\treturn iRow;","\t}","\t","\t","\t/**","\t * Add one or more TR elements to the table. Generally we'd expect to","\t * use this for reading data from a DOM sourced table, but it could be","\t * used for an TR element. Note that if a TR is given, it is used (i.e.","\t * it is not cloned).","\t *  @param {object} settings dataTables settings object","\t *  @param {array|node|jQuery} trs The TR element(s) to add to the table","\t *  @returns {array} Array of indexes for the added rows","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnAddTr( settings, trs )","\t{","\t\tvar row;","\t","\t\t// Allow an individual node to be passed in","\t\tif ( ! (trs instanceof $) ) {","\t\t\ttrs = $(trs);","\t\t}","\t","\t\treturn trs.map( function (i, el) {","\t\t\trow = _fnGetRowElements( settings, el );","\t\t\treturn _fnAddData( settings, row.data, el, row.cells );","\t\t} );","\t}","\t","\t","\t/**","\t * Take a TR element and convert it to an index in aoData","\t *  @param {object} oSettings dataTables settings object","\t *  @param {node} n the TR element to find","\t *  @returns {int} index if the node is found, null if not","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnNodeToDataIndex( oSettings, n )","\t{","\t\treturn (n._DT_RowIndex!==undefined) ? n._DT_RowIndex : null;","\t}","\t","\t","\t/**","\t * Take a TD element and convert it into a column data index (not the visible index)","\t *  @param {object} oSettings dataTables settings object","\t *  @param {int} iRow The row number the TD/TH can be found in","\t *  @param {node} n The TD/TH element to find","\t *  @returns {int} index if the node is found, -1 if not","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnNodeToColumnIndex( oSettings, iRow, n )","\t{","\t\treturn $.inArray( n, oSettings.aoData[ iRow ].anCells );","\t}","\t","\t","\t/**","\t * Get the data for a given cell from the internal cache, taking into account data mapping","\t *  @param {object} settings dataTables settings object","\t *  @param {int} rowIdx aoData row id","\t *  @param {int} colIdx Column index","\t *  @param {string} type data get type ('display', 'type' 'filter' 'sort')","\t *  @returns {*} Cell data","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnGetCellData( settings, rowIdx, colIdx, type )","\t{","\t\tvar draw           = settings.iDraw;","\t\tvar col            = settings.aoColumns[colIdx];","\t\tvar rowData        = settings.aoData[rowIdx]._aData;","\t\tvar defaultContent = col.sDefaultContent;","\t\tvar cellData       = col.fnGetData( rowData, type, {","\t\t\tsettings: settings,","\t\t\trow:      rowIdx,","\t\t\tcol:      colIdx","\t\t} );","\t","\t\tif ( cellData === undefined ) {","\t\t\tif ( settings.iDrawError != draw && defaultContent === null ) {","\t\t\t\t_fnLog( settings, 0, \"Requested unknown parameter \"+","\t\t\t\t\t(typeof col.mData=='function' ? '{function}' : \"'\"+col.mData+\"'\")+","\t\t\t\t\t\" for row \"+rowIdx, 4 );","\t\t\t\tsettings.iDrawError = draw;","\t\t\t}","\t\t\treturn defaultContent;","\t\t}","\t","\t\t/* When the data source is null, we can use default column data */","\t\tif ( (cellData === rowData || cellData === null) && defaultContent !== null ) {","\t\t\tcellData = defaultContent;","\t\t}","\t\telse if ( typeof cellData === 'function' ) {","\t\t\t// If the data source is a function, then we run it and use the return,","\t\t\t// executing in the scope of the data object (for instances)","\t\t\treturn cellData.call( rowData );","\t\t}","\t","\t\tif ( cellData === null && type == 'display' ) {","\t\t\treturn '';","\t\t}","\t\treturn cellData;","\t}","\t","\t","\t/**","\t * Set the value for a specific cell, into the internal data cache","\t *  @param {object} settings dataTables settings object","\t *  @param {int} rowIdx aoData row id","\t *  @param {int} colIdx Column index","\t *  @param {*} val Value to set","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnSetCellData( settings, rowIdx, colIdx, val )","\t{","\t\tvar col     = settings.aoColumns[colIdx];","\t\tvar rowData = settings.aoData[rowIdx]._aData;","\t","\t\tcol.fnSetData( rowData, val, {","\t\t\tsettings: settings,","\t\t\trow:      rowIdx,","\t\t\tcol:      colIdx","\t\t}  );","\t}","\t","\t","\t// Private variable that is used to match action syntax in the data property object","\tvar __reArray = /\\[.*?\\]$/;","\tvar __reFn = /\\(\\)$/;","\t","\t/**","\t * Split string on periods, taking into account escaped periods","\t * @param  {string} str String to split","\t * @return {array} Split string","\t */","\tfunction _fnSplitObjNotation( str )","\t{","\t\treturn $.map( str.match(/(\\\\.|[^\\.])+/g), function ( s ) {","\t\t\treturn s.replace(/\\\\./g, '.');","\t\t} );","\t}","\t","\t","\t/**","\t * Return a function that can be used to get data from a source object, taking","\t * into account the ability to use nested objects as a source","\t *  @param {string|int|function} mSource The data source for the object","\t *  @returns {function} Data get function","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnGetObjectDataFn( mSource )","\t{","\t\tif ( $.isPlainObject( mSource ) )","\t\t{","\t\t\t/* Build an object of get functions, and wrap them in a single call */","\t\t\tvar o = {};","\t\t\t$.each( mSource, function (key, val) {","\t\t\t\tif ( val ) {","\t\t\t\t\to[key] = _fnGetObjectDataFn( val );","\t\t\t\t}","\t\t\t} );","\t","\t\t\treturn function (data, type, row, meta) {","\t\t\t\tvar t = o[type] || o._;","\t\t\t\treturn t !== undefined ?","\t\t\t\t\tt(data, type, row, meta) :","\t\t\t\t\tdata;","\t\t\t};","\t\t}","\t\telse if ( mSource === null )","\t\t{","\t\t\t/* Give an empty string for rendering / sorting etc */","\t\t\treturn function (data) { // type, row and meta also passed, but not used","\t\t\t\treturn data;","\t\t\t};","\t\t}","\t\telse if ( typeof mSource === 'function' )","\t\t{","\t\t\treturn function (data, type, row, meta) {","\t\t\t\treturn mSource( data, type, row, meta );","\t\t\t};","\t\t}","\t\telse if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||","\t\t\t      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )","\t\t{","\t\t\t/* If there is a . in the source string then the data source is in a","\t\t\t * nested object so we loop over the data for each level to get the next","\t\t\t * level down. On each loop we test for undefined, and if found immediately","\t\t\t * return. This allows entire objects to be missing and sDefaultContent to","\t\t\t * be used if defined, rather than throwing an error","\t\t\t */","\t\t\tvar fetchData = function (data, type, src) {","\t\t\t\tvar arrayNotation, funcNotation, out, innerSrc;","\t","\t\t\t\tif ( src !== \"\" )","\t\t\t\t{","\t\t\t\t\tvar a = _fnSplitObjNotation( src );","\t","\t\t\t\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )","\t\t\t\t\t{","\t\t\t\t\t\t// Check if we are dealing with special notation","\t\t\t\t\t\tarrayNotation = a[i].match(__reArray);","\t\t\t\t\t\tfuncNotation = a[i].match(__reFn);","\t","\t\t\t\t\t\tif ( arrayNotation )","\t\t\t\t\t\t{","\t\t\t\t\t\t\t// Array notation","\t\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');","\t","\t\t\t\t\t\t\t// Condition allows simply [] to be passed in","\t\t\t\t\t\t\tif ( a[i] !== \"\" ) {","\t\t\t\t\t\t\t\tdata = data[ a[i] ];","\t\t\t\t\t\t\t}","\t\t\t\t\t\t\tout = [];","\t","\t\t\t\t\t\t\t// Get the remainder of the nested object to get","\t\t\t\t\t\t\ta.splice( 0, i+1 );","\t\t\t\t\t\t\tinnerSrc = a.join('.');","\t","\t\t\t\t\t\t\t// Traverse each entry in the array getting the properties requested","\t\t\t\t\t\t\tfor ( var j=0, jLen=data.length ; j<jLen ; j++ ) {","\t\t\t\t\t\t\t\tout.push( fetchData( data[j], type, innerSrc ) );","\t\t\t\t\t\t\t}","\t","\t\t\t\t\t\t\t// If a string is given in between the array notation indicators, that","\t\t\t\t\t\t\t// is used to join the strings together, otherwise an array is returned","\t\t\t\t\t\t\tvar join = arrayNotation[0].substring(1, arrayNotation[0].length-1);","\t\t\t\t\t\t\tdata = (join===\"\") ? out : out.join(join);","\t","\t\t\t\t\t\t\t// The inner call to fetchData has already traversed through the remainder","\t\t\t\t\t\t\t// of the source requested, so we exit from the loop","\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t}","\t\t\t\t\t\telse if ( funcNotation )","\t\t\t\t\t\t{","\t\t\t\t\t\t\t// Function call","\t\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');","\t\t\t\t\t\t\tdata = data[ a[i] ]();","\t\t\t\t\t\t\tcontinue;","\t\t\t\t\t\t}","\t","\t\t\t\t\t\tif ( data === null || data[ a[i] ] === undefined )","\t\t\t\t\t\t{","\t\t\t\t\t\t\treturn undefined;","\t\t\t\t\t\t}","\t\t\t\t\t\tdata = data[ a[i] ];","\t\t\t\t\t}","\t\t\t\t}","\t","\t\t\t\treturn data;","\t\t\t};","\t","\t\t\treturn function (data, type) { // row and meta also passed, but not used","\t\t\t\treturn fetchData( data, type, mSource );","\t\t\t};","\t\t}","\t\telse","\t\t{","\t\t\t/* Array or flat object mapping */","\t\t\treturn function (data, type) { // row and meta also passed, but not used","\t\t\t\treturn data[mSource];","\t\t\t};","\t\t}","\t}","\t","\t","\t/**","\t * Return a function that can be used to set data from a source object, taking","\t * into account the ability to use nested objects as a source","\t *  @param {string|int|function} mSource The data source for the object","\t *  @returns {function} Data set function","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnSetObjectDataFn( mSource )","\t{","\t\tif ( $.isPlainObject( mSource ) )","\t\t{","\t\t\t/* Unlike get, only the underscore (global) option is used for for","\t\t\t * setting data since we don't know the type here. This is why an object","\t\t\t * option is not documented for `mData` (which is read/write), but it is","\t\t\t * for `mRender` which is read only.","\t\t\t */","\t\t\treturn _fnSetObjectDataFn( mSource._ );","\t\t}","\t\telse if ( mSource === null )","\t\t{","\t\t\t/* Nothing to do when the data source is null */","\t\t\treturn function () {};","\t\t}","\t\telse if ( typeof mSource === 'function' )","\t\t{","\t\t\treturn function (data, val, meta) {","\t\t\t\tmSource( data, 'set', val, meta );","\t\t\t};","\t\t}","\t\telse if ( typeof mSource === 'string' && (mSource.indexOf('.') !== -1 ||","\t\t\t      mSource.indexOf('[') !== -1 || mSource.indexOf('(') !== -1) )","\t\t{","\t\t\t/* Like the get, we need to get data from a nested object */","\t\t\tvar setData = function (data, val, src) {","\t\t\t\tvar a = _fnSplitObjNotation( src ), b;","\t\t\t\tvar aLast = a[a.length-1];","\t\t\t\tvar arrayNotation, funcNotation, o, innerSrc;","\t","\t\t\t\tfor ( var i=0, iLen=a.length-1 ; i<iLen ; i++ )","\t\t\t\t{","\t\t\t\t\t// Check if we are dealing with an array notation request","\t\t\t\t\tarrayNotation = a[i].match(__reArray);","\t\t\t\t\tfuncNotation = a[i].match(__reFn);","\t","\t\t\t\t\tif ( arrayNotation )","\t\t\t\t\t{","\t\t\t\t\t\ta[i] = a[i].replace(__reArray, '');","\t\t\t\t\t\tdata[ a[i] ] = [];","\t","\t\t\t\t\t\t// Get the remainder of the nested object to set so we can recurse","\t\t\t\t\t\tb = a.slice();","\t\t\t\t\t\tb.splice( 0, i+1 );","\t\t\t\t\t\tinnerSrc = b.join('.');","\t","\t\t\t\t\t\t// Traverse each entry in the array setting the properties requested","\t\t\t\t\t\tfor ( var j=0, jLen=val.length ; j<jLen ; j++ )","\t\t\t\t\t\t{","\t\t\t\t\t\t\to = {};","\t\t\t\t\t\t\tsetData( o, val[j], innerSrc );","\t\t\t\t\t\t\tdata[ a[i] ].push( o );","\t\t\t\t\t\t}","\t","\t\t\t\t\t\t// The inner call to setData has already traversed through the remainder","\t\t\t\t\t\t// of the source and has set the data, thus we can exit here","\t\t\t\t\t\treturn;","\t\t\t\t\t}","\t\t\t\t\telse if ( funcNotation )","\t\t\t\t\t{","\t\t\t\t\t\t// Function call","\t\t\t\t\t\ta[i] = a[i].replace(__reFn, '');","\t\t\t\t\t\tdata = data[ a[i] ]( val );","\t\t\t\t\t}","\t","\t\t\t\t\t// If the nested object doesn't currently exist - since we are","\t\t\t\t\t// trying to set the value - create it","\t\t\t\t\tif ( data[ a[i] ] === null || data[ a[i] ] === undefined )","\t\t\t\t\t{","\t\t\t\t\t\tdata[ a[i] ] = {};","\t\t\t\t\t}","\t\t\t\t\tdata = data[ a[i] ];","\t\t\t\t}","\t","\t\t\t\t// Last item in the input - i.e, the actual set","\t\t\t\tif ( aLast.match(__reFn ) )","\t\t\t\t{","\t\t\t\t\t// Function call","\t\t\t\t\tdata = data[ aLast.replace(__reFn, '') ]( val );","\t\t\t\t}","\t\t\t\telse","\t\t\t\t{","\t\t\t\t\t// If array notation is used, we just want to strip it and use the property name","\t\t\t\t\t// and assign the value. If it isn't used, then we get the result we want anyway","\t\t\t\t\tdata[ aLast.replace(__reArray, '') ] = val;","\t\t\t\t}","\t\t\t};","\t","\t\t\treturn function (data, val) { // meta is also passed in, but not used","\t\t\t\treturn setData( data, val, mSource );","\t\t\t};","\t\t}","\t\telse","\t\t{","\t\t\t/* Array or flat object mapping */","\t\t\treturn function (data, val) { // meta is also passed in, but not used","\t\t\t\tdata[mSource] = val;","\t\t\t};","\t\t}","\t}","\t","\t","\t/**","\t * Return an array with the full table data","\t *  @param {object} oSettings dataTables settings object","\t *  @returns array {array} aData Master data array","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnGetDataMaster ( settings )","\t{","\t\treturn _pluck( settings.aoData, '_aData' );","\t}","\t","\t","\t/**","\t * Nuke the table","\t *  @param {object} oSettings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnClearTable( settings )","\t{","\t\tsettings.aoData.length = 0;","\t\tsettings.aiDisplayMaster.length = 0;","\t\tsettings.aiDisplay.length = 0;","\t}","\t","\t","\t /**","\t * Take an array of integers (index array) and remove a target integer (value - not","\t * the key!)","\t *  @param {array} a Index array to target","\t *  @param {int} iTarget value to find","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnDeleteIndex( a, iTarget, splice )","\t{","\t\tvar iTargetIndex = -1;","\t","\t\tfor ( var i=0, iLen=a.length ; i<iLen ; i++ )","\t\t{","\t\t\tif ( a[i] == iTarget )","\t\t\t{","\t\t\t\tiTargetIndex = i;","\t\t\t}","\t\t\telse if ( a[i] > iTarget )","\t\t\t{","\t\t\t\ta[i]--;","\t\t\t}","\t\t}","\t","\t\tif ( iTargetIndex != -1 && splice === undefined )","\t\t{","\t\t\ta.splice( iTargetIndex, 1 );","\t\t}","\t}","\t","\t","\t/**","\t * Mark cached data as invalid such that a re-read of the data will occur when","\t * the cached data is next requested. Also update from the data source object.","\t *","\t * @param {object} settings DataTables settings object","\t * @param {int}    rowIdx   Row index to invalidate","\t * @param {string} [src]    Source to invalidate from: undefined, 'auto', 'dom'","\t *     or 'data'","\t * @param {int}    [colIdx] Column index to invalidate. If undefined the whole","\t *     row will be invalidated","\t * @memberof DataTable#oApi","\t *","\t * @todo For the modularisation of v1.11 this will need to become a callback, so","\t *   the sort and filter methods can subscribe to it. That will required","\t *   initialisation options for sorting, which is why it is not already baked in","\t */","\tfunction _fnInvalidate( settings, rowIdx, src, colIdx )","\t{","\t\tvar row = settings.aoData[ rowIdx ];","\t\tvar i, ien;","\t\tvar cellWrite = function ( cell, col ) {","\t\t\t// This is very frustrating, but in IE if you just write directly","\t\t\t// to innerHTML, and elements that are overwritten are GC'ed,","\t\t\t// even if there is a reference to them elsewhere","\t\t\twhile ( cell.childNodes.length ) {","\t\t\t\tcell.removeChild( cell.firstChild );","\t\t\t}","\t","\t\t\tcell.innerHTML = _fnGetCellData( settings, rowIdx, col, 'display' );","\t\t};","\t","\t\t// Are we reading last data from DOM or the data object?","\t\tif ( src === 'dom' || ((! src || src === 'auto') && row.src === 'dom') ) {","\t\t\t// Read the data from the DOM","\t\t\trow._aData = _fnGetRowElements(","\t\t\t\t\tsettings, row, colIdx, colIdx === undefined ? undefined : row._aData","\t\t\t\t)","\t\t\t\t.data;","\t\t}","\t\telse {","\t\t\t// Reading from data object, update the DOM","\t\t\tvar cells = row.anCells;","\t","\t\t\tif ( cells ) {","\t\t\t\tif ( colIdx !== undefined ) {","\t\t\t\t\tcellWrite( cells[colIdx], colIdx );","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {","\t\t\t\t\t\tcellWrite( cells[i], i );","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t","\t\t// For both row and cell invalidation, the cached data for sorting and","\t\t// filtering is nulled out","\t\trow._aSortData = null;","\t\trow._aFilterData = null;","\t","\t\t// Invalidate the type for a specific column (if given) or all columns since","\t\t// the data might have changed","\t\tvar cols = settings.aoColumns;","\t\tif ( colIdx !== undefined ) {","\t\t\tcols[ colIdx ].sType = null;","\t\t}","\t\telse {","\t\t\tfor ( i=0, ien=cols.length ; i<ien ; i++ ) {","\t\t\t\tcols[i].sType = null;","\t\t\t}","\t","\t\t\t// Update DataTables special `DT_*` attributes for the row","\t\t\t_fnRowAttributes( row );","\t\t}","\t}","\t","\t","\t/**","\t * Build a data source object from an HTML row, reading the contents of the","\t * cells that are in the row.","\t *","\t * @param {object} settings DataTables settings object","\t * @param {node|object} TR element from which to read data or existing row","\t *   object from which to re-read the data from the cells","\t * @param {int} [colIdx] Optional column index","\t * @param {array|object} [d] Data source object. If `colIdx` is given then this","\t *   parameter should also be given and will be used to write the data into.","\t *   Only the column in question will be written","\t * @returns {object} Object with two parameters: `data` the data read, in","\t *   document order, and `cells` and array of nodes (they can be useful to the","\t *   caller, so rather than needing a second traversal to get them, just return","\t *   them from here).","\t * @memberof DataTable#oApi","\t */","\tfunction _fnGetRowElements( settings, row, colIdx, d )","\t{","\t\tvar","\t\t\ttds = [],","\t\t\ttd = row.firstChild,","\t\t\tname, col, o, i=0, contents,","\t\t\tcolumns = settings.aoColumns,","\t\t\tobjectRead = settings._rowReadObject;","\t","\t\t// Allow the data object to be passed in, or construct","\t\td = d || objectRead ? {} : [];","\t","\t\tvar attr = function ( str, td  ) {","\t\t\tif ( typeof str === 'string' ) {","\t\t\t\tvar idx = str.indexOf('@');","\t","\t\t\t\tif ( idx !== -1 ) {","\t\t\t\t\tvar attr = str.substring( idx+1 );","\t\t\t\t\tvar setter = _fnSetObjectDataFn( str );","\t\t\t\t\tsetter( d, td.getAttribute( attr ) );","\t\t\t\t}","\t\t\t}","\t\t};","\t","\t\t// Read data from a cell and store into the data object","\t\tvar cellProcess = function ( cell ) {","\t\t\tif ( colIdx === undefined || colIdx === i ) {","\t\t\t\tcol = columns[i];","\t\t\t\tcontents = $.trim(cell.innerHTML);","\t","\t\t\t\tif ( col && col._bAttrSrc ) {","\t\t\t\t\tvar setter = _fnSetObjectDataFn( col.mData._ );","\t\t\t\t\tsetter( d, contents );","\t","\t\t\t\t\tattr( col.mData.sort, cell );","\t\t\t\t\tattr( col.mData.type, cell );","\t\t\t\t\tattr( col.mData.filter, cell );","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\t// Depending on the `data` option for the columns the data can","\t\t\t\t\t// be read to either an object or an array.","\t\t\t\t\tif ( objectRead ) {","\t\t\t\t\t\tif ( ! col._setter ) {","\t\t\t\t\t\t\t// Cache the setter function","\t\t\t\t\t\t\tcol._setter = _fnSetObjectDataFn( col.mData );","\t\t\t\t\t\t}","\t\t\t\t\t\tcol._setter( d, contents );","\t\t\t\t\t}","\t\t\t\t\telse {","\t\t\t\t\t\td[i] = contents;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t","\t\t\ti++;","\t\t};","\t","\t\tif ( td ) {","\t\t\t// `tr` element was passed in","\t\t\twhile ( td ) {","\t\t\t\tname = td.nodeName.toUpperCase();","\t","\t\t\t\tif ( name == \"TD\" || name == \"TH\" ) {","\t\t\t\t\tcellProcess( td );","\t\t\t\t\ttds.push( td );","\t\t\t\t}","\t","\t\t\t\ttd = td.nextSibling;","\t\t\t}","\t\t}","\t\telse {","\t\t\t// Existing row object passed in","\t\t\ttds = row.anCells;","\t\t\t","\t\t\tfor ( var j=0, jen=tds.length ; j<jen ; j++ ) {","\t\t\t\tcellProcess( tds[j] );","\t\t\t}","\t\t}","\t","\t\treturn {","\t\t\tdata: d,","\t\t\tcells: tds","\t\t};","\t}","\t/**","\t * Create a new TR element (and it's TD children) for a row","\t *  @param {object} oSettings dataTables settings object","\t *  @param {int} iRow Row to consider","\t *  @param {node} [nTrIn] TR element to add to the table - optional. If not given,","\t *    DataTables will create a row automatically","\t *  @param {array} [anTds] Array of TD|TH elements for the row - must be given","\t *    if nTr is.","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnCreateTr ( oSettings, iRow, nTrIn, anTds )","\t{","\t\tvar","\t\t\trow = oSettings.aoData[iRow],","\t\t\trowData = row._aData,","\t\t\tcells = [],","\t\t\tnTr, nTd, oCol,","\t\t\ti, iLen;","\t","\t\tif ( row.nTr === null )","\t\t{","\t\t\tnTr = nTrIn || document.createElement('tr');","\t","\t\t\trow.nTr = nTr;","\t\t\trow.anCells = cells;","\t","\t\t\t/* Use a private property on the node to allow reserve mapping from the node","\t\t\t * to the aoData array for fast look up","\t\t\t */","\t\t\tnTr._DT_RowIndex = iRow;","\t","\t\t\t/* Special parameters can be given by the data source to be used on the row */","\t\t\t_fnRowAttributes( row );","\t","\t\t\t/* Process each column */","\t\t\tfor ( i=0, iLen=oSettings.aoColumns.length ; i<iLen ; i++ )","\t\t\t{","\t\t\t\toCol = oSettings.aoColumns[i];","\t","\t\t\t\tnTd = nTrIn ? anTds[i] : document.createElement( oCol.sCellType );","\t\t\t\tcells.push( nTd );","\t","\t\t\t\t// Need to create the HTML if new, or if a rendering function is defined","\t\t\t\tif ( !nTrIn || oCol.mRender || oCol.mData !== i )","\t\t\t\t{","\t\t\t\t\tnTd.innerHTML = _fnGetCellData( oSettings, iRow, i, 'display' );","\t\t\t\t}","\t","\t\t\t\t/* Add user defined class */","\t\t\t\tif ( oCol.sClass )","\t\t\t\t{","\t\t\t\t\tnTd.className += ' '+oCol.sClass;","\t\t\t\t}","\t","\t\t\t\t// Visibility - add or remove as required","\t\t\t\tif ( oCol.bVisible && ! nTrIn )","\t\t\t\t{","\t\t\t\t\tnTr.appendChild( nTd );","\t\t\t\t}","\t\t\t\telse if ( ! oCol.bVisible && nTrIn )","\t\t\t\t{","\t\t\t\t\tnTd.parentNode.removeChild( nTd );","\t\t\t\t}","\t","\t\t\t\tif ( oCol.fnCreatedCell )","\t\t\t\t{","\t\t\t\t\toCol.fnCreatedCell.call( oSettings.oInstance,","\t\t\t\t\t\tnTd, _fnGetCellData( oSettings, iRow, i ), rowData, iRow, i","\t\t\t\t\t);","\t\t\t\t}","\t\t\t}","\t","\t\t\t_fnCallbackFire( oSettings, 'aoRowCreatedCallback', null, [nTr, rowData, iRow] );","\t\t}","\t","\t\t// Remove once webkit bug 131819 and Chromium bug 365619 have been resolved","\t\t// and deployed","\t\trow.nTr.setAttribute( 'role', 'row' );","\t}","\t","\t","\t/**","\t * Add attributes to a row based on the special `DT_*` parameters in a data","\t * source object.","\t *  @param {object} DataTables row object for the row to be modified","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnRowAttributes( row )","\t{","\t\tvar tr = row.nTr;","\t\tvar data = row._aData;","\t","\t\tif ( tr ) {","\t\t\tif ( data.DT_RowId ) {","\t\t\t\ttr.id = data.DT_RowId;","\t\t\t}","\t","\t\t\tif ( data.DT_RowClass ) {","\t\t\t\t// Remove any classes added by DT_RowClass before","\t\t\t\tvar a = data.DT_RowClass.split(' ');","\t\t\t\trow.__rowc = row.__rowc ?","\t\t\t\t\t_unique( row.__rowc.concat( a ) ) :","\t\t\t\t\ta;","\t","\t\t\t\t$(tr)","\t\t\t\t\t.removeClass( row.__rowc.join(' ') )","\t\t\t\t\t.addClass( data.DT_RowClass );","\t\t\t}","\t","\t\t\tif ( data.DT_RowAttr ) {","\t\t\t\t$(tr).attr( data.DT_RowAttr );","\t\t\t}","\t","\t\t\tif ( data.DT_RowData ) {","\t\t\t\t$(tr).data( data.DT_RowData );","\t\t\t}","\t\t}","\t}","\t","\t","\t/**","\t * Create the HTML header for the table","\t *  @param {object} oSettings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnBuildHead( oSettings )","\t{","\t\tvar i, ien, cell, row, column;","\t\tvar thead = oSettings.nTHead;","\t\tvar tfoot = oSettings.nTFoot;","\t\tvar createHeader = $('th, td', thead).length === 0;","\t\tvar classes = oSettings.oClasses;","\t\tvar columns = oSettings.aoColumns;","\t","\t\tif ( createHeader ) {","\t\t\trow = $('<tr/>').appendTo( thead );","\t\t}","\t","\t\tfor ( i=0, ien=columns.length ; i<ien ; i++ ) {","\t\t\tcolumn = columns[i];","\t\t\tcell = $( column.nTh ).addClass( column.sClass );","\t","\t\t\tif ( createHeader ) {","\t\t\t\tcell.appendTo( row );","\t\t\t}","\t","\t\t\t// 1.11 move into sorting","\t\t\tif ( oSettings.oFeatures.bSort ) {","\t\t\t\tcell.addClass( column.sSortingClass );","\t","\t\t\t\tif ( column.bSortable !== false ) {","\t\t\t\t\tcell","\t\t\t\t\t\t.attr( 'tabindex', oSettings.iTabIndex )","\t\t\t\t\t\t.attr( 'aria-controls', oSettings.sTableId );","\t","\t\t\t\t\t_fnSortAttachListener( oSettings, column.nTh, i );","\t\t\t\t}","\t\t\t}","\t","\t\t\tif ( column.sTitle != cell.html() ) {","\t\t\t\tcell.html( column.sTitle );","\t\t\t}","\t","\t\t\t_fnRenderer( oSettings, 'header' )(","\t\t\t\toSettings, cell, column, classes","\t\t\t);","\t\t}","\t","\t\tif ( createHeader ) {","\t\t\t_fnDetectHeader( oSettings.aoHeader, thead );","\t\t}","\t\t","\t\t/* ARIA role for the rows */","\t \t$(thead).find('>tr').attr('role', 'row');","\t","\t\t/* Deal with the footer - add classes if required */","\t\t$(thead).find('>tr>th, >tr>td').addClass( classes.sHeaderTH );","\t\t$(tfoot).find('>tr>th, >tr>td').addClass( classes.sFooterTH );","\t","\t\t// Cache the footer cells. Note that we only take the cells from the first","\t\t// row in the footer. If there is more than one row the user wants to","\t\t// interact with, they need to use the table().foot() method. Note also this","\t\t// allows cells to be used for multiple columns using colspan","\t\tif ( tfoot !== null ) {","\t\t\tvar cells = oSettings.aoFooter[0];","\t","\t\t\tfor ( i=0, ien=cells.length ; i<ien ; i++ ) {","\t\t\t\tcolumn = columns[i];","\t\t\t\tcolumn.nTf = cells[i].cell;","\t","\t\t\t\tif ( column.sClass ) {","\t\t\t\t\t$(column.nTf).addClass( column.sClass );","\t\t\t\t}","\t\t\t}","\t\t}","\t}","\t","\t","\t/**","\t * Draw the header (or footer) element based on the column visibility states. The","\t * methodology here is to use the layout array from _fnDetectHeader, modified for","\t * the instantaneous column visibility, to construct the new layout. The grid is","\t * traversed over cell at a time in a rows x columns grid fashion, although each","\t * cell insert can cover multiple elements in the grid - which is tracks using the","\t * aApplied array. Cell inserts in the grid will only occur where there isn't","\t * already a cell in that position.","\t *  @param {object} oSettings dataTables settings object","\t *  @param array {objects} aoSource Layout array from _fnDetectHeader","\t *  @param {boolean} [bIncludeHidden=false] If true then include the hidden columns in the calc,","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnDrawHead( oSettings, aoSource, bIncludeHidden )","\t{","\t\tvar i, iLen, j, jLen, k, kLen, n, nLocalTr;","\t\tvar aoLocal = [];","\t\tvar aApplied = [];","\t\tvar iColumns = oSettings.aoColumns.length;","\t\tvar iRowspan, iColspan;","\t","\t\tif ( ! aoSource )","\t\t{","\t\t\treturn;","\t\t}","\t","\t\tif (  bIncludeHidden === undefined )","\t\t{","\t\t\tbIncludeHidden = false;","\t\t}","\t","\t\t/* Make a copy of the master layout array, but without the visible columns in it */","\t\tfor ( i=0, iLen=aoSource.length ; i<iLen ; i++ )","\t\t{","\t\t\taoLocal[i] = aoSource[i].slice();","\t\t\taoLocal[i].nTr = aoSource[i].nTr;","\t","\t\t\t/* Remove any columns which are currently hidden */","\t\t\tfor ( j=iColumns-1 ; j>=0 ; j-- )","\t\t\t{","\t\t\t\tif ( !oSettings.aoColumns[j].bVisible && !bIncludeHidden )","\t\t\t\t{","\t\t\t\t\taoLocal[i].splice( j, 1 );","\t\t\t\t}","\t\t\t}","\t","\t\t\t/* Prep the applied array - it needs an element for each row */","\t\t\taApplied.push( [] );","\t\t}","\t","\t\tfor ( i=0, iLen=aoLocal.length ; i<iLen ; i++ )","\t\t{","\t\t\tnLocalTr = aoLocal[i].nTr;","\t","\t\t\t/* All cells are going to be replaced, so empty out the row */","\t\t\tif ( nLocalTr )","\t\t\t{","\t\t\t\twhile( (n = nLocalTr.firstChild) )","\t\t\t\t{","\t\t\t\t\tnLocalTr.removeChild( n );","\t\t\t\t}","\t\t\t}","\t","\t\t\tfor ( j=0, jLen=aoLocal[i].length ; j<jLen ; j++ )","\t\t\t{","\t\t\t\tiRowspan = 1;","\t\t\t\tiColspan = 1;","\t","\t\t\t\t/* Check to see if there is already a cell (row/colspan) covering our target","\t\t\t\t * insert point. If there is, then there is nothing to do.","\t\t\t\t */","\t\t\t\tif ( aApplied[i][j] === undefined )","\t\t\t\t{","\t\t\t\t\tnLocalTr.appendChild( aoLocal[i][j].cell );","\t\t\t\t\taApplied[i][j] = 1;","\t","\t\t\t\t\t/* Expand the cell to cover as many rows as needed */","\t\t\t\t\twhile ( aoLocal[i+iRowspan] !== undefined &&","\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i+iRowspan][j].cell )","\t\t\t\t\t{","\t\t\t\t\t\taApplied[i+iRowspan][j] = 1;","\t\t\t\t\t\tiRowspan++;","\t\t\t\t\t}","\t","\t\t\t\t\t/* Expand the cell to cover as many columns as needed */","\t\t\t\t\twhile ( aoLocal[i][j+iColspan] !== undefined &&","\t\t\t\t\t        aoLocal[i][j].cell == aoLocal[i][j+iColspan].cell )","\t\t\t\t\t{","\t\t\t\t\t\t/* Must update the applied array over the rows for the columns */","\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )","\t\t\t\t\t\t{","\t\t\t\t\t\t\taApplied[i+k][j+iColspan] = 1;","\t\t\t\t\t\t}","\t\t\t\t\t\tiColspan++;","\t\t\t\t\t}","\t","\t\t\t\t\t/* Do the actual expansion in the DOM */","\t\t\t\t\t$(aoLocal[i][j].cell)","\t\t\t\t\t\t.attr('rowspan', iRowspan)","\t\t\t\t\t\t.attr('colspan', iColspan);","\t\t\t\t}","\t\t\t}","\t\t}","\t}","\t","\t","\t/**","\t * Insert the required TR nodes into the table for display","\t *  @param {object} oSettings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnDraw( oSettings )","\t{","\t\t/* Provide a pre-callback function which can be used to cancel the draw is false is returned */","\t\tvar aPreDraw = _fnCallbackFire( oSettings, 'aoPreDrawCallback', 'preDraw', [oSettings] );","\t\tif ( $.inArray( false, aPreDraw ) !== -1 )","\t\t{","\t\t\t_fnProcessingDisplay( oSettings, false );","\t\t\treturn;","\t\t}","\t","\t\tvar i, iLen, n;","\t\tvar anRows = [];","\t\tvar iRowCount = 0;","\t\tvar asStripeClasses = oSettings.asStripeClasses;","\t\tvar iStripes = asStripeClasses.length;","\t\tvar iOpenRows = oSettings.aoOpenRows.length;","\t\tvar oLang = oSettings.oLanguage;","\t\tvar iInitDisplayStart = oSettings.iInitDisplayStart;","\t\tvar bServerSide = _fnDataSource( oSettings ) == 'ssp';","\t\tvar aiDisplay = oSettings.aiDisplay;","\t","\t\toSettings.bDrawing = true;","\t","\t\t/* Check and see if we have an initial draw position from state saving */","\t\tif ( iInitDisplayStart !== undefined && iInitDisplayStart !== -1 )","\t\t{","\t\t\toSettings._iDisplayStart = bServerSide ?","\t\t\t\tiInitDisplayStart :","\t\t\t\tiInitDisplayStart >= oSettings.fnRecordsDisplay() ?","\t\t\t\t\t0 :","\t\t\t\t\tiInitDisplayStart;","\t","\t\t\toSettings.iInitDisplayStart = -1;","\t\t}","\t","\t\tvar iDisplayStart = oSettings._iDisplayStart;","\t\tvar iDisplayEnd = oSettings.fnDisplayEnd();","\t","\t\t/* Server-side processing draw intercept */","\t\tif ( oSettings.bDeferLoading )","\t\t{","\t\t\toSettings.bDeferLoading = false;","\t\t\toSettings.iDraw++;","\t\t\t_fnProcessingDisplay( oSettings, false );","\t\t}","\t\telse if ( !bServerSide )","\t\t{","\t\t\toSettings.iDraw++;","\t\t}","\t\telse if ( !oSettings.bDestroying && !_fnAjaxUpdate( oSettings ) )","\t\t{","\t\t\treturn;","\t\t}","\t","\t\tif ( aiDisplay.length !== 0 )","\t\t{","\t\t\tvar iStart = bServerSide ? 0 : iDisplayStart;","\t\t\tvar iEnd = bServerSide ? oSettings.aoData.length : iDisplayEnd;","\t","\t\t\tfor ( var j=iStart ; j<iEnd ; j++ )","\t\t\t{","\t\t\t\tvar iDataIndex = aiDisplay[j];","\t\t\t\tvar aoData = oSettings.aoData[ iDataIndex ];","\t\t\t\tif ( aoData.nTr === null )","\t\t\t\t{","\t\t\t\t\t_fnCreateTr( oSettings, iDataIndex );","\t\t\t\t}","\t","\t\t\t\tvar nRow = aoData.nTr;","\t","\t\t\t\t/* Remove the old striping classes and then add the new one */","\t\t\t\tif ( iStripes !== 0 )","\t\t\t\t{","\t\t\t\t\tvar sStripe = asStripeClasses[ iRowCount % iStripes ];","\t\t\t\t\tif ( aoData._sRowStripe != sStripe )","\t\t\t\t\t{","\t\t\t\t\t\t$(nRow).removeClass( aoData._sRowStripe ).addClass( sStripe );","\t\t\t\t\t\taoData._sRowStripe = sStripe;","\t\t\t\t\t}","\t\t\t\t}","\t","\t\t\t\t// Row callback functions - might want to manipulate the row","\t\t\t\t// iRowCount and j are not currently documented. Are they at all","\t\t\t\t// useful?","\t\t\t\t_fnCallbackFire( oSettings, 'aoRowCallback', null,","\t\t\t\t\t[nRow, aoData._aData, iRowCount, j] );","\t","\t\t\t\tanRows.push( nRow );","\t\t\t\tiRowCount++;","\t\t\t}","\t\t}","\t\telse","\t\t{","\t\t\t/* Table is empty - create a row with an empty message in it */","\t\t\tvar sZero = oLang.sZeroRecords;","\t\t\tif ( oSettings.iDraw == 1 &&  _fnDataSource( oSettings ) == 'ajax' )","\t\t\t{","\t\t\t\tsZero = oLang.sLoadingRecords;","\t\t\t}","\t\t\telse if ( oLang.sEmptyTable && oSettings.fnRecordsTotal() === 0 )","\t\t\t{","\t\t\t\tsZero = oLang.sEmptyTable;","\t\t\t}","\t","\t\t\tanRows[ 0 ] = $( '<tr/>', { 'class': iStripes ? asStripeClasses[0] : '' } )","\t\t\t\t.append( $('<td />', {","\t\t\t\t\t'valign':  'top',","\t\t\t\t\t'colSpan': _fnVisbleColumns( oSettings ),","\t\t\t\t\t'class':   oSettings.oClasses.sRowEmpty","\t\t\t\t} ).html( sZero ) )[0];","\t\t}","\t","\t\t/* Header and footer callbacks */","\t\t_fnCallbackFire( oSettings, 'aoHeaderCallback', 'header', [ $(oSettings.nTHead).children('tr')[0],","\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );","\t","\t\t_fnCallbackFire( oSettings, 'aoFooterCallback', 'footer', [ $(oSettings.nTFoot).children('tr')[0],","\t\t\t_fnGetDataMaster( oSettings ), iDisplayStart, iDisplayEnd, aiDisplay ] );","\t","\t\tvar body = $(oSettings.nTBody);","\t","\t\tbody.children().detach();","\t\tbody.append( $(anRows) );","\t","\t\t/* Call all required callback functions for the end of a draw */","\t\t_fnCallbackFire( oSettings, 'aoDrawCallback', 'draw', [oSettings] );","\t","\t\t/* Draw is complete, sorting and filtering must be as well */","\t\toSettings.bSorted = false;","\t\toSettings.bFiltered = false;","\t\toSettings.bDrawing = false;","\t}","\t","\t","\t/**","\t * Redraw the table - taking account of the various features which are enabled","\t *  @param {object} oSettings dataTables settings object","\t *  @param {boolean} [holdPosition] Keep the current paging position. By default","\t *    the paging is reset to the first page","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnReDraw( settings, holdPosition )","\t{","\t\tvar","\t\t\tfeatures = settings.oFeatures,","\t\t\tsort     = features.bSort,","\t\t\tfilter   = features.bFilter;","\t","\t\tif ( sort ) {","\t\t\t_fnSort( settings );","\t\t}","\t","\t\tif ( filter ) {","\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch );","\t\t}","\t\telse {","\t\t\t// No filtering, so we want to just use the display master","\t\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();","\t\t}","\t","\t\tif ( holdPosition !== true ) {","\t\t\tsettings._iDisplayStart = 0;","\t\t}","\t","\t\t// Let any modules know about the draw hold position state (used by","\t\t// scrolling internally)","\t\tsettings._drawHold = holdPosition;","\t","\t\t_fnDraw( settings );","\t","\t\tsettings._drawHold = false;","\t}","\t","\t","\t/**","\t * Add the options to the page HTML for the table","\t *  @param {object} oSettings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnAddOptionsHtml ( oSettings )","\t{","\t\tvar classes = oSettings.oClasses;","\t\tvar table = $(oSettings.nTable);","\t\tvar holding = $('<div/>').insertBefore( table ); // Holding element for speed","\t\tvar features = oSettings.oFeatures;","\t","\t\t// All DataTables are wrapped in a div","\t\tvar insert = $('<div/>', {","\t\t\tid:      oSettings.sTableId+'_wrapper',","\t\t\t'class': classes.sWrapper + (oSettings.nTFoot ? '' : ' '+classes.sNoFooter)","\t\t} );","\t","\t\toSettings.nHolding = holding[0];","\t\toSettings.nTableWrapper = insert[0];","\t\toSettings.nTableReinsertBefore = oSettings.nTable.nextSibling;","\t","\t\t/* Loop over the user set positioning and place the elements as needed */","\t\tvar aDom = oSettings.sDom.split('');","\t\tvar featureNode, cOption, nNewNode, cNext, sAttr, j;","\t\tfor ( var i=0 ; i<aDom.length ; i++ )","\t\t{","\t\t\tfeatureNode = null;","\t\t\tcOption = aDom[i];","\t","\t\t\tif ( cOption == '<' )","\t\t\t{","\t\t\t\t/* New container div */","\t\t\t\tnNewNode = $('<div/>')[0];","\t","\t\t\t\t/* Check to see if we should append an id and/or a class name to the container */","\t\t\t\tcNext = aDom[i+1];","\t\t\t\tif ( cNext == \"'\" || cNext == '\"' )","\t\t\t\t{","\t\t\t\t\tsAttr = \"\";","\t\t\t\t\tj = 2;","\t\t\t\t\twhile ( aDom[i+j] != cNext )","\t\t\t\t\t{","\t\t\t\t\t\tsAttr += aDom[i+j];","\t\t\t\t\t\tj++;","\t\t\t\t\t}","\t","\t\t\t\t\t/* Replace jQuery UI constants @todo depreciated */","\t\t\t\t\tif ( sAttr == \"H\" )","\t\t\t\t\t{","\t\t\t\t\t\tsAttr = classes.sJUIHeader;","\t\t\t\t\t}","\t\t\t\t\telse if ( sAttr == \"F\" )","\t\t\t\t\t{","\t\t\t\t\t\tsAttr = classes.sJUIFooter;","\t\t\t\t\t}","\t","\t\t\t\t\t/* The attribute can be in the format of \"#id.class\", \"#id\" or \"class\" This logic","\t\t\t\t\t * breaks the string into parts and applies them as needed","\t\t\t\t\t */","\t\t\t\t\tif ( sAttr.indexOf('.') != -1 )","\t\t\t\t\t{","\t\t\t\t\t\tvar aSplit = sAttr.split('.');","\t\t\t\t\t\tnNewNode.id = aSplit[0].substr(1, aSplit[0].length-1);","\t\t\t\t\t\tnNewNode.className = aSplit[1];","\t\t\t\t\t}","\t\t\t\t\telse if ( sAttr.charAt(0) == \"#\" )","\t\t\t\t\t{","\t\t\t\t\t\tnNewNode.id = sAttr.substr(1, sAttr.length-1);","\t\t\t\t\t}","\t\t\t\t\telse","\t\t\t\t\t{","\t\t\t\t\t\tnNewNode.className = sAttr;","\t\t\t\t\t}","\t","\t\t\t\t\ti += j; /* Move along the position array */","\t\t\t\t}","\t","\t\t\t\tinsert.append( nNewNode );","\t\t\t\tinsert = $(nNewNode);","\t\t\t}","\t\t\telse if ( cOption == '>' )","\t\t\t{","\t\t\t\t/* End container div */","\t\t\t\tinsert = insert.parent();","\t\t\t}","\t\t\t// @todo Move options into their own plugins?","\t\t\telse if ( cOption == 'l' && features.bPaginate && features.bLengthChange )","\t\t\t{","\t\t\t\t/* Length */","\t\t\t\tfeatureNode = _fnFeatureHtmlLength( oSettings );","\t\t\t}","\t\t\telse if ( cOption == 'f' && features.bFilter )","\t\t\t{","\t\t\t\t/* Filter */","\t\t\t\tfeatureNode = _fnFeatureHtmlFilter( oSettings );","\t\t\t}","\t\t\telse if ( cOption == 'r' && features.bProcessing )","\t\t\t{","\t\t\t\t/* pRocessing */","\t\t\t\tfeatureNode = _fnFeatureHtmlProcessing( oSettings );","\t\t\t}","\t\t\telse if ( cOption == 't' )","\t\t\t{","\t\t\t\t/* Table */","\t\t\t\tfeatureNode = _fnFeatureHtmlTable( oSettings );","\t\t\t}","\t\t\telse if ( cOption ==  'i' && features.bInfo )","\t\t\t{","\t\t\t\t/* Info */","\t\t\t\tfeatureNode = _fnFeatureHtmlInfo( oSettings );","\t\t\t}","\t\t\telse if ( cOption == 'p' && features.bPaginate )","\t\t\t{","\t\t\t\t/* Pagination */","\t\t\t\tfeatureNode = _fnFeatureHtmlPaginate( oSettings );","\t\t\t}","\t\t\telse if ( DataTable.ext.feature.length !== 0 )","\t\t\t{","\t\t\t\t/* Plug-in features */","\t\t\t\tvar aoFeatures = DataTable.ext.feature;","\t\t\t\tfor ( var k=0, kLen=aoFeatures.length ; k<kLen ; k++ )","\t\t\t\t{","\t\t\t\t\tif ( cOption == aoFeatures[k].cFeature )","\t\t\t\t\t{","\t\t\t\t\t\tfeatureNode = aoFeatures[k].fnInit( oSettings );","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t","\t\t\t/* Add to the 2D features array */","\t\t\tif ( featureNode )","\t\t\t{","\t\t\t\tvar aanFeatures = oSettings.aanFeatures;","\t","\t\t\t\tif ( ! aanFeatures[cOption] )","\t\t\t\t{","\t\t\t\t\taanFeatures[cOption] = [];","\t\t\t\t}","\t","\t\t\t\taanFeatures[cOption].push( featureNode );","\t\t\t\tinsert.append( featureNode );","\t\t\t}","\t\t}","\t","\t\t/* Built our DOM structure - replace the holding div with what we want */","\t\tholding.replaceWith( insert );","\t}","\t","\t","\t/**","\t * Use the DOM source to create up an array of header cells. The idea here is to","\t * create a layout grid (array) of rows x columns, which contains a reference","\t * to the cell that that point in the grid (regardless of col/rowspan), such that","\t * any column / row could be removed and the new grid constructed","\t *  @param array {object} aLayout Array to store the calculated layout in","\t *  @param {node} nThead The header/footer element for the table","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnDetectHeader ( aLayout, nThead )","\t{","\t\tvar nTrs = $(nThead).children('tr');","\t\tvar nTr, nCell;","\t\tvar i, k, l, iLen, jLen, iColShifted, iColumn, iColspan, iRowspan;","\t\tvar bUnique;","\t\tvar fnShiftCol = function ( a, i, j ) {","\t\t\tvar k = a[i];","\t                while ( k[j] ) {","\t\t\t\tj++;","\t\t\t}","\t\t\treturn j;","\t\t};","\t","\t\taLayout.splice( 0, aLayout.length );","\t","\t\t/* We know how many rows there are in the layout - so prep it */","\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )","\t\t{","\t\t\taLayout.push( [] );","\t\t}","\t","\t\t/* Calculate a layout array */","\t\tfor ( i=0, iLen=nTrs.length ; i<iLen ; i++ )","\t\t{","\t\t\tnTr = nTrs[i];","\t\t\tiColumn = 0;","\t","\t\t\t/* For every cell in the row... */","\t\t\tnCell = nTr.firstChild;","\t\t\twhile ( nCell ) {","\t\t\t\tif ( nCell.nodeName.toUpperCase() == \"TD\" ||","\t\t\t\t     nCell.nodeName.toUpperCase() == \"TH\" )","\t\t\t\t{","\t\t\t\t\t/* Get the col and rowspan attributes from the DOM and sanitise them */","\t\t\t\t\tiColspan = nCell.getAttribute('colspan') * 1;","\t\t\t\t\tiRowspan = nCell.getAttribute('rowspan') * 1;","\t\t\t\t\tiColspan = (!iColspan || iColspan===0 || iColspan===1) ? 1 : iColspan;","\t\t\t\t\tiRowspan = (!iRowspan || iRowspan===0 || iRowspan===1) ? 1 : iRowspan;","\t","\t\t\t\t\t/* There might be colspan cells already in this row, so shift our target","\t\t\t\t\t * accordingly","\t\t\t\t\t */","\t\t\t\t\tiColShifted = fnShiftCol( aLayout, i, iColumn );","\t","\t\t\t\t\t/* Cache calculation for unique columns */","\t\t\t\t\tbUnique = iColspan === 1 ? true : false;","\t","\t\t\t\t\t/* If there is col / rowspan, copy the information into the layout grid */","\t\t\t\t\tfor ( l=0 ; l<iColspan ; l++ )","\t\t\t\t\t{","\t\t\t\t\t\tfor ( k=0 ; k<iRowspan ; k++ )","\t\t\t\t\t\t{","\t\t\t\t\t\t\taLayout[i+k][iColShifted+l] = {","\t\t\t\t\t\t\t\t\"cell\": nCell,","\t\t\t\t\t\t\t\t\"unique\": bUnique","\t\t\t\t\t\t\t};","\t\t\t\t\t\t\taLayout[i+k].nTr = nTr;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tnCell = nCell.nextSibling;","\t\t\t}","\t\t}","\t}","\t","\t","\t/**","\t * Get an array of unique th elements, one for each column","\t *  @param {object} oSettings dataTables settings object","\t *  @param {node} nHeader automatically detect the layout from this node - optional","\t *  @param {array} aLayout thead/tfoot layout from _fnDetectHeader - optional","\t *  @returns array {node} aReturn list of unique th's","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnGetUniqueThs ( oSettings, nHeader, aLayout )","\t{","\t\tvar aReturn = [];","\t\tif ( !aLayout )","\t\t{","\t\t\taLayout = oSettings.aoHeader;","\t\t\tif ( nHeader )","\t\t\t{","\t\t\t\taLayout = [];","\t\t\t\t_fnDetectHeader( aLayout, nHeader );","\t\t\t}","\t\t}","\t","\t\tfor ( var i=0, iLen=aLayout.length ; i<iLen ; i++ )","\t\t{","\t\t\tfor ( var j=0, jLen=aLayout[i].length ; j<jLen ; j++ )","\t\t\t{","\t\t\t\tif ( aLayout[i][j].unique &&","\t\t\t\t\t (!aReturn[j] || !oSettings.bSortCellsTop) )","\t\t\t\t{","\t\t\t\t\taReturn[j] = aLayout[i][j].cell;","\t\t\t\t}","\t\t\t}","\t\t}","\t","\t\treturn aReturn;","\t}","\t","\t/**","\t * Create an Ajax call based on the table's settings, taking into account that","\t * parameters can have multiple forms, and backwards compatibility.","\t *","\t * @param {object} oSettings dataTables settings object","\t * @param {array} data Data to send to the server, required by","\t *     DataTables - may be augmented by developer callbacks","\t * @param {function} fn Callback function to run when data is obtained","\t */","\tfunction _fnBuildAjax( oSettings, data, fn )","\t{","\t\t// Compatibility with 1.9-, allow fnServerData and event to manipulate","\t\t_fnCallbackFire( oSettings, 'aoServerParams', 'serverParams', [data] );","\t","\t\t// Convert to object based for 1.10+ if using the old array scheme which can","\t\t// come from server-side processing or serverParams","\t\tif ( data && $.isArray(data) ) {","\t\t\tvar tmp = {};","\t\t\tvar rbracket = /(.*?)\\[\\]$/;","\t","\t\t\t$.each( data, function (key, val) {","\t\t\t\tvar match = val.name.match(rbracket);","\t","\t\t\t\tif ( match ) {","\t\t\t\t\t// Support for arrays","\t\t\t\t\tvar name = match[0];","\t","\t\t\t\t\tif ( ! tmp[ name ] ) {","\t\t\t\t\t\ttmp[ name ] = [];","\t\t\t\t\t}","\t\t\t\t\ttmp[ name ].push( val.value );","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\ttmp[val.name] = val.value;","\t\t\t\t}","\t\t\t} );","\t\t\tdata = tmp;","\t\t}","\t","\t\tvar ajaxData;","\t\tvar ajax = oSettings.ajax;","\t\tvar instance = oSettings.oInstance;","\t\tvar callback = function ( json ) {","\t\t\t_fnCallbackFire( oSettings, null, 'xhr', [oSettings, json] );","\t\t\tfn( json );","\t\t};","\t","\t\tif ( $.isPlainObject( ajax ) && ajax.data )","\t\t{","\t\t\tajaxData = ajax.data;","\t","\t\t\tvar newData = $.isFunction( ajaxData ) ?","\t\t\t\tajaxData( data, oSettings ) :  // fn can manipulate data or return","\t\t\t\tajaxData;                      // an object object or array to merge","\t","\t\t\t// If the function returned something, use that alone","\t\t\tdata = $.isFunction( ajaxData ) && newData ?","\t\t\t\tnewData :","\t\t\t\t$.extend( true, data, newData );","\t","\t\t\t// Remove the data property as we've resolved it already and don't want","\t\t\t// jQuery to do it again (it is restored at the end of the function)","\t\t\tdelete ajax.data;","\t\t}","\t","\t\tvar baseAjax = {","\t\t\t\"data\": data,","\t\t\t\"success\": function (json) {","\t\t\t\tvar error = json.error || json.sError;","\t\t\t\tif ( error ) {","\t\t\t\t\toSettings.oApi._fnLog( oSettings, 0, error );","\t\t\t\t}","\t","\t\t\t\toSettings.json = json;","\t\t\t\tcallback( json );","\t\t\t},","\t\t\t\"dataType\": \"json\",","\t\t\t\"cache\": false,","\t\t\t\"type\": oSettings.sServerMethod,","\t\t\t\"error\": function (xhr, error, thrown) {","\t\t\t\tvar log = oSettings.oApi._fnLog;","\t","\t\t\t\tif ( error == \"parsererror\" ) {","\t\t\t\t\tlog( oSettings, 0, 'Invalid JSON response', 1 );","\t\t\t\t}","\t\t\t\telse if ( xhr.readyState === 4 ) {","\t\t\t\t\tlog( oSettings, 0, 'Ajax error', 7 );","\t\t\t\t}","\t","\t\t\t\t_fnProcessingDisplay( oSettings, false );","\t\t\t}","\t\t};","\t","\t\t// Store the data submitted for the API","\t\toSettings.oAjaxData = data;","\t","\t\t// Allow plug-ins and external processes to modify the data","\t\t_fnCallbackFire( oSettings, null, 'preXhr', [oSettings, data] );","\t","\t\tif ( oSettings.fnServerData )","\t\t{","\t\t\t// DataTables 1.9- compatibility","\t\t\toSettings.fnServerData.call( instance,","\t\t\t\toSettings.sAjaxSource,","\t\t\t\t$.map( data, function (val, key) { // Need to convert back to 1.9 trad format","\t\t\t\t\treturn { name: key, value: val };","\t\t\t\t} ),","\t\t\t\tcallback,","\t\t\t\toSettings","\t\t\t);","\t\t}","\t\telse if ( oSettings.sAjaxSource || typeof ajax === 'string' )","\t\t{","\t\t\t// DataTables 1.9- compatibility","\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, {","\t\t\t\turl: ajax || oSettings.sAjaxSource","\t\t\t} ) );","\t\t}","\t\telse if ( $.isFunction( ajax ) )","\t\t{","\t\t\t// Is a function - let the caller define what needs to be done","\t\t\toSettings.jqXHR = ajax.call( instance, data, callback, oSettings );","\t\t}","\t\telse","\t\t{","\t\t\t// Object to extend the base settings","\t\t\toSettings.jqXHR = $.ajax( $.extend( baseAjax, ajax ) );","\t","\t\t\t// Restore for next time around","\t\t\tajax.data = ajaxData;","\t\t}","\t}","\t","\t","\t/**","\t * Update the table using an Ajax call","\t *  @param {object} settings dataTables settings object","\t *  @returns {boolean} Block the table drawing or not","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnAjaxUpdate( settings )","\t{","\t\tif ( settings.bAjaxDataGet ) {","\t\t\tsettings.iDraw++;","\t\t\t_fnProcessingDisplay( settings, true );","\t","\t\t\t_fnBuildAjax(","\t\t\t\tsettings,","\t\t\t\t_fnAjaxParameters( settings ),","\t\t\t\tfunction(json) {","\t\t\t\t\t_fnAjaxUpdateDraw( settings, json );","\t\t\t\t}","\t\t\t);","\t","\t\t\treturn false;","\t\t}","\t\treturn true;","\t}","\t","\t","\t/**","\t * Build up the parameters in an object needed for a server-side processing","\t * request. Note that this is basically done twice, is different ways - a modern","\t * method which is used by default in DataTables 1.10 which uses objects and","\t * arrays, or the 1.9- method with is name / value pairs. 1.9 method is used if","\t * the sAjaxSource option is used in the initialisation, or the legacyAjax","\t * option is set.","\t *  @param {object} oSettings dataTables settings object","\t *  @returns {bool} block the table drawing or not","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnAjaxParameters( settings )","\t{","\t\tvar","\t\t\tcolumns = settings.aoColumns,","\t\t\tcolumnCount = columns.length,","\t\t\tfeatures = settings.oFeatures,","\t\t\tpreSearch = settings.oPreviousSearch,","\t\t\tpreColSearch = settings.aoPreSearchCols,","\t\t\ti, data = [], dataProp, column, columnSearch,","\t\t\tsort = _fnSortFlatten( settings ),","\t\t\tdisplayStart = settings._iDisplayStart,","\t\t\tdisplayLength = features.bPaginate !== false ?","\t\t\t\tsettings._iDisplayLength :","\t\t\t\t-1;","\t","\t\tvar param = function ( name, value ) {","\t\t\tdata.push( { 'name': name, 'value': value } );","\t\t};","\t","\t\t// DataTables 1.9- compatible method","\t\tparam( 'sEcho',          settings.iDraw );","\t\tparam( 'iColumns',       columnCount );","\t\tparam( 'sColumns',       _pluck( columns, 'sName' ).join(',') );","\t\tparam( 'iDisplayStart',  displayStart );","\t\tparam( 'iDisplayLength', displayLength );","\t","\t\t// DataTables 1.10+ method","\t\tvar d = {","\t\t\tdraw:    settings.iDraw,","\t\t\tcolumns: [],","\t\t\torder:   [],","\t\t\tstart:   displayStart,","\t\t\tlength:  displayLength,","\t\t\tsearch:  {","\t\t\t\tvalue: preSearch.sSearch,","\t\t\t\tregex: preSearch.bRegex","\t\t\t}","\t\t};","\t","\t\tfor ( i=0 ; i<columnCount ; i++ ) {","\t\t\tcolumn = columns[i];","\t\t\tcolumnSearch = preColSearch[i];","\t\t\tdataProp = typeof column.mData==\"function\" ? 'function' : column.mData ;","\t","\t\t\td.columns.push( {","\t\t\t\tdata:       dataProp,","\t\t\t\tname:       column.sName,","\t\t\t\tsearchable: column.bSearchable,","\t\t\t\torderable:  column.bSortable,","\t\t\t\tsearch:     {","\t\t\t\t\tvalue: columnSearch.sSearch,","\t\t\t\t\tregex: columnSearch.bRegex","\t\t\t\t}","\t\t\t} );","\t","\t\t\tparam( \"mDataProp_\"+i, dataProp );","\t","\t\t\tif ( features.bFilter ) {","\t\t\t\tparam( 'sSearch_'+i,     columnSearch.sSearch );","\t\t\t\tparam( 'bRegex_'+i,      columnSearch.bRegex );","\t\t\t\tparam( 'bSearchable_'+i, column.bSearchable );","\t\t\t}","\t","\t\t\tif ( features.bSort ) {","\t\t\t\tparam( 'bSortable_'+i, column.bSortable );","\t\t\t}","\t\t}","\t","\t\tif ( features.bFilter ) {","\t\t\tparam( 'sSearch', preSearch.sSearch );","\t\t\tparam( 'bRegex', preSearch.bRegex );","\t\t}","\t","\t\tif ( features.bSort ) {","\t\t\t$.each( sort, function ( i, val ) {","\t\t\t\td.order.push( { column: val.col, dir: val.dir } );","\t","\t\t\t\tparam( 'iSortCol_'+i, val.col );","\t\t\t\tparam( 'sSortDir_'+i, val.dir );","\t\t\t} );","\t","\t\t\tparam( 'iSortingCols', sort.length );","\t\t}","\t","\t\t// If the legacy.ajax parameter is null, then we automatically decide which","\t\t// form to use, based on sAjaxSource","\t\tvar legacy = DataTable.ext.legacy.ajax;","\t\tif ( legacy === null ) {","\t\t\treturn settings.sAjaxSource ? data : d;","\t\t}","\t","\t\t// Otherwise, if legacy has been specified then we use that to decide on the","\t\t// form","\t\treturn legacy ? data : d;","\t}","\t","\t","\t/**","\t * Data the data from the server (nuking the old) and redraw the table","\t *  @param {object} oSettings dataTables settings object","\t *  @param {object} json json data return from the server.","\t *  @param {string} json.sEcho Tracking flag for DataTables to match requests","\t *  @param {int} json.iTotalRecords Number of records in the data set, not accounting for filtering","\t *  @param {int} json.iTotalDisplayRecords Number of records in the data set, accounting for filtering","\t *  @param {array} json.aaData The data to display on this page","\t *  @param {string} [json.sColumns] Column ordering (sName, comma separated)","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnAjaxUpdateDraw ( settings, json )","\t{","\t\t// v1.10 uses camelCase variables, while 1.9 uses Hungarian notation.","\t\t// Support both","\t\tvar compat = function ( old, modern ) {","\t\t\treturn json[old] !== undefined ? json[old] : json[modern];","\t\t};","\t","\t\tvar data = _fnAjaxDataSrc( settings, json );","\t\tvar draw            = compat( 'sEcho',                'draw' );","\t\tvar recordsTotal    = compat( 'iTotalRecords',        'recordsTotal' );","\t\tvar recordsFiltered = compat( 'iTotalDisplayRecords', 'recordsFiltered' );","\t","\t\tif ( draw ) {","\t\t\t// Protect against out of sequence returns","\t\t\tif ( draw*1 < settings.iDraw ) {","\t\t\t\treturn;","\t\t\t}","\t\t\tsettings.iDraw = draw * 1;","\t\t}","\t","\t\t_fnClearTable( settings );","\t\tsettings._iRecordsTotal   = parseInt(recordsTotal, 10);","\t\tsettings._iRecordsDisplay = parseInt(recordsFiltered, 10);","\t","\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {","\t\t\t_fnAddData( settings, data[i] );","\t\t}","\t\tsettings.aiDisplay = settings.aiDisplayMaster.slice();","\t","\t\tsettings.bAjaxDataGet = false;","\t\t_fnDraw( settings );","\t","\t\tif ( ! settings._bInitComplete ) {","\t\t\t_fnInitComplete( settings, json );","\t\t}","\t","\t\tsettings.bAjaxDataGet = true;","\t\t_fnProcessingDisplay( settings, false );","\t}","\t","\t","\t/**","\t * Get the data from the JSON data source to use for drawing a table. Using","\t * `_fnGetObjectDataFn` allows the data to be sourced from a property of the","\t * source object, or from a processing function.","\t *  @param {object} oSettings dataTables settings object","\t *  @param  {object} json Data source object / array from the server","\t *  @return {array} Array of data to use","\t */","\tfunction _fnAjaxDataSrc ( oSettings, json )","\t{","\t\tvar dataSrc = $.isPlainObject( oSettings.ajax ) && oSettings.ajax.dataSrc !== undefined ?","\t\t\toSettings.ajax.dataSrc :","\t\t\toSettings.sAjaxDataProp; // Compatibility with 1.9-.","\t","\t\t// Compatibility with 1.9-. In order to read from aaData, check if the","\t\t// default has been changed, if not, check for aaData","\t\tif ( dataSrc === 'data' ) {","\t\t\treturn json.aaData || json[dataSrc];","\t\t}","\t","\t\treturn dataSrc !== \"\" ?","\t\t\t_fnGetObjectDataFn( dataSrc )( json ) :","\t\t\tjson;","\t}","\t","\t/**","\t * Generate the node required for filtering text","\t *  @returns {node} Filter control element","\t *  @param {object} oSettings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnFeatureHtmlFilter ( settings )","\t{","\t\tvar classes = settings.oClasses;","\t\tvar tableId = settings.sTableId;","\t\tvar language = settings.oLanguage;","\t\tvar previousSearch = settings.oPreviousSearch;","\t\tvar features = settings.aanFeatures;","\t\tvar input = '<input type=\"search\" class=\"'+classes.sFilterInput+'\"/>';","\t","\t\tvar str = language.sSearch;","\t\tstr = str.match(/_INPUT_/) ?","\t\t\tstr.replace('_INPUT_', input) :","\t\t\tstr+input;","\t","\t\tvar filter = $('<div/>', {","\t\t\t\t'id': ! features.f ? tableId+'_filter' : null,","\t\t\t\t'class': classes.sFilter","\t\t\t} )","\t\t\t.append( $('<label/>' ).append( str ) );","\t","\t\tvar searchFn = function() {","\t\t\t/* Update all other filter input elements for the new display */","\t\t\tvar n = features.f;","\t\t\tvar val = !this.value ? \"\" : this.value; // mental IE8 fix :-(","\t","\t\t\t/* Now do the filter */","\t\t\tif ( val != previousSearch.sSearch ) {","\t\t\t\t_fnFilterComplete( settings, {","\t\t\t\t\t\"sSearch\": val,","\t\t\t\t\t\"bRegex\": previousSearch.bRegex,","\t\t\t\t\t\"bSmart\": previousSearch.bSmart ,","\t\t\t\t\t\"bCaseInsensitive\": previousSearch.bCaseInsensitive","\t\t\t\t} );","\t","\t\t\t\t// Need to redraw, without resorting","\t\t\t\tsettings._iDisplayStart = 0;","\t\t\t\t_fnDraw( settings );","\t\t\t}","\t\t};","\t","\t\tvar searchDelay = settings.searchDelay !== null ?","\t\t\tsettings.searchDelay :","\t\t\t_fnDataSource( settings ) === 'ssp' ?","\t\t\t\t400 :","\t\t\t\t0;","\t","\t\tvar jqFilter = $('input', filter)","\t\t\t.val( previousSearch.sSearch )","\t\t\t.attr( 'placeholder', language.sSearchPlaceholder )","\t\t\t.bind(","\t\t\t\t'keyup.DT search.DT input.DT paste.DT cut.DT',","\t\t\t\tsearchDelay ?","\t\t\t\t\t_fnThrottle( searchFn, searchDelay ) :","\t\t\t\t\tsearchFn","\t\t\t)","\t\t\t.bind( 'keypress.DT', function(e) {","\t\t\t\t/* Prevent form submission */","\t\t\t\tif ( e.keyCode == 13 ) {","\t\t\t\t\treturn false;","\t\t\t\t}","\t\t\t} )","\t\t\t.attr('aria-controls', tableId);","\t","\t\t// Update the input elements whenever the table is filtered","\t\t$(settings.nTable).on( 'search.dt.DT', function ( ev, s ) {","\t\t\tif ( settings === s ) {","\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used","\t\t\t\t// inside an iframe or frame...","\t\t\t\ttry {","\t\t\t\t\tif ( jqFilter[0] !== document.activeElement ) {","\t\t\t\t\t\tjqFilter.val( previousSearch.sSearch );","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\tcatch ( e ) {}","\t\t\t}","\t\t} );","\t","\t\treturn filter[0];","\t}","\t","\t","\t/**","\t * Filter the table using both the global filter and column based filtering","\t *  @param {object} oSettings dataTables settings object","\t *  @param {object} oSearch search information","\t *  @param {int} [iForce] force a research of the master array (1) or not (undefined or 0)","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnFilterComplete ( oSettings, oInput, iForce )","\t{","\t\tvar oPrevSearch = oSettings.oPreviousSearch;","\t\tvar aoPrevSearch = oSettings.aoPreSearchCols;","\t\tvar fnSaveFilter = function ( oFilter ) {","\t\t\t/* Save the filtering values */","\t\t\toPrevSearch.sSearch = oFilter.sSearch;","\t\t\toPrevSearch.bRegex = oFilter.bRegex;","\t\t\toPrevSearch.bSmart = oFilter.bSmart;","\t\t\toPrevSearch.bCaseInsensitive = oFilter.bCaseInsensitive;","\t\t};","\t\tvar fnRegex = function ( o ) {","\t\t\t// Backwards compatibility with the bEscapeRegex option","\t\t\treturn o.bEscapeRegex !== undefined ? !o.bEscapeRegex : o.bRegex;","\t\t};","\t","\t\t// Resolve any column types that are unknown due to addition or invalidation","\t\t// @todo As per sort - can this be moved into an event handler?","\t\t_fnColumnTypes( oSettings );","\t","\t\t/* In server-side processing all filtering is done by the server, so no point hanging around here */","\t\tif ( _fnDataSource( oSettings ) != 'ssp' )","\t\t{","\t\t\t/* Global filter */","\t\t\t_fnFilter( oSettings, oInput.sSearch, iForce, fnRegex(oInput), oInput.bSmart, oInput.bCaseInsensitive );","\t\t\tfnSaveFilter( oInput );","\t","\t\t\t/* Now do the individual column filter */","\t\t\tfor ( var i=0 ; i<aoPrevSearch.length ; i++ )","\t\t\t{","\t\t\t\t_fnFilterColumn( oSettings, aoPrevSearch[i].sSearch, i, fnRegex(aoPrevSearch[i]),","\t\t\t\t\taoPrevSearch[i].bSmart, aoPrevSearch[i].bCaseInsensitive );","\t\t\t}","\t","\t\t\t/* Custom filtering */","\t\t\t_fnFilterCustom( oSettings );","\t\t}","\t\telse","\t\t{","\t\t\tfnSaveFilter( oInput );","\t\t}","\t","\t\t/* Tell the draw function we have been filtering */","\t\toSettings.bFiltered = true;","\t\t_fnCallbackFire( oSettings, null, 'search', [oSettings] );","\t}","\t","\t","\t/**","\t * Apply custom filtering functions","\t *  @param {object} oSettings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnFilterCustom( settings )","\t{","\t\tvar filters = DataTable.ext.search;","\t\tvar displayRows = settings.aiDisplay;","\t\tvar row, rowIdx;","\t","\t\tfor ( var i=0, ien=filters.length ; i<ien ; i++ ) {","\t\t\tvar rows = [];","\t","\t\t\t// Loop over each row and see if it should be included","\t\t\tfor ( var j=0, jen=displayRows.length ; j<jen ; j++ ) {","\t\t\t\trowIdx = displayRows[ j ];","\t\t\t\trow = settings.aoData[ rowIdx ];","\t","\t\t\t\tif ( filters[i]( settings, row._aFilterData, rowIdx, row._aData, j ) ) {","\t\t\t\t\trows.push( rowIdx );","\t\t\t\t}","\t\t\t}","\t","\t\t\t// So the array reference doesn't break set the results into the","\t\t\t// existing array","\t\t\tdisplayRows.length = 0;","\t\t\tdisplayRows.push.apply( displayRows, rows );","\t\t}","\t}","\t","\t","\t/**","\t * Filter the table on a per-column basis","\t *  @param {object} oSettings dataTables settings object","\t *  @param {string} sInput string to filter on","\t *  @param {int} iColumn column to filter","\t *  @param {bool} bRegex treat search string as a regular expression or not","\t *  @param {bool} bSmart use smart filtering or not","\t *  @param {bool} bCaseInsensitive Do case insenstive matching or not","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnFilterColumn ( settings, searchStr, colIdx, regex, smart, caseInsensitive )","\t{","\t\tif ( searchStr === '' ) {","\t\t\treturn;","\t\t}","\t","\t\tvar data;","\t\tvar display = settings.aiDisplay;","\t\tvar rpSearch = _fnFilterCreateSearch( searchStr, regex, smart, caseInsensitive );","\t","\t\tfor ( var i=display.length-1 ; i>=0 ; i-- ) {","\t\t\tdata = settings.aoData[ display[i] ]._aFilterData[ colIdx ];","\t","\t\t\tif ( ! rpSearch.test( data ) ) {","\t\t\t\tdisplay.splice( i, 1 );","\t\t\t}","\t\t}","\t}","\t","\t","\t/**","\t * Filter the data table based on user input and draw the table","\t *  @param {object} settings dataTables settings object","\t *  @param {string} input string to filter on","\t *  @param {int} force optional - force a research of the master array (1) or not (undefined or 0)","\t *  @param {bool} regex treat as a regular expression or not","\t *  @param {bool} smart perform smart filtering or not","\t *  @param {bool} caseInsensitive Do case insenstive matching or not","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnFilter( settings, input, force, regex, smart, caseInsensitive )","\t{","\t\tvar rpSearch = _fnFilterCreateSearch( input, regex, smart, caseInsensitive );","\t\tvar prevSearch = settings.oPreviousSearch.sSearch;","\t\tvar displayMaster = settings.aiDisplayMaster;","\t\tvar display, invalidated, i;","\t","\t\t// Need to take account of custom filtering functions - always filter","\t\tif ( DataTable.ext.search.length !== 0 ) {","\t\t\tforce = true;","\t\t}","\t","\t\t// Check if any of the rows were invalidated","\t\tinvalidated = _fnFilterData( settings );","\t","\t\t// If the input is blank - we just want the full data set","\t\tif ( input.length <= 0 ) {","\t\t\tsettings.aiDisplay = displayMaster.slice();","\t\t}","\t\telse {","\t\t\t// New search - start from the master array","\t\t\tif ( invalidated ||","\t\t\t\t force ||","\t\t\t\t prevSearch.length > input.length ||","\t\t\t\t input.indexOf(prevSearch) !== 0 ||","\t\t\t\t settings.bSorted // On resort, the display master needs to be","\t\t\t\t                  // re-filtered since indexes will have changed","\t\t\t) {","\t\t\t\tsettings.aiDisplay = displayMaster.slice();","\t\t\t}","\t","\t\t\t// Search the display array","\t\t\tdisplay = settings.aiDisplay;","\t","\t\t\tfor ( i=display.length-1 ; i>=0 ; i-- ) {","\t\t\t\tif ( ! rpSearch.test( settings.aoData[ display[i] ]._sFilterRow ) ) {","\t\t\t\t\tdisplay.splice( i, 1 );","\t\t\t\t}","\t\t\t}","\t\t}","\t}","\t","\t","\t/**","\t * Build a regular expression object suitable for searching a table","\t *  @param {string} sSearch string to search for","\t *  @param {bool} bRegex treat as a regular expression or not","\t *  @param {bool} bSmart perform smart filtering or not","\t *  @param {bool} bCaseInsensitive Do case insensitive matching or not","\t *  @returns {RegExp} constructed object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnFilterCreateSearch( search, regex, smart, caseInsensitive )","\t{","\t\tsearch = regex ?","\t\t\tsearch :","\t\t\t_fnEscapeRegex( search );","\t\t","\t\tif ( smart ) {","\t\t\t/* For smart filtering we want to allow the search to work regardless of","\t\t\t * word order. We also want double quoted text to be preserved, so word","\t\t\t * order is important - a la google. So this is what we want to","\t\t\t * generate:","\t\t\t * ","\t\t\t * ^(?=.*?\\bone\\b)(?=.*?\\btwo three\\b)(?=.*?\\bfour\\b).*$","\t\t\t */","\t\t\tvar a = $.map( search.match( /\"[^\"]+\"|[^ ]+/g ) || '', function ( word ) {","\t\t\t\tif ( word.charAt(0) === '\"' ) {","\t\t\t\t\tvar m = word.match( /^\"(.*)\"$/ );","\t\t\t\t\tword = m ? m[1] : word;","\t\t\t\t}","\t","\t\t\t\treturn word.replace('\"', '');","\t\t\t} );","\t","\t\t\tsearch = '^(?=.*?'+a.join( ')(?=.*?' )+').*$';","\t\t}","\t","\t\treturn new RegExp( search, caseInsensitive ? 'i' : '' );","\t}","\t","\t","\t/**","\t * Escape a string such that it can be used in a regular expression","\t *  @param {string} sVal string to escape","\t *  @returns {string} escaped string","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnEscapeRegex ( sVal )","\t{","\t\treturn sVal.replace( _re_escape_regex, '\\\\$1' );","\t}","\t","\t","\t","\tvar __filter_div = $('<div>')[0];","\tvar __filter_div_textContent = __filter_div.textContent !== undefined;","\t","\t// Update the filtering data for each row if needed (by invalidation or first run)","\tfunction _fnFilterData ( settings )","\t{","\t\tvar columns = settings.aoColumns;","\t\tvar column;","\t\tvar i, j, ien, jen, filterData, cellData, row;","\t\tvar fomatters = DataTable.ext.type.search;","\t\tvar wasInvalidated = false;","\t","\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {","\t\t\trow = settings.aoData[i];","\t","\t\t\tif ( ! row._aFilterData ) {","\t\t\t\tfilterData = [];","\t","\t\t\t\tfor ( j=0, jen=columns.length ; j<jen ; j++ ) {","\t\t\t\t\tcolumn = columns[j];","\t","\t\t\t\t\tif ( column.bSearchable ) {","\t\t\t\t\t\tcellData = _fnGetCellData( settings, i, j, 'filter' );","\t","\t\t\t\t\t\tif ( fomatters[ column.sType ] ) {","\t\t\t\t\t\t\tcellData = fomatters[ column.sType ]( cellData );","\t\t\t\t\t\t}","\t","\t\t\t\t\t\t// Search in DataTables 1.10 is string based. In 1.11 this","\t\t\t\t\t\t// should be altered to also allow strict type checking.","\t\t\t\t\t\tif ( cellData === null ) {","\t\t\t\t\t\t\tcellData = '';","\t\t\t\t\t\t}","\t","\t\t\t\t\t\tif ( typeof cellData !== 'string' && cellData.toString ) {","\t\t\t\t\t\t\tcellData = cellData.toString();","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\telse {","\t\t\t\t\t\tcellData = '';","\t\t\t\t\t}","\t","\t\t\t\t\t// If it looks like there is an HTML entity in the string,","\t\t\t\t\t// attempt to decode it so sorting works as expected. Note that","\t\t\t\t\t// we could use a single line of jQuery to do this, but the DOM","\t\t\t\t\t// method used here is much faster http://jsperf.com/html-decode","\t\t\t\t\tif ( cellData.indexOf && cellData.indexOf('&') !== -1 ) {","\t\t\t\t\t\t__filter_div.innerHTML = cellData;","\t\t\t\t\t\tcellData = __filter_div_textContent ?","\t\t\t\t\t\t\t__filter_div.textContent :","\t\t\t\t\t\t\t__filter_div.innerText;","\t\t\t\t\t}","\t","\t\t\t\t\tif ( cellData.replace ) {","\t\t\t\t\t\tcellData = cellData.replace(/[\\r\\n]/g, '');","\t\t\t\t\t}","\t","\t\t\t\t\tfilterData.push( cellData );","\t\t\t\t}","\t","\t\t\t\trow._aFilterData = filterData;","\t\t\t\trow._sFilterRow = filterData.join('  ');","\t\t\t\twasInvalidated = true;","\t\t\t}","\t\t}","\t","\t\treturn wasInvalidated;","\t}","\t","\t","\t/**","\t * Convert from the internal Hungarian notation to camelCase for external","\t * interaction","\t *  @param {object} obj Object to convert","\t *  @returns {object} Inverted object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnSearchToCamel ( obj )","\t{","\t\treturn {","\t\t\tsearch:          obj.sSearch,","\t\t\tsmart:           obj.bSmart,","\t\t\tregex:           obj.bRegex,","\t\t\tcaseInsensitive: obj.bCaseInsensitive","\t\t};","\t}","\t","\t","\t","\t/**","\t * Convert from camelCase notation to the internal Hungarian. We could use the","\t * Hungarian convert function here, but this is cleaner","\t *  @param {object} obj Object to convert","\t *  @returns {object} Inverted object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnSearchToHung ( obj )","\t{","\t\treturn {","\t\t\tsSearch:          obj.search,","\t\t\tbSmart:           obj.smart,","\t\t\tbRegex:           obj.regex,","\t\t\tbCaseInsensitive: obj.caseInsensitive","\t\t};","\t}","\t","\t/**","\t * Generate the node required for the info display","\t *  @param {object} oSettings dataTables settings object","\t *  @returns {node} Information element","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnFeatureHtmlInfo ( settings )","\t{","\t\tvar","\t\t\ttid = settings.sTableId,","\t\t\tnodes = settings.aanFeatures.i,","\t\t\tn = $('<div/>', {","\t\t\t\t'class': settings.oClasses.sInfo,","\t\t\t\t'id': ! nodes ? tid+'_info' : null","\t\t\t} );","\t","\t\tif ( ! nodes ) {","\t\t\t// Update display on each draw","\t\t\tsettings.aoDrawCallback.push( {","\t\t\t\t\"fn\": _fnUpdateInfo,","\t\t\t\t\"sName\": \"information\"","\t\t\t} );","\t","\t\t\tn","\t\t\t\t.attr( 'role', 'status' )","\t\t\t\t.attr( 'aria-live', 'polite' );","\t","\t\t\t// Table is described by our info div","\t\t\t$(settings.nTable).attr( 'aria-describedby', tid+'_info' );","\t\t}","\t","\t\treturn n[0];","\t}","\t","\t","\t/**","\t * Update the information elements in the display","\t *  @param {object} settings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnUpdateInfo ( settings )","\t{","\t\t/* Show information about the table */","\t\tvar nodes = settings.aanFeatures.i;","\t\tif ( nodes.length === 0 ) {","\t\t\treturn;","\t\t}","\t","\t\tvar","\t\t\tlang  = settings.oLanguage,","\t\t\tstart = settings._iDisplayStart+1,","\t\t\tend   = settings.fnDisplayEnd(),","\t\t\tmax   = settings.fnRecordsTotal(),","\t\t\ttotal = settings.fnRecordsDisplay(),","\t\t\tout   = total ?","\t\t\t\tlang.sInfo :","\t\t\t\tlang.sInfoEmpty;","\t","\t\tif ( total !== max ) {","\t\t\t/* Record set after filtering */","\t\t\tout += ' ' + lang.sInfoFiltered;","\t\t}","\t","\t\t// Convert the macros","\t\tout += lang.sInfoPostFix;","\t\tout = _fnInfoMacros( settings, out );","\t","\t\tvar callback = lang.fnInfoCallback;","\t\tif ( callback !== null ) {","\t\t\tout = callback.call( settings.oInstance,","\t\t\t\tsettings, start, end, max, total, out","\t\t\t);","\t\t}","\t","\t\t$(nodes).html( out );","\t}","\t","\t","\tfunction _fnInfoMacros ( settings, str )","\t{","\t\t// When infinite scrolling, we are always starting at 1. _iDisplayStart is used only","\t\t// internally","\t\tvar","\t\t\tformatter  = settings.fnFormatNumber,","\t\t\tstart      = settings._iDisplayStart+1,","\t\t\tlen        = settings._iDisplayLength,","\t\t\tvis        = settings.fnRecordsDisplay(),","\t\t\tall        = len === -1;","\t","\t\treturn str.","\t\t\treplace(/_START_/g, formatter.call( settings, start ) ).","\t\t\treplace(/_END_/g,   formatter.call( settings, settings.fnDisplayEnd() ) ).","\t\t\treplace(/_MAX_/g,   formatter.call( settings, settings.fnRecordsTotal() ) ).","\t\t\treplace(/_TOTAL_/g, formatter.call( settings, vis ) ).","\t\t\treplace(/_PAGE_/g,  formatter.call( settings, all ? 1 : Math.ceil( start / len ) ) ).","\t\t\treplace(/_PAGES_/g, formatter.call( settings, all ? 1 : Math.ceil( vis / len ) ) );","\t}","\t","\t","\t","\t/**","\t * Draw the table for the first time, adding all required features","\t *  @param {object} settings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnInitialise ( settings )","\t{","\t\tvar i, iLen, iAjaxStart=settings.iInitDisplayStart;","\t\tvar columns = settings.aoColumns, column;","\t\tvar features = settings.oFeatures;","\t","\t\t/* Ensure that the table data is fully initialised */","\t\tif ( ! settings.bInitialised ) {","\t\t\tsetTimeout( function(){ _fnInitialise( settings ); }, 200 );","\t\t\treturn;","\t\t}","\t","\t\t/* Show the display HTML options */","\t\t_fnAddOptionsHtml( settings );","\t","\t\t/* Build and draw the header / footer for the table */","\t\t_fnBuildHead( settings );","\t\t_fnDrawHead( settings, settings.aoHeader );","\t\t_fnDrawHead( settings, settings.aoFooter );","\t","\t\t/* Okay to show that something is going on now */","\t\t_fnProcessingDisplay( settings, true );","\t","\t\t/* Calculate sizes for columns */","\t\tif ( features.bAutoWidth ) {","\t\t\t_fnCalculateColumnWidths( settings );","\t\t}","\t","\t\tfor ( i=0, iLen=columns.length ; i<iLen ; i++ ) {","\t\t\tcolumn = columns[i];","\t","\t\t\tif ( column.sWidth ) {","\t\t\t\tcolumn.nTh.style.width = _fnStringToCss( column.sWidth );","\t\t\t}","\t\t}","\t","\t\t// If there is default sorting required - let's do it. The sort function","\t\t// will do the drawing for us. Otherwise we draw the table regardless of the","\t\t// Ajax source - this allows the table to look initialised for Ajax sourcing","\t\t// data (show 'loading' message possibly)","\t\t_fnReDraw( settings );","\t","\t\t// Server-side processing init complete is done by _fnAjaxUpdateDraw","\t\tvar dataSrc = _fnDataSource( settings );","\t\tif ( dataSrc != 'ssp' ) {","\t\t\t// if there is an ajax source load the data","\t\t\tif ( dataSrc == 'ajax' ) {","\t\t\t\t_fnBuildAjax( settings, [], function(json) {","\t\t\t\t\tvar aData = _fnAjaxDataSrc( settings, json );","\t","\t\t\t\t\t// Got the data - add it to the table","\t\t\t\t\tfor ( i=0 ; i<aData.length ; i++ ) {","\t\t\t\t\t\t_fnAddData( settings, aData[i] );","\t\t\t\t\t}","\t","\t\t\t\t\t// Reset the init display for cookie saving. We've already done","\t\t\t\t\t// a filter, and therefore cleared it before. So we need to make","\t\t\t\t\t// it appear 'fresh'","\t\t\t\t\tsettings.iInitDisplayStart = iAjaxStart;","\t","\t\t\t\t\t_fnReDraw( settings );","\t","\t\t\t\t\t_fnProcessingDisplay( settings, false );","\t\t\t\t\t_fnInitComplete( settings, json );","\t\t\t\t}, settings );","\t\t\t}","\t\t\telse {","\t\t\t\t_fnProcessingDisplay( settings, false );","\t\t\t\t_fnInitComplete( settings );","\t\t\t}","\t\t}","\t}","\t","\t","\t/**","\t * Draw the table for the first time, adding all required features","\t *  @param {object} oSettings dataTables settings object","\t *  @param {object} [json] JSON from the server that completed the table, if using Ajax source","\t *    with client-side processing (optional)","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnInitComplete ( settings, json )","\t{","\t\tsettings._bInitComplete = true;","\t","\t\t// On an Ajax load we now have data and therefore want to apply the column","\t\t// sizing","\t\tif ( json ) {","\t\t\t_fnAdjustColumnSizing( settings );","\t\t}","\t","\t\t_fnCallbackFire( settings, 'aoInitComplete', 'init', [settings, json] );","\t}","\t","\t","\tfunction _fnLengthChange ( settings, val )","\t{","\t\tvar len = parseInt( val, 10 );","\t\tsettings._iDisplayLength = len;","\t","\t\t_fnLengthOverflow( settings );","\t","\t\t// Fire length change event","\t\t_fnCallbackFire( settings, null, 'length', [settings, len] );","\t}","\t","\t","\t/**","\t * Generate the node required for user display length changing","\t *  @param {object} settings dataTables settings object","\t *  @returns {node} Display length feature node","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnFeatureHtmlLength ( settings )","\t{","\t\tvar","\t\t\tclasses  = settings.oClasses,","\t\t\ttableId  = settings.sTableId,","\t\t\tmenu     = settings.aLengthMenu,","\t\t\td2       = $.isArray( menu[0] ),","\t\t\tlengths  = d2 ? menu[0] : menu,","\t\t\tlanguage = d2 ? menu[1] : menu;","\t","\t\tvar select = $('<select/>', {","\t\t\t'name':          tableId+'_length',","\t\t\t'aria-controls': tableId,","\t\t\t'class':         classes.sLengthSelect","\t\t} );","\t","\t\tfor ( var i=0, ien=lengths.length ; i<ien ; i++ ) {","\t\t\tselect[0][ i ] = new Option( language[i], lengths[i] );","\t\t}","\t","\t\tvar div = $('<div><label/></div>').addClass( classes.sLength );","\t\tif ( ! settings.aanFeatures.l ) {","\t\t\tdiv[0].id = tableId+'_length';","\t\t}","\t","\t\tdiv.children().append(","\t\t\tsettings.oLanguage.sLengthMenu.replace( '_MENU_', select[0].outerHTML )","\t\t);","\t","\t\t// Can't use `select` variable as user might provide their own and the","\t\t// reference is broken by the use of outerHTML","\t\t$('select', div)","\t\t\t.val( settings._iDisplayLength )","\t\t\t.bind( 'change.DT', function(e) {","\t\t\t\t_fnLengthChange( settings, $(this).val() );","\t\t\t\t_fnDraw( settings );","\t\t\t} );","\t","\t\t// Update node value whenever anything changes the table's length","\t\t$(settings.nTable).bind( 'length.dt.DT', function (e, s, len) {","\t\t\tif ( settings === s ) {","\t\t\t\t$('select', div).val( len );","\t\t\t}","\t\t} );","\t","\t\treturn div[0];","\t}","\t","\t","\t","\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *","\t * Note that most of the paging logic is done in","\t * DataTable.ext.pager","\t */","\t","\t/**","\t * Generate the node required for default pagination","\t *  @param {object} oSettings dataTables settings object","\t *  @returns {node} Pagination feature node","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnFeatureHtmlPaginate ( settings )","\t{","\t\tvar","\t\t\ttype   = settings.sPaginationType,","\t\t\tplugin = DataTable.ext.pager[ type ],","\t\t\tmodern = typeof plugin === 'function',","\t\t\tredraw = function( settings ) {","\t\t\t\t_fnDraw( settings );","\t\t\t},","\t\t\tnode = $('<div/>').addClass( settings.oClasses.sPaging + type )[0],","\t\t\tfeatures = settings.aanFeatures;","\t","\t\tif ( ! modern ) {","\t\t\tplugin.fnInit( settings, node, redraw );","\t\t}","\t","\t\t/* Add a draw callback for the pagination on first instance, to update the paging display */","\t\tif ( ! features.p )","\t\t{","\t\t\tnode.id = settings.sTableId+'_paginate';","\t","\t\t\tsettings.aoDrawCallback.push( {","\t\t\t\t\"fn\": function( settings ) {","\t\t\t\t\tif ( modern ) {","\t\t\t\t\t\tvar","\t\t\t\t\t\t\tstart      = settings._iDisplayStart,","\t\t\t\t\t\t\tlen        = settings._iDisplayLength,","\t\t\t\t\t\t\tvisRecords = settings.fnRecordsDisplay(),","\t\t\t\t\t\t\tall        = len === -1,","\t\t\t\t\t\t\tpage = all ? 0 : Math.ceil( start / len ),","\t\t\t\t\t\t\tpages = all ? 1 : Math.ceil( visRecords / len ),","\t\t\t\t\t\t\tbuttons = plugin(page, pages),","\t\t\t\t\t\t\ti, ien;","\t","\t\t\t\t\t\tfor ( i=0, ien=features.p.length ; i<ien ; i++ ) {","\t\t\t\t\t\t\t_fnRenderer( settings, 'pageButton' )(","\t\t\t\t\t\t\t\tsettings, features.p[i], i, buttons, page, pages","\t\t\t\t\t\t\t);","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t\telse {","\t\t\t\t\t\tplugin.fnUpdate( settings, redraw );","\t\t\t\t\t}","\t\t\t\t},","\t\t\t\t\"sName\": \"pagination\"","\t\t\t} );","\t\t}","\t","\t\treturn node;","\t}","\t","\t","\t/**","\t * Alter the display settings to change the page","\t *  @param {object} settings DataTables settings object","\t *  @param {string|int} action Paging action to take: \"first\", \"previous\",","\t *    \"next\" or \"last\" or page number to jump to (integer)","\t *  @param [bool] redraw Automatically draw the update or not","\t *  @returns {bool} true page has changed, false - no change","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnPageChange ( settings, action, redraw )","\t{","\t\tvar","\t\t\tstart     = settings._iDisplayStart,","\t\t\tlen       = settings._iDisplayLength,","\t\t\trecords   = settings.fnRecordsDisplay();","\t","\t\tif ( records === 0 || len === -1 )","\t\t{","\t\t\tstart = 0;","\t\t}","\t\telse if ( typeof action === \"number\" )","\t\t{","\t\t\tstart = action * len;","\t","\t\t\tif ( start > records )","\t\t\t{","\t\t\t\tstart = 0;","\t\t\t}","\t\t}","\t\telse if ( action == \"first\" )","\t\t{","\t\t\tstart = 0;","\t\t}","\t\telse if ( action == \"previous\" )","\t\t{","\t\t\tstart = len >= 0 ?","\t\t\t\tstart - len :","\t\t\t\t0;","\t","\t\t\tif ( start < 0 )","\t\t\t{","\t\t\t  start = 0;","\t\t\t}","\t\t}","\t\telse if ( action == \"next\" )","\t\t{","\t\t\tif ( start + len < records )","\t\t\t{","\t\t\t\tstart += len;","\t\t\t}","\t\t}","\t\telse if ( action == \"last\" )","\t\t{","\t\t\tstart = Math.floor( (records-1) / len) * len;","\t\t}","\t\telse","\t\t{","\t\t\t_fnLog( settings, 0, \"Unknown paging action: \"+action, 5 );","\t\t}","\t","\t\tvar changed = settings._iDisplayStart !== start;","\t\tsettings._iDisplayStart = start;","\t","\t\tif ( changed ) {","\t\t\t_fnCallbackFire( settings, null, 'page', [settings] );","\t","\t\t\tif ( redraw ) {","\t\t\t\t_fnDraw( settings );","\t\t\t}","\t\t}","\t","\t\treturn changed;","\t}","\t","\t","\t","\t/**","\t * Generate the node required for the processing node","\t *  @param {object} settings dataTables settings object","\t *  @returns {node} Processing element","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnFeatureHtmlProcessing ( settings )","\t{","\t\treturn $('<div/>', {","\t\t\t\t'id': ! settings.aanFeatures.r ? settings.sTableId+'_processing' : null,","\t\t\t\t'class': settings.oClasses.sProcessing","\t\t\t} )","\t\t\t.html( settings.oLanguage.sProcessing )","\t\t\t.insertBefore( settings.nTable )[0];","\t}","\t","\t","\t/**","\t * Display or hide the processing indicator","\t *  @param {object} settings dataTables settings object","\t *  @param {bool} show Show the processing indicator (true) or not (false)","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnProcessingDisplay ( settings, show )","\t{","\t\tif ( settings.oFeatures.bProcessing ) {","\t\t\t$(settings.aanFeatures.r).css( 'display', show ? 'block' : 'none' );","\t\t}","\t","\t\t_fnCallbackFire( settings, null, 'processing', [settings, show] );","\t}","\t","\t/**","\t * Add any control elements for the table - specifically scrolling","\t *  @param {object} settings dataTables settings object","\t *  @returns {node} Node to add to the DOM","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnFeatureHtmlTable ( settings )","\t{","\t\tvar table = $(settings.nTable);","\t","\t\t// Add the ARIA grid role to the table","\t\ttable.attr( 'role', 'grid' );","\t","\t\t// Scrolling from here on in","\t\tvar scroll = settings.oScroll;","\t","\t\tif ( scroll.sX === '' && scroll.sY === '' ) {","\t\t\treturn settings.nTable;","\t\t}","\t","\t\tvar scrollX = scroll.sX;","\t\tvar scrollY = scroll.sY;","\t\tvar classes = settings.oClasses;","\t\tvar caption = table.children('caption');","\t\tvar captionSide = caption.length ? caption[0]._captionSide : null;","\t\tvar headerClone = $( table[0].cloneNode(false) );","\t\tvar footerClone = $( table[0].cloneNode(false) );","\t\tvar footer = table.children('tfoot');","\t\tvar _div = '<div/>';","\t\tvar size = function ( s ) {","\t\t\treturn !s ? null : _fnStringToCss( s );","\t\t};","\t","\t\t// This is fairly messy, but with x scrolling enabled, if the table has a","\t\t// width attribute, regardless of any width applied using the column width","\t\t// options, the browser will shrink or grow the table as needed to fit into","\t\t// that 100%. That would make the width options useless. So we remove it.","\t\t// This is okay, under the assumption that width:100% is applied to the","\t\t// table in CSS (it is in the default stylesheet) which will set the table","\t\t// width as appropriate (the attribute and css behave differently...)","\t\tif ( scroll.sX && table.attr('width') === '100%' ) {","\t\t\ttable.removeAttr('width');","\t\t}","\t","\t\tif ( ! footer.length ) {","\t\t\tfooter = null;","\t\t}","\t","\t\t/*","\t\t * The HTML structure that we want to generate in this function is:","\t\t *  div - scroller","\t\t *    div - scroll head","\t\t *      div - scroll head inner","\t\t *        table - scroll head table","\t\t *          thead - thead","\t\t *    div - scroll body","\t\t *      table - table (master table)","\t\t *        thead - thead clone for sizing","\t\t *        tbody - tbody","\t\t *    div - scroll foot","\t\t *      div - scroll foot inner","\t\t *        table - scroll foot table","\t\t *          tfoot - tfoot","\t\t */","\t\tvar scroller = $( _div, { 'class': classes.sScrollWrapper } )","\t\t\t.append(","\t\t\t\t$(_div, { 'class': classes.sScrollHead } )","\t\t\t\t\t.css( {","\t\t\t\t\t\toverflow: 'hidden',","\t\t\t\t\t\tposition: 'relative',","\t\t\t\t\t\tborder: 0,","\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'","\t\t\t\t\t} )","\t\t\t\t\t.append(","\t\t\t\t\t\t$(_div, { 'class': classes.sScrollHeadInner } )","\t\t\t\t\t\t\t.css( {","\t\t\t\t\t\t\t\t'box-sizing': 'content-box',","\t\t\t\t\t\t\t\twidth: scroll.sXInner || '100%'","\t\t\t\t\t\t\t} )","\t\t\t\t\t\t\t.append(","\t\t\t\t\t\t\t\theaderClone","\t\t\t\t\t\t\t\t\t.removeAttr('id')","\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )","\t\t\t\t\t\t\t\t\t.append( captionSide === 'top' ? caption : null )","\t\t\t\t\t\t\t\t\t.append(","\t\t\t\t\t\t\t\t\t\ttable.children('thead')","\t\t\t\t\t\t\t\t\t)","\t\t\t\t\t\t\t)","\t\t\t\t\t)","\t\t\t)","\t\t\t.append(","\t\t\t\t$(_div, { 'class': classes.sScrollBody } )","\t\t\t\t\t.css( {","\t\t\t\t\t\toverflow: 'auto',","\t\t\t\t\t\theight: size( scrollY ),","\t\t\t\t\t\twidth: size( scrollX )","\t\t\t\t\t} )","\t\t\t\t\t.append( table )","\t\t\t);","\t","\t\tif ( footer ) {","\t\t\tscroller.append(","\t\t\t\t$(_div, { 'class': classes.sScrollFoot } )","\t\t\t\t\t.css( {","\t\t\t\t\t\toverflow: 'hidden',","\t\t\t\t\t\tborder: 0,","\t\t\t\t\t\twidth: scrollX ? size(scrollX) : '100%'","\t\t\t\t\t} )","\t\t\t\t\t.append(","\t\t\t\t\t\t$(_div, { 'class': classes.sScrollFootInner } )","\t\t\t\t\t\t\t.append(","\t\t\t\t\t\t\t\tfooterClone","\t\t\t\t\t\t\t\t\t.removeAttr('id')","\t\t\t\t\t\t\t\t\t.css( 'margin-left', 0 )","\t\t\t\t\t\t\t\t\t.append( captionSide === 'bottom' ? caption : null )","\t\t\t\t\t\t\t\t\t.append(","\t\t\t\t\t\t\t\t\t\ttable.children('tfoot')","\t\t\t\t\t\t\t\t\t)","\t\t\t\t\t\t\t)","\t\t\t\t\t)","\t\t\t);","\t\t}","\t","\t\tvar children = scroller.children();","\t\tvar scrollHead = children[0];","\t\tvar scrollBody = children[1];","\t\tvar scrollFoot = footer ? children[2] : null;","\t","\t\t// When the body is scrolled, then we also want to scroll the headers","\t\tif ( scrollX ) {","\t\t\t$(scrollBody).on( 'scroll.DT', function (e) {","\t\t\t\tvar scrollLeft = this.scrollLeft;","\t","\t\t\t\tscrollHead.scrollLeft = scrollLeft;","\t","\t\t\t\tif ( footer ) {","\t\t\t\t\tscrollFoot.scrollLeft = scrollLeft;","\t\t\t\t}","\t\t\t} );","\t\t}","\t","\t\tsettings.nScrollHead = scrollHead;","\t\tsettings.nScrollBody = scrollBody;","\t\tsettings.nScrollFoot = scrollFoot;","\t","\t\t// On redraw - align columns","\t\tsettings.aoDrawCallback.push( {","\t\t\t\"fn\": _fnScrollDraw,","\t\t\t\"sName\": \"scrolling\"","\t\t} );","\t","\t\treturn scroller[0];","\t}","\t","\t","\t","\t/**","\t * Update the header, footer and body tables for resizing - i.e. column","\t * alignment.","\t *","\t * Welcome to the most horrible function DataTables. The process that this","\t * function follows is basically:","\t *   1. Re-create the table inside the scrolling div","\t *   2. Take live measurements from the DOM","\t *   3. Apply the measurements to align the columns","\t *   4. Clean up","\t *","\t *  @param {object} settings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnScrollDraw ( settings )","\t{","\t\t// Given that this is such a monster function, a lot of variables are use","\t\t// to try and keep the minimised size as small as possible","\t\tvar","\t\t\tscroll         = settings.oScroll,","\t\t\tscrollX        = scroll.sX,","\t\t\tscrollXInner   = scroll.sXInner,","\t\t\tscrollY        = scroll.sY,","\t\t\tbarWidth       = scroll.iBarWidth,","\t\t\tdivHeader      = $(settings.nScrollHead),","\t\t\tdivHeaderStyle = divHeader[0].style,","\t\t\tdivHeaderInner = divHeader.children('div'),","\t\t\tdivHeaderInnerStyle = divHeaderInner[0].style,","\t\t\tdivHeaderTable = divHeaderInner.children('table'),","\t\t\tdivBodyEl      = settings.nScrollBody,","\t\t\tdivBody        = $(divBodyEl),","\t\t\tdivBodyStyle   = divBodyEl.style,","\t\t\tdivFooter      = $(settings.nScrollFoot),","\t\t\tdivFooterInner = divFooter.children('div'),","\t\t\tdivFooterTable = divFooterInner.children('table'),","\t\t\theader         = $(settings.nTHead),","\t\t\ttable          = $(settings.nTable),","\t\t\ttableEl        = table[0],","\t\t\ttableStyle     = tableEl.style,","\t\t\tfooter         = settings.nTFoot ? $(settings.nTFoot) : null,","\t\t\tbrowser        = settings.oBrowser,","\t\t\tie67           = browser.bScrollOversize,","\t\t\theaderTrgEls, footerTrgEls,","\t\t\theaderSrcEls, footerSrcEls,","\t\t\theaderCopy, footerCopy,","\t\t\theaderWidths=[], footerWidths=[],","\t\t\theaderContent=[],","\t\t\tidx, correction, sanityWidth,","\t\t\tzeroOut = function(nSizer) {","\t\t\t\tvar style = nSizer.style;","\t\t\t\tstyle.paddingTop = \"0\";","\t\t\t\tstyle.paddingBottom = \"0\";","\t\t\t\tstyle.borderTopWidth = \"0\";","\t\t\t\tstyle.borderBottomWidth = \"0\";","\t\t\t\tstyle.height = 0;","\t\t\t};","\t","\t\t/*","\t\t * 1. Re-create the table inside the scrolling div","\t\t */","\t","\t\t// Remove the old minimised thead and tfoot elements in the inner table","\t\ttable.children('thead, tfoot').remove();","\t","\t\t// Clone the current header and footer elements and then place it into the inner table","\t\theaderCopy = header.clone().prependTo( table );","\t\theaderTrgEls = header.find('tr'); // original header is in its own table","\t\theaderSrcEls = headerCopy.find('tr');","\t\theaderCopy.find('th, td').removeAttr('tabindex');","\t","\t\tif ( footer ) {","\t\t\tfooterCopy = footer.clone().prependTo( table );","\t\t\tfooterTrgEls = footer.find('tr'); // the original tfoot is in its own table and must be sized","\t\t\tfooterSrcEls = footerCopy.find('tr');","\t\t}","\t","\t","\t\t/*","\t\t * 2. Take live measurements from the DOM - do not alter the DOM itself!","\t\t */","\t","\t\t// Remove old sizing and apply the calculated column widths","\t\t// Get the unique column headers in the newly created (cloned) header. We want to apply the","\t\t// calculated sizes to this header","\t\tif ( ! scrollX )","\t\t{","\t\t\tdivBodyStyle.width = '100%';","\t\t\tdivHeader[0].style.width = '100%';","\t\t}","\t","\t\t$.each( _fnGetUniqueThs( settings, headerCopy ), function ( i, el ) {","\t\t\tidx = _fnVisibleToColumnIndex( settings, i );","\t\t\tel.style.width = settings.aoColumns[idx].sWidth;","\t\t} );","\t","\t\tif ( footer ) {","\t\t\t_fnApplyToChildren( function(n) {","\t\t\t\tn.style.width = \"\";","\t\t\t}, footerSrcEls );","\t\t}","\t","\t\t// If scroll collapse is enabled, when we put the headers back into the body for sizing, we","\t\t// will end up forcing the scrollbar to appear, making our measurements wrong for when we","\t\t// then hide it (end of this function), so add the header height to the body scroller.","\t\tif ( scroll.bCollapse && scrollY !== \"\" ) {","\t\t\tdivBodyStyle.height = (divBody[0].offsetHeight + header[0].offsetHeight)+\"px\";","\t\t}","\t","\t\t// Size the table as a whole","\t\tsanityWidth = table.outerWidth();","\t\tif ( scrollX === \"\" ) {","\t\t\t// No x scrolling","\t\t\ttableStyle.width = \"100%\";","\t","\t\t\t// IE7 will make the width of the table when 100% include the scrollbar","\t\t\t// - which is shouldn't. When there is a scrollbar we need to take this","\t\t\t// into account.","\t\t\tif ( ie67 && (table.find('tbody').height() > divBodyEl.offsetHeight ||","\t\t\t\tdivBody.css('overflow-y') == \"scroll\")","\t\t\t) {","\t\t\t\ttableStyle.width = _fnStringToCss( table.outerWidth() - barWidth);","\t\t\t}","\t\t}","\t\telse","\t\t{","\t\t\t// x scrolling","\t\t\tif ( scrollXInner !== \"\" ) {","\t\t\t\t// x scroll inner has been given - use it","\t\t\t\ttableStyle.width = _fnStringToCss(scrollXInner);","\t\t\t}","\t\t\telse if ( sanityWidth == divBody.width() && divBody.height() < table.height() ) {","\t\t\t\t// There is y-scrolling - try to take account of the y scroll bar","\t\t\t\ttableStyle.width = _fnStringToCss( sanityWidth-barWidth );","\t\t\t\tif ( table.outerWidth() > sanityWidth-barWidth ) {","\t\t\t\t\t// Not possible to take account of it","\t\t\t\t\ttableStyle.width = _fnStringToCss( sanityWidth );","\t\t\t\t}","\t\t\t}","\t\t\telse {","\t\t\t\t// When all else fails","\t\t\t\ttableStyle.width = _fnStringToCss( sanityWidth );","\t\t\t}","\t\t}","\t","\t\t// Recalculate the sanity width - now that we've applied the required width,","\t\t// before it was a temporary variable. This is required because the column","\t\t// width calculation is done before this table DOM is created.","\t\tsanityWidth = table.outerWidth();","\t","\t\t// Hidden header should have zero height, so remove padding and borders. Then","\t\t// set the width based on the real headers","\t","\t\t// Apply all styles in one pass","\t\t_fnApplyToChildren( zeroOut, headerSrcEls );","\t","\t\t// Read all widths in next pass","\t\t_fnApplyToChildren( function(nSizer) {","\t\t\theaderContent.push( nSizer.innerHTML );","\t\t\theaderWidths.push( _fnStringToCss( $(nSizer).css('width') ) );","\t\t}, headerSrcEls );","\t","\t\t// Apply all widths in final pass","\t\t_fnApplyToChildren( function(nToSize, i) {","\t\t\tnToSize.style.width = headerWidths[i];","\t\t}, headerTrgEls );","\t","\t\t$(headerSrcEls).height(0);","\t","\t\t/* Same again with the footer if we have one */","\t\tif ( footer )","\t\t{","\t\t\t_fnApplyToChildren( zeroOut, footerSrcEls );","\t","\t\t\t_fnApplyToChildren( function(nSizer) {","\t\t\t\tfooterWidths.push( _fnStringToCss( $(nSizer).css('width') ) );","\t\t\t}, footerSrcEls );","\t","\t\t\t_fnApplyToChildren( function(nToSize, i) {","\t\t\t\tnToSize.style.width = footerWidths[i];","\t\t\t}, footerTrgEls );","\t","\t\t\t$(footerSrcEls).height(0);","\t\t}","\t","\t","\t\t/*","\t\t * 3. Apply the measurements","\t\t */","\t","\t\t// \"Hide\" the header and footer that we used for the sizing. We need to keep","\t\t// the content of the cell so that the width applied to the header and body","\t\t// both match, but we want to hide it completely. We want to also fix their","\t\t// width to what they currently are","\t\t_fnApplyToChildren( function(nSizer, i) {","\t\t\tnSizer.innerHTML = '<div class=\"dataTables_sizing\" style=\"height:0;overflow:hidden;\">'+headerContent[i]+'</div>';","\t\t\tnSizer.style.width = headerWidths[i];","\t\t}, headerSrcEls );","\t","\t\tif ( footer )","\t\t{","\t\t\t_fnApplyToChildren( function(nSizer, i) {","\t\t\t\tnSizer.innerHTML = \"\";","\t\t\t\tnSizer.style.width = footerWidths[i];","\t\t\t}, footerSrcEls );","\t\t}","\t","\t\t// Sanity check that the table is of a sensible width. If not then we are going to get","\t\t// misalignment - try to prevent this by not allowing the table to shrink below its min width","\t\tif ( table.outerWidth() < sanityWidth )","\t\t{","\t\t\t// The min width depends upon if we have a vertical scrollbar visible or not */","\t\t\tcorrection = ((divBodyEl.scrollHeight > divBodyEl.offsetHeight ||","\t\t\t\tdivBody.css('overflow-y') == \"scroll\")) ?","\t\t\t\t\tsanityWidth+barWidth :","\t\t\t\t\tsanityWidth;","\t","\t\t\t// IE6/7 are a law unto themselves...","\t\t\tif ( ie67 && (divBodyEl.scrollHeight >","\t\t\t\tdivBodyEl.offsetHeight || divBody.css('overflow-y') == \"scroll\")","\t\t\t) {","\t\t\t\ttableStyle.width = _fnStringToCss( correction-barWidth );","\t\t\t}","\t","\t\t\t// And give the user a warning that we've stopped the table getting too small","\t\t\tif ( scrollX === \"\" || scrollXInner !== \"\" ) {","\t\t\t\t_fnLog( settings, 1, 'Possible column misalignment', 6 );","\t\t\t}","\t\t}","\t\telse","\t\t{","\t\t\tcorrection = '100%';","\t\t}","\t","\t\t// Apply to the container elements","\t\tdivBodyStyle.width = _fnStringToCss( correction );","\t\tdivHeaderStyle.width = _fnStringToCss( correction );","\t","\t\tif ( footer ) {","\t\t\tsettings.nScrollFoot.style.width = _fnStringToCss( correction );","\t\t}","\t","\t","\t\t/*","\t\t * 4. Clean up","\t\t */","\t\tif ( ! scrollY ) {","\t\t\t/* IE7< puts a vertical scrollbar in place (when it shouldn't be) due to subtracting","\t\t\t * the scrollbar height from the visible display, rather than adding it on. We need to","\t\t\t * set the height in order to sort this. Don't want to do it in any other browsers.","\t\t\t */","\t\t\tif ( ie67 ) {","\t\t\t\tdivBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+barWidth );","\t\t\t}","\t\t}","\t","\t\tif ( scrollY && scroll.bCollapse ) {","\t\t\tdivBodyStyle.height = _fnStringToCss( scrollY );","\t","\t\t\tvar iExtra = (scrollX && tableEl.offsetWidth > divBodyEl.offsetWidth) ?","\t\t\t\tbarWidth :","\t\t\t\t0;","\t","\t\t\tif ( tableEl.offsetHeight < divBodyEl.offsetHeight ) {","\t\t\t\tdivBodyStyle.height = _fnStringToCss( tableEl.offsetHeight+iExtra );","\t\t\t}","\t\t}","\t","\t\t/* Finally set the width's of the header and footer tables */","\t\tvar iOuterWidth = table.outerWidth();","\t\tdivHeaderTable[0].style.width = _fnStringToCss( iOuterWidth );","\t\tdivHeaderInnerStyle.width = _fnStringToCss( iOuterWidth );","\t","\t\t// Figure out if there are scrollbar present - if so then we need a the header and footer to","\t\t// provide a bit more space to allow \"overflow\" scrolling (i.e. past the scrollbar)","\t\tvar bScrolling = table.height() > divBodyEl.clientHeight || divBody.css('overflow-y') == \"scroll\";","\t\tvar padding = 'padding' + (browser.bScrollbarLeft ? 'Left' : 'Right' );","\t\tdivHeaderInnerStyle[ padding ] = bScrolling ? barWidth+\"px\" : \"0px\";","\t","\t\tif ( footer ) {","\t\t\tdivFooterTable[0].style.width = _fnStringToCss( iOuterWidth );","\t\t\tdivFooterInner[0].style.width = _fnStringToCss( iOuterWidth );","\t\t\tdivFooterInner[0].style[padding] = bScrolling ? barWidth+\"px\" : \"0px\";","\t\t}","\t","\t\t/* Adjust the position of the header in case we loose the y-scrollbar */","\t\tdivBody.scroll();","\t","\t\t// If sorting or filtering has occurred, jump the scrolling back to the top","\t\t// only if we aren't holding the position","\t\tif ( (settings.bSorted || settings.bFiltered) && ! settings._drawHold ) {","\t\t\tdivBodyEl.scrollTop = 0;","\t\t}","\t}","\t","\t","\t","\t/**","\t * Apply a given function to the display child nodes of an element array (typically","\t * TD children of TR rows","\t *  @param {function} fn Method to apply to the objects","\t *  @param array {nodes} an1 List of elements to look through for display children","\t *  @param array {nodes} an2 Another list (identical structure to the first) - optional","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnApplyToChildren( fn, an1, an2 )","\t{","\t\tvar index=0, i=0, iLen=an1.length;","\t\tvar nNode1, nNode2;","\t","\t\twhile ( i < iLen ) {","\t\t\tnNode1 = an1[i].firstChild;","\t\t\tnNode2 = an2 ? an2[i].firstChild : null;","\t","\t\t\twhile ( nNode1 ) {","\t\t\t\tif ( nNode1.nodeType === 1 ) {","\t\t\t\t\tif ( an2 ) {","\t\t\t\t\t\tfn( nNode1, nNode2, index );","\t\t\t\t\t}","\t\t\t\t\telse {","\t\t\t\t\t\tfn( nNode1, index );","\t\t\t\t\t}","\t","\t\t\t\t\tindex++;","\t\t\t\t}","\t","\t\t\t\tnNode1 = nNode1.nextSibling;","\t\t\t\tnNode2 = an2 ? nNode2.nextSibling : null;","\t\t\t}","\t","\t\t\ti++;","\t\t}","\t}","\t","\t","\t","\tvar __re_html_remove = /<.*?>/g;","\t","\t","\t/**","\t * Calculate the width of columns for the table","\t *  @param {object} oSettings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnCalculateColumnWidths ( oSettings )","\t{","\t\tvar","\t\t\ttable = oSettings.nTable,","\t\t\tcolumns = oSettings.aoColumns,","\t\t\tscroll = oSettings.oScroll,","\t\t\tscrollY = scroll.sY,","\t\t\tscrollX = scroll.sX,","\t\t\tscrollXInner = scroll.sXInner,","\t\t\tcolumnCount = columns.length,","\t\t\tvisibleColumns = _fnGetColumns( oSettings, 'bVisible' ),","\t\t\theaderCells = $('th', oSettings.nTHead),","\t\t\ttableWidthAttr = table.getAttribute('width'), // from DOM element","\t\t\ttableContainer = table.parentNode,","\t\t\tuserInputs = false,","\t\t\ti, column, columnIdx, width, outerWidth;","\t","\t\tvar styleWidth = table.style.width;","\t\tif ( styleWidth && styleWidth.indexOf('%') !== -1 ) {","\t\t\ttableWidthAttr = styleWidth;","\t\t}","\t","\t\t/* Convert any user input sizes into pixel sizes */","\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {","\t\t\tcolumn = columns[ visibleColumns[i] ];","\t","\t\t\tif ( column.sWidth !== null ) {","\t\t\t\tcolumn.sWidth = _fnConvertToWidth( column.sWidthOrig, tableContainer );","\t","\t\t\t\tuserInputs = true;","\t\t\t}","\t\t}","\t","\t\t/* If the number of columns in the DOM equals the number that we have to","\t\t * process in DataTables, then we can use the offsets that are created by","\t\t * the web- browser. No custom sizes can be set in order for this to happen,","\t\t * nor scrolling used","\t\t */","\t\tif ( ! userInputs && ! scrollX && ! scrollY &&","\t\t    columnCount == _fnVisbleColumns( oSettings ) &&","\t\t\tcolumnCount == headerCells.length","\t\t) {","\t\t\tfor ( i=0 ; i<columnCount ; i++ ) {","\t\t\t\tcolumns[i].sWidth = _fnStringToCss( headerCells.eq(i).width() );","\t\t\t}","\t\t}","\t\telse","\t\t{","\t\t\t// Otherwise construct a single row table with the widest node in the","\t\t\t// data, assign any user defined widths, then insert it into the DOM and","\t\t\t// allow the browser to do all the hard work of calculating table widths","\t\t\tvar tmpTable = $(table).clone() // don't use cloneNode - IE8 will remove events on the main table","\t\t\t\t.empty()","\t\t\t\t.css( 'visibility', 'hidden' )","\t\t\t\t.removeAttr( 'id' )","\t\t\t\t.append( $(oSettings.nTHead).clone( false ) )","\t\t\t\t.append( $(oSettings.nTFoot).clone( false ) )","\t\t\t\t.append( $('<tbody><tr/></tbody>') );","\t","\t\t\t// Remove any assigned widths from the footer (from scrolling)","\t\t\ttmpTable.find('tfoot th, tfoot td').css('width', '');","\t","\t\t\tvar tr = tmpTable.find( 'tbody tr' );","\t","\t\t\t// Apply custom sizing to the cloned header","\t\t\theaderCells = _fnGetUniqueThs( oSettings, tmpTable.find('thead')[0] );","\t","\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {","\t\t\t\tcolumn = columns[ visibleColumns[i] ];","\t","\t\t\t\theaderCells[i].style.width = column.sWidthOrig !== null && column.sWidthOrig !== '' ?","\t\t\t\t\t_fnStringToCss( column.sWidthOrig ) :","\t\t\t\t\t'';","\t\t\t}","\t","\t\t\t// Find the widest cell for each column and put it into the table","\t\t\tif ( oSettings.aoData.length ) {","\t\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {","\t\t\t\t\tcolumnIdx = visibleColumns[i];","\t\t\t\t\tcolumn = columns[ columnIdx ];","\t","\t\t\t\t\t$( _fnGetWidestNode( oSettings, columnIdx ) )","\t\t\t\t\t\t.clone( false )","\t\t\t\t\t\t.append( column.sContentPadding )","\t\t\t\t\t\t.appendTo( tr );","\t\t\t\t}","\t\t\t}","\t","\t\t\t// Table has been built, attach to the document so we can work with it","\t\t\ttmpTable.appendTo( tableContainer );","\t","\t\t\t// When scrolling (X or Y) we want to set the width of the table as ","\t\t\t// appropriate. However, when not scrolling leave the table width as it","\t\t\t// is. This results in slightly different, but I think correct behaviour","\t\t\tif ( scrollX && scrollXInner ) {","\t\t\t\ttmpTable.width( scrollXInner );","\t\t\t}","\t\t\telse if ( scrollX ) {","\t\t\t\ttmpTable.css( 'width', 'auto' );","\t","\t\t\t\tif ( tmpTable.width() < tableContainer.offsetWidth ) {","\t\t\t\t\ttmpTable.width( tableContainer.offsetWidth );","\t\t\t\t}","\t\t\t}","\t\t\telse if ( scrollY ) {","\t\t\t\ttmpTable.width( tableContainer.offsetWidth );","\t\t\t}","\t\t\telse if ( tableWidthAttr ) {","\t\t\t\ttmpTable.width( tableWidthAttr );","\t\t\t}","\t","\t\t\t// Take into account the y scrollbar","\t\t\t_fnScrollingWidthAdjust( oSettings, tmpTable[0] );","\t","\t\t\t// Browsers need a bit of a hand when a width is assigned to any columns","\t\t\t// when x-scrolling as they tend to collapse the table to the min-width,","\t\t\t// even if we sent the column widths. So we need to keep track of what","\t\t\t// the table width should be by summing the user given values, and the","\t\t\t// automatic values","\t\t\tif ( scrollX )","\t\t\t{","\t\t\t\tvar total = 0;","\t","\t\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {","\t\t\t\t\tcolumn = columns[ visibleColumns[i] ];","\t\t\t\t\touterWidth = $(headerCells[i]).outerWidth();","\t","\t\t\t\t\ttotal += column.sWidthOrig === null ?","\t\t\t\t\t\touterWidth :","\t\t\t\t\t\tparseInt( column.sWidth, 10 ) + outerWidth - $(headerCells[i]).width();","\t\t\t\t}","\t","\t\t\t\ttmpTable.width( _fnStringToCss( total ) );","\t\t\t\ttable.style.width = _fnStringToCss( total );","\t\t\t}","\t","\t\t\t// Get the width of each column in the constructed table","\t\t\tfor ( i=0 ; i<visibleColumns.length ; i++ ) {","\t\t\t\tcolumn = columns[ visibleColumns[i] ];","\t\t\t\twidth = $(headerCells[i]).width();","\t","\t\t\t\tif ( width ) {","\t\t\t\t\tcolumn.sWidth = _fnStringToCss( width );","\t\t\t\t}","\t\t\t}","\t","\t\t\ttable.style.width = _fnStringToCss( tmpTable.css('width') );","\t","\t\t\t// Finished with the table - ditch it","\t\t\ttmpTable.remove();","\t\t}","\t","\t\t// If there is a width attr, we want to attach an event listener which","\t\t// allows the table sizing to automatically adjust when the window is","\t\t// resized. Use the width attr rather than CSS, since we can't know if the","\t\t// CSS is a relative value or absolute - DOM read is always px.","\t\tif ( tableWidthAttr ) {","\t\t\ttable.style.width = _fnStringToCss( tableWidthAttr );","\t\t}","\t","\t\tif ( (tableWidthAttr || scrollX) && ! oSettings._reszEvt ) {","\t\t\t$(window).bind('resize.DT-'+oSettings.sInstance, _fnThrottle( function () {","\t\t\t\t_fnAdjustColumnSizing( oSettings );","\t\t\t} ) );","\t","\t\t\toSettings._reszEvt = true;","\t\t}","\t}","\t","\t","\t/**","\t * Throttle the calls to a function. Arguments and context are maintained for","\t * the throttled function","\t *  @param {function} fn Function to be called","\t *  @param {int} [freq=200] call frequency in mS","\t *  @returns {function} wrapped function","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnThrottle( fn, freq ) {","\t\tvar","\t\t\tfrequency = freq !== undefined ? freq : 200,","\t\t\tlast,","\t\t\ttimer;","\t","\t\treturn function () {","\t\t\tvar","\t\t\t\tthat = this,","\t\t\t\tnow  = +new Date(),","\t\t\t\targs = arguments;","\t","\t\t\tif ( last && now < last + frequency ) {","\t\t\t\tclearTimeout( timer );","\t","\t\t\t\ttimer = setTimeout( function () {","\t\t\t\t\tlast = undefined;","\t\t\t\t\tfn.apply( that, args );","\t\t\t\t}, frequency );","\t\t\t}","\t\t\telse {","\t\t\t\tlast = now;","\t\t\t\tfn.apply( that, args );","\t\t\t}","\t\t};","\t}","\t","\t","\t/**","\t * Convert a CSS unit width to pixels (e.g. 2em)","\t *  @param {string} width width to be converted","\t *  @param {node} parent parent to get the with for (required for relative widths) - optional","\t *  @returns {int} width in pixels","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnConvertToWidth ( width, parent )","\t{","\t\tif ( ! width ) {","\t\t\treturn 0;","\t\t}","\t","\t\tvar n = $('<div/>')","\t\t\t.css( 'width', _fnStringToCss( width ) )","\t\t\t.appendTo( parent || document.body );","\t","\t\tvar val = n[0].offsetWidth;","\t\tn.remove();","\t","\t\treturn val;","\t}","\t","\t","\t/**","\t * Adjust a table's width to take account of vertical scroll bar","\t *  @param {object} oSettings dataTables settings object","\t *  @param {node} n table node","\t *  @memberof DataTable#oApi","\t */","\t","\tfunction _fnScrollingWidthAdjust ( settings, n )","\t{","\t\tvar scroll = settings.oScroll;","\t","\t\tif ( scroll.sX || scroll.sY ) {","\t\t\t// When y-scrolling only, we want to remove the width of the scroll bar","\t\t\t// so the table + scroll bar will fit into the area available, otherwise","\t\t\t// we fix the table at its current size with no adjustment","\t\t\tvar correction = ! scroll.sX ? scroll.iBarWidth : 0;","\t\t\tn.style.width = _fnStringToCss( $(n).outerWidth() - correction );","\t\t}","\t}","\t","\t","\t/**","\t * Get the widest node","\t *  @param {object} settings dataTables settings object","\t *  @param {int} colIdx column of interest","\t *  @returns {node} widest table node","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnGetWidestNode( settings, colIdx )","\t{","\t\tvar idx = _fnGetMaxLenString( settings, colIdx );","\t\tif ( idx < 0 ) {","\t\t\treturn null;","\t\t}","\t","\t\tvar data = settings.aoData[ idx ];","\t\treturn ! data.nTr ? // Might not have been created when deferred rendering","\t\t\t$('<td/>').html( _fnGetCellData( settings, idx, colIdx, 'display' ) )[0] :","\t\t\tdata.anCells[ colIdx ];","\t}","\t","\t","\t/**","\t * Get the maximum strlen for each data column","\t *  @param {object} settings dataTables settings object","\t *  @param {int} colIdx column of interest","\t *  @returns {string} max string length for each column","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnGetMaxLenString( settings, colIdx )","\t{","\t\tvar s, max=-1, maxIdx = -1;","\t","\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {","\t\t\ts = _fnGetCellData( settings, i, colIdx, 'display' )+'';","\t\t\ts = s.replace( __re_html_remove, '' );","\t","\t\t\tif ( s.length > max ) {","\t\t\t\tmax = s.length;","\t\t\t\tmaxIdx = i;","\t\t\t}","\t\t}","\t","\t\treturn maxIdx;","\t}","\t","\t","\t/**","\t * Append a CSS unit (only if required) to a string","\t *  @param {string} value to css-ify","\t *  @returns {string} value with css unit","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnStringToCss( s )","\t{","\t\tif ( s === null ) {","\t\t\treturn '0px';","\t\t}","\t","\t\tif ( typeof s == 'number' ) {","\t\t\treturn s < 0 ?","\t\t\t\t'0px' :","\t\t\t\ts+'px';","\t\t}","\t","\t\t// Check it has a unit character already","\t\treturn s.match(/\\d$/) ?","\t\t\ts+'px' :","\t\t\ts;","\t}","\t","\t","\t/**","\t * Get the width of a scroll bar in this browser being used","\t *  @returns {int} width in pixels","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnScrollBarWidth ()","\t{","\t\t// On first run a static variable is set, since this is only needed once.","\t\t// Subsequent runs will just use the previously calculated value","\t\tvar width = DataTable.__scrollbarWidth;","\t","\t\tif ( width === undefined ) {","\t\t\tvar sizer = $('<p/>').css( {","\t\t\t\t\tposition: 'absolute',","\t\t\t\t\ttop: 0,","\t\t\t\t\tleft: 0,","\t\t\t\t\twidth: '100%',","\t\t\t\t\theight: 150,","\t\t\t\t\tpadding: 0,","\t\t\t\t\toverflow: 'scroll',","\t\t\t\t\tvisibility: 'hidden'","\t\t\t\t} )","\t\t\t\t.appendTo('body');","\t","\t\t\twidth = sizer[0].offsetWidth - sizer[0].clientWidth;","\t\t\tDataTable.__scrollbarWidth = width;","\t","\t\t\tsizer.remove();","\t\t}","\t","\t\treturn width;","\t}","\t","\t","\t","\tfunction _fnSortFlatten ( settings )","\t{","\t\tvar","\t\t\ti, iLen, k, kLen,","\t\t\taSort = [],","\t\t\taiOrig = [],","\t\t\taoColumns = settings.aoColumns,","\t\t\taDataSort, iCol, sType, srcCol,","\t\t\tfixed = settings.aaSortingFixed,","\t\t\tfixedObj = $.isPlainObject( fixed ),","\t\t\tnestedSort = [],","\t\t\tadd = function ( a ) {","\t\t\t\tif ( a.length && ! $.isArray( a[0] ) ) {","\t\t\t\t\t// 1D array","\t\t\t\t\tnestedSort.push( a );","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\t// 2D array","\t\t\t\t\tnestedSort.push.apply( nestedSort, a );","\t\t\t\t}","\t\t\t};","\t","\t\t// Build the sort array, with pre-fix and post-fix options if they have been","\t\t// specified","\t\tif ( $.isArray( fixed ) ) {","\t\t\tadd( fixed );","\t\t}","\t","\t\tif ( fixedObj && fixed.pre ) {","\t\t\tadd( fixed.pre );","\t\t}","\t","\t\tadd( settings.aaSorting );","\t","\t\tif (fixedObj && fixed.post ) {","\t\t\tadd( fixed.post );","\t\t}","\t","\t\tfor ( i=0 ; i<nestedSort.length ; i++ )","\t\t{","\t\t\tsrcCol = nestedSort[i][0];","\t\t\taDataSort = aoColumns[ srcCol ].aDataSort;","\t","\t\t\tfor ( k=0, kLen=aDataSort.length ; k<kLen ; k++ )","\t\t\t{","\t\t\t\tiCol = aDataSort[k];","\t\t\t\tsType = aoColumns[ iCol ].sType || 'string';","\t","\t\t\t\tif ( nestedSort[i]._idx === undefined ) {","\t\t\t\t\tnestedSort[i]._idx = $.inArray( nestedSort[i][1], aoColumns[iCol].asSorting );","\t\t\t\t}","\t","\t\t\t\taSort.push( {","\t\t\t\t\tsrc:       srcCol,","\t\t\t\t\tcol:       iCol,","\t\t\t\t\tdir:       nestedSort[i][1],","\t\t\t\t\tindex:     nestedSort[i]._idx,","\t\t\t\t\ttype:      sType,","\t\t\t\t\tformatter: DataTable.ext.type.order[ sType+\"-pre\" ]","\t\t\t\t} );","\t\t\t}","\t\t}","\t","\t\treturn aSort;","\t}","\t","\t/**","\t * Change the order of the table","\t *  @param {object} oSettings dataTables settings object","\t *  @memberof DataTable#oApi","\t *  @todo This really needs split up!","\t */","\tfunction _fnSort ( oSettings )","\t{","\t\tvar","\t\t\ti, ien, iLen, j, jLen, k, kLen,","\t\t\tsDataType, nTh,","\t\t\taiOrig = [],","\t\t\toExtSort = DataTable.ext.type.order,","\t\t\taoData = oSettings.aoData,","\t\t\taoColumns = oSettings.aoColumns,","\t\t\taDataSort, data, iCol, sType, oSort,","\t\t\tformatters = 0,","\t\t\tsortCol,","\t\t\tdisplayMaster = oSettings.aiDisplayMaster,","\t\t\taSort;","\t","\t\t// Resolve any column types that are unknown due to addition or invalidation","\t\t// @todo Can this be moved into a 'data-ready' handler which is called when","\t\t//   data is going to be used in the table?","\t\t_fnColumnTypes( oSettings );","\t","\t\taSort = _fnSortFlatten( oSettings );","\t","\t\tfor ( i=0, ien=aSort.length ; i<ien ; i++ ) {","\t\t\tsortCol = aSort[i];","\t","\t\t\t// Track if we can use the fast sort algorithm","\t\t\tif ( sortCol.formatter ) {","\t\t\t\tformatters++;","\t\t\t}","\t","\t\t\t// Load the data needed for the sort, for each cell","\t\t\t_fnSortData( oSettings, sortCol.col );","\t\t}","\t","\t\t/* No sorting required if server-side or no sorting array */","\t\tif ( _fnDataSource( oSettings ) != 'ssp' && aSort.length !== 0 )","\t\t{","\t\t\t// Create a value - key array of the current row positions such that we can use their","\t\t\t// current position during the sort, if values match, in order to perform stable sorting","\t\t\tfor ( i=0, iLen=displayMaster.length ; i<iLen ; i++ ) {","\t\t\t\taiOrig[ displayMaster[i] ] = i;","\t\t\t}","\t","\t\t\t/* Do the sort - here we want multi-column sorting based on a given data source (column)","\t\t\t * and sorting function (from oSort) in a certain direction. It's reasonably complex to","\t\t\t * follow on it's own, but this is what we want (example two column sorting):","\t\t\t *  fnLocalSorting = function(a,b){","\t\t\t *    var iTest;","\t\t\t *    iTest = oSort['string-asc']('data11', 'data12');","\t\t\t *      if (iTest !== 0)","\t\t\t *        return iTest;","\t\t\t *    iTest = oSort['numeric-desc']('data21', 'data22');","\t\t\t *    if (iTest !== 0)","\t\t\t *      return iTest;","\t\t\t *    return oSort['numeric-asc']( aiOrig[a], aiOrig[b] );","\t\t\t *  }","\t\t\t * Basically we have a test for each sorting column, if the data in that column is equal,","\t\t\t * test the next column. If all columns match, then we use a numeric sort on the row","\t\t\t * positions in the original data array to provide a stable sort.","\t\t\t *","\t\t\t * Note - I know it seems excessive to have two sorting methods, but the first is around","\t\t\t * 15% faster, so the second is only maintained for backwards compatibility with sorting","\t\t\t * methods which do not have a pre-sort formatting function.","\t\t\t */","\t\t\tif ( formatters === aSort.length ) {","\t\t\t\t// All sort types have formatting functions","\t\t\t\tdisplayMaster.sort( function ( a, b ) {","\t\t\t\t\tvar","\t\t\t\t\t\tx, y, k, test, sort,","\t\t\t\t\t\tlen=aSort.length,","\t\t\t\t\t\tdataA = aoData[a]._aSortData,","\t\t\t\t\t\tdataB = aoData[b]._aSortData;","\t","\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {","\t\t\t\t\t\tsort = aSort[k];","\t","\t\t\t\t\t\tx = dataA[ sort.col ];","\t\t\t\t\t\ty = dataB[ sort.col ];","\t","\t\t\t\t\t\ttest = x<y ? -1 : x>y ? 1 : 0;","\t\t\t\t\t\tif ( test !== 0 ) {","\t\t\t\t\t\t\treturn sort.dir === 'asc' ? test : -test;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t","\t\t\t\t\tx = aiOrig[a];","\t\t\t\t\ty = aiOrig[b];","\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;","\t\t\t\t} );","\t\t\t}","\t\t\telse {","\t\t\t\t// Depreciated - remove in 1.11 (providing a plug-in option)","\t\t\t\t// Not all sort types have formatting methods, so we have to call their sorting","\t\t\t\t// methods.","\t\t\t\tdisplayMaster.sort( function ( a, b ) {","\t\t\t\t\tvar","\t\t\t\t\t\tx, y, k, l, test, sort, fn,","\t\t\t\t\t\tlen=aSort.length,","\t\t\t\t\t\tdataA = aoData[a]._aSortData,","\t\t\t\t\t\tdataB = aoData[b]._aSortData;","\t","\t\t\t\t\tfor ( k=0 ; k<len ; k++ ) {","\t\t\t\t\t\tsort = aSort[k];","\t","\t\t\t\t\t\tx = dataA[ sort.col ];","\t\t\t\t\t\ty = dataB[ sort.col ];","\t","\t\t\t\t\t\tfn = oExtSort[ sort.type+\"-\"+sort.dir ] || oExtSort[ \"string-\"+sort.dir ];","\t\t\t\t\t\ttest = fn( x, y );","\t\t\t\t\t\tif ( test !== 0 ) {","\t\t\t\t\t\t\treturn test;","\t\t\t\t\t\t}","\t\t\t\t\t}","\t","\t\t\t\t\tx = aiOrig[a];","\t\t\t\t\ty = aiOrig[b];","\t\t\t\t\treturn x<y ? -1 : x>y ? 1 : 0;","\t\t\t\t} );","\t\t\t}","\t\t}","\t","\t\t/* Tell the draw function that we have sorted the data */","\t\toSettings.bSorted = true;","\t}","\t","\t","\tfunction _fnSortAria ( settings )","\t{","\t\tvar label;","\t\tvar nextSort;","\t\tvar columns = settings.aoColumns;","\t\tvar aSort = _fnSortFlatten( settings );","\t\tvar oAria = settings.oLanguage.oAria;","\t","\t\t// ARIA attributes - need to loop all columns, to update all (removing old","\t\t// attributes as needed)","\t\tfor ( var i=0, iLen=columns.length ; i<iLen ; i++ )","\t\t{","\t\t\tvar col = columns[i];","\t\t\tvar asSorting = col.asSorting;","\t\t\tvar sTitle = col.sTitle.replace( /<.*?>/g, \"\" );","\t\t\tvar th = col.nTh;","\t","\t\t\t// IE7 is throwing an error when setting these properties with jQuery's","\t\t\t// attr() and removeAttr() methods...","\t\t\tth.removeAttribute('aria-sort');","\t","\t\t\t/* In ARIA only the first sorting column can be marked as sorting - no multi-sort option */","\t\t\tif ( col.bSortable ) {","\t\t\t\tif ( aSort.length > 0 && aSort[0].col == i ) {","\t\t\t\t\tth.setAttribute('aria-sort', aSort[0].dir==\"asc\" ? \"ascending\" : \"descending\" );","\t\t\t\t\tnextSort = asSorting[ aSort[0].index+1 ] || asSorting[0];","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tnextSort = asSorting[0];","\t\t\t\t}","\t","\t\t\t\tlabel = sTitle + ( nextSort === \"asc\" ?","\t\t\t\t\toAria.sSortAscending :","\t\t\t\t\toAria.sSortDescending","\t\t\t\t);","\t\t\t}","\t\t\telse {","\t\t\t\tlabel = sTitle;","\t\t\t}","\t","\t\t\tth.setAttribute('aria-label', label);","\t\t}","\t}","\t","\t","\t/**","\t * Function to run on user sort request","\t *  @param {object} settings dataTables settings object","\t *  @param {node} attachTo node to attach the handler to","\t *  @param {int} colIdx column sorting index","\t *  @param {boolean} [append=false] Append the requested sort to the existing","\t *    sort if true (i.e. multi-column sort)","\t *  @param {function} [callback] callback function","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnSortListener ( settings, colIdx, append, callback )","\t{","\t\tvar col = settings.aoColumns[ colIdx ];","\t\tvar sorting = settings.aaSorting;","\t\tvar asSorting = col.asSorting;","\t\tvar nextSortIdx;","\t\tvar next = function ( a, overflow ) {","\t\t\tvar idx = a._idx;","\t\t\tif ( idx === undefined ) {","\t\t\t\tidx = $.inArray( a[1], asSorting );","\t\t\t}","\t","\t\t\treturn idx+1 < asSorting.length ?","\t\t\t\tidx+1 :","\t\t\t\toverflow ?","\t\t\t\t\tnull :","\t\t\t\t\t0;","\t\t};","\t","\t\t// Convert to 2D array if needed","\t\tif ( typeof sorting[0] === 'number' ) {","\t\t\tsorting = settings.aaSorting = [ sorting ];","\t\t}","\t","\t\t// If appending the sort then we are multi-column sorting","\t\tif ( append && settings.oFeatures.bSortMulti ) {","\t\t\t// Are we already doing some kind of sort on this column?","\t\t\tvar sortIdx = $.inArray( colIdx, _pluck(sorting, '0') );","\t","\t\t\tif ( sortIdx !== -1 ) {","\t\t\t\t// Yes, modify the sort","\t\t\t\tnextSortIdx = next( sorting[sortIdx], true );","\t","\t\t\t\tif ( nextSortIdx === null && sorting.length === 1 ) {","\t\t\t\t\tnextSortIdx = 0; // can't remove sorting completely","\t\t\t\t}","\t","\t\t\t\tif ( nextSortIdx === null ) {","\t\t\t\t\tsorting.splice( sortIdx, 1 );","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tsorting[sortIdx][1] = asSorting[ nextSortIdx ];","\t\t\t\t\tsorting[sortIdx]._idx = nextSortIdx;","\t\t\t\t}","\t\t\t}","\t\t\telse {","\t\t\t\t// No sort on this column yet","\t\t\t\tsorting.push( [ colIdx, asSorting[0], 0 ] );","\t\t\t\tsorting[sorting.length-1]._idx = 0;","\t\t\t}","\t\t}","\t\telse if ( sorting.length && sorting[0][0] == colIdx ) {","\t\t\t// Single column - already sorting on this column, modify the sort","\t\t\tnextSortIdx = next( sorting[0] );","\t","\t\t\tsorting.length = 1;","\t\t\tsorting[0][1] = asSorting[ nextSortIdx ];","\t\t\tsorting[0]._idx = nextSortIdx;","\t\t}","\t\telse {","\t\t\t// Single column - sort only on this column","\t\t\tsorting.length = 0;","\t\t\tsorting.push( [ colIdx, asSorting[0] ] );","\t\t\tsorting[0]._idx = 0;","\t\t}","\t","\t\t// Run the sort by calling a full redraw","\t\t_fnReDraw( settings );","\t","\t\t// callback used for async user interaction","\t\tif ( typeof callback == 'function' ) {","\t\t\tcallback( settings );","\t\t}","\t}","\t","\t","\t/**","\t * Attach a sort handler (click) to a node","\t *  @param {object} settings dataTables settings object","\t *  @param {node} attachTo node to attach the handler to","\t *  @param {int} colIdx column sorting index","\t *  @param {function} [callback] callback function","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnSortAttachListener ( settings, attachTo, colIdx, callback )","\t{","\t\tvar col = settings.aoColumns[ colIdx ];","\t","\t\t_fnBindAction( attachTo, {}, function (e) {","\t\t\t/* If the column is not sortable - don't to anything */","\t\t\tif ( col.bSortable === false ) {","\t\t\t\treturn;","\t\t\t}","\t","\t\t\t// If processing is enabled use a timeout to allow the processing","\t\t\t// display to be shown - otherwise to it synchronously","\t\t\tif ( settings.oFeatures.bProcessing ) {","\t\t\t\t_fnProcessingDisplay( settings, true );","\t","\t\t\t\tsetTimeout( function() {","\t\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );","\t","\t\t\t\t\t// In server-side processing, the draw callback will remove the","\t\t\t\t\t// processing display","\t\t\t\t\tif ( _fnDataSource( settings ) !== 'ssp' ) {","\t\t\t\t\t\t_fnProcessingDisplay( settings, false );","\t\t\t\t\t}","\t\t\t\t}, 0 );","\t\t\t}","\t\t\telse {","\t\t\t\t_fnSortListener( settings, colIdx, e.shiftKey, callback );","\t\t\t}","\t\t} );","\t}","\t","\t","\t/**","\t * Set the sorting classes on table's body, Note: it is safe to call this function","\t * when bSort and bSortClasses are false","\t *  @param {object} oSettings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnSortingClasses( settings )","\t{","\t\tvar oldSort = settings.aLastSort;","\t\tvar sortClass = settings.oClasses.sSortColumn;","\t\tvar sort = _fnSortFlatten( settings );","\t\tvar features = settings.oFeatures;","\t\tvar i, ien, colIdx;","\t","\t\tif ( features.bSort && features.bSortClasses ) {","\t\t\t// Remove old sorting classes","\t\t\tfor ( i=0, ien=oldSort.length ; i<ien ; i++ ) {","\t\t\t\tcolIdx = oldSort[i].src;","\t","\t\t\t\t// Remove column sorting","\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )","\t\t\t\t\t.removeClass( sortClass + (i<2 ? i+1 : 3) );","\t\t\t}","\t","\t\t\t// Add new column sorting","\t\t\tfor ( i=0, ien=sort.length ; i<ien ; i++ ) {","\t\t\t\tcolIdx = sort[i].src;","\t","\t\t\t\t$( _pluck( settings.aoData, 'anCells', colIdx ) )","\t\t\t\t\t.addClass( sortClass + (i<2 ? i+1 : 3) );","\t\t\t}","\t\t}","\t","\t\tsettings.aLastSort = sort;","\t}","\t","\t","\t// Get the data to sort a column, be it from cache, fresh (populating the","\t// cache), or from a sort formatter","\tfunction _fnSortData( settings, idx )","\t{","\t\t// Custom sorting function - provided by the sort data type","\t\tvar column = settings.aoColumns[ idx ];","\t\tvar customSort = DataTable.ext.order[ column.sSortDataType ];","\t\tvar customData;","\t","\t\tif ( customSort ) {","\t\t\tcustomData = customSort.call( settings.oInstance, settings, idx,","\t\t\t\t_fnColumnIndexToVisible( settings, idx )","\t\t\t);","\t\t}","\t","\t\t// Use / populate cache","\t\tvar row, cellData;","\t\tvar formatter = DataTable.ext.type.order[ column.sType+\"-pre\" ];","\t","\t\tfor ( var i=0, ien=settings.aoData.length ; i<ien ; i++ ) {","\t\t\trow = settings.aoData[i];","\t","\t\t\tif ( ! row._aSortData ) {","\t\t\t\trow._aSortData = [];","\t\t\t}","\t","\t\t\tif ( ! row._aSortData[idx] || customSort ) {","\t\t\t\tcellData = customSort ?","\t\t\t\t\tcustomData[i] : // If there was a custom sort function, use data from there","\t\t\t\t\t_fnGetCellData( settings, i, idx, 'sort' );","\t","\t\t\t\trow._aSortData[ idx ] = formatter ?","\t\t\t\t\tformatter( cellData ) :","\t\t\t\t\tcellData;","\t\t\t}","\t\t}","\t}","\t","\t","\t","\t/**","\t * Save the state of a table","\t *  @param {object} oSettings dataTables settings object","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnSaveState ( settings )","\t{","\t\tif ( !settings.oFeatures.bStateSave || settings.bDestroying )","\t\t{","\t\t\treturn;","\t\t}","\t","\t\t/* Store the interesting variables */","\t\tvar state = {","\t\t\ttime:    +new Date(),","\t\t\tstart:   settings._iDisplayStart,","\t\t\tlength:  settings._iDisplayLength,","\t\t\torder:   $.extend( true, [], settings.aaSorting ),","\t\t\tsearch:  _fnSearchToCamel( settings.oPreviousSearch ),","\t\t\tcolumns: $.map( settings.aoColumns, function ( col, i ) {","\t\t\t\treturn {","\t\t\t\t\tvisible: col.bVisible,","\t\t\t\t\tsearch: _fnSearchToCamel( settings.aoPreSearchCols[i] )","\t\t\t\t};","\t\t\t} )","\t\t};","\t","\t\t_fnCallbackFire( settings, \"aoStateSaveParams\", 'stateSaveParams', [settings, state] );","\t","\t\tsettings.oSavedState = state;","\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, state );","\t}","\t","\t","\t/**","\t * Attempt to load a saved table state","\t *  @param {object} oSettings dataTables settings object","\t *  @param {object} oInit DataTables init object so we can override settings","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnLoadState ( settings, oInit )","\t{","\t\tvar i, ien;","\t\tvar columns = settings.aoColumns;","\t","\t\tif ( ! settings.oFeatures.bStateSave ) {","\t\t\treturn;","\t\t}","\t","\t\tvar state = settings.fnStateLoadCallback.call( settings.oInstance, settings );","\t\tif ( ! state || ! state.time ) {","\t\t\treturn;","\t\t}","\t","\t\t/* Allow custom and plug-in manipulation functions to alter the saved data set and","\t\t * cancelling of loading by returning false","\t\t */","\t\tvar abStateLoad = _fnCallbackFire( settings, 'aoStateLoadParams', 'stateLoadParams', [settings, state] );","\t\tif ( $.inArray( false, abStateLoad ) !== -1 ) {","\t\t\treturn;","\t\t}","\t","\t\t/* Reject old data */","\t\tvar duration = settings.iStateDuration;","\t\tif ( duration > 0 && state.time < +new Date() - (duration*1000) ) {","\t\t\treturn;","\t\t}","\t","\t\t// Number of columns have changed - all bets are off, no restore of settings","\t\tif ( columns.length !== state.columns.length ) {","\t\t\treturn;","\t\t}","\t","\t\t// Store the saved state so it might be accessed at any time","\t\tsettings.oLoadedState = $.extend( true, {}, state );","\t","\t\t// Restore key features - todo - for 1.11 this needs to be done by","\t\t// subscribed events","\t\tif ( state.start !== undefined ) {","\t\t\tsettings._iDisplayStart    = state.start;","\t\t\tsettings.iInitDisplayStart = state.start;","\t\t}","\t\tif ( state.length !== undefined ) {","\t\t\tsettings._iDisplayLength   = state.length;","\t\t}","\t","\t\t// Order","\t\tif ( state.order !== undefined ) {","\t\t\tsettings.aaSorting = [];","\t\t\t$.each( state.order, function ( i, col ) {","\t\t\t\tsettings.aaSorting.push( col[0] >= columns.length ?","\t\t\t\t\t[ 0, col[1] ] :","\t\t\t\t\tcol","\t\t\t\t);","\t\t\t} );","\t\t}","\t","\t\t// Search","\t\tif ( state.search !== undefined ) {","\t\t\t$.extend( settings.oPreviousSearch, _fnSearchToHung( state.search ) );","\t\t}","\t","\t\t// Columns","\t\tfor ( i=0, ien=state.columns.length ; i<ien ; i++ ) {","\t\t\tvar col = state.columns[i];","\t","\t\t\t// Visibility","\t\t\tif ( col.visible !== undefined ) {","\t\t\t\tcolumns[i].bVisible = col.visible;","\t\t\t}","\t","\t\t\t// Search","\t\t\tif ( col.search !== undefined ) {","\t\t\t\t$.extend( settings.aoPreSearchCols[i], _fnSearchToHung( col.search ) );","\t\t\t}","\t\t}","\t","\t\t_fnCallbackFire( settings, 'aoStateLoaded', 'stateLoaded', [settings, state] );","\t}","\t","\t","\t/**","\t * Return the settings object for a particular table","\t *  @param {node} table table we are using as a dataTable","\t *  @returns {object} Settings object - or null if not found","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnSettingsFromNode ( table )","\t{","\t\tvar settings = DataTable.settings;","\t\tvar idx = $.inArray( table, _pluck( settings, 'nTable' ) );","\t","\t\treturn idx !== -1 ?","\t\t\tsettings[ idx ] :","\t\t\tnull;","\t}","\t","\t","\t/**","\t * Log an error message","\t *  @param {object} settings dataTables settings object","\t *  @param {int} level log error messages, or display them to the user","\t *  @param {string} msg error message","\t *  @param {int} tn Technical note id to get more information about the error.","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnLog( settings, level, msg, tn )","\t{","\t\tmsg = 'DataTables warning: '+","\t\t\t(settings!==null ? 'table id='+settings.sTableId+' - ' : '')+msg;","\t","\t\tif ( tn ) {","\t\t\tmsg += '. For more information about this error, please see '+","\t\t\t'http://datatables.net/tn/'+tn;","\t\t}","\t","\t\tif ( ! level  ) {","\t\t\t// Backwards compatibility pre 1.10","\t\t\tvar ext = DataTable.ext;","\t\t\tvar type = ext.sErrMode || ext.errMode;","\t","\t\t\t_fnCallbackFire( settings, null, 'error', [ settings, tn, msg ] );","\t","\t\t\tif ( type == 'alert' ) {","\t\t\t\talert( msg );","\t\t\t}","\t\t\telse if ( type == 'throw' ) {","\t\t\t\tthrow new Error(msg);","\t\t\t}","\t\t\telse if ( typeof type == 'function' ) {","\t\t\t\ttype( settings, tn, msg );","\t\t\t}","\t\t}","\t\telse if ( window.console && console.log ) {","\t\t\tconsole.log( msg );","\t\t}","\t}","\t","\t","\t/**","\t * See if a property is defined on one object, if so assign it to the other object","\t *  @param {object} ret target object","\t *  @param {object} src source object","\t *  @param {string} name property","\t *  @param {string} [mappedName] name to map too - optional, name used if not given","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnMap( ret, src, name, mappedName )","\t{","\t\tif ( $.isArray( name ) ) {","\t\t\t$.each( name, function (i, val) {","\t\t\t\tif ( $.isArray( val ) ) {","\t\t\t\t\t_fnMap( ret, src, val[0], val[1] );","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\t_fnMap( ret, src, val );","\t\t\t\t}","\t\t\t} );","\t","\t\t\treturn;","\t\t}","\t","\t\tif ( mappedName === undefined ) {","\t\t\tmappedName = name;","\t\t}","\t","\t\tif ( src[name] !== undefined ) {","\t\t\tret[mappedName] = src[name];","\t\t}","\t}","\t","\t","\t/**","\t * Extend objects - very similar to jQuery.extend, but deep copy objects, and","\t * shallow copy arrays. The reason we need to do this, is that we don't want to","\t * deep copy array init values (such as aaSorting) since the dev wouldn't be","\t * able to override them, but we do want to deep copy arrays.","\t *  @param {object} out Object to extend","\t *  @param {object} extender Object from which the properties will be applied to","\t *      out","\t *  @param {boolean} breakRefs If true, then arrays will be sliced to take an","\t *      independent copy with the exception of the `data` or `aaData` parameters","\t *      if they are present. This is so you can pass in a collection to","\t *      DataTables and have that used as your data source without breaking the","\t *      references","\t *  @returns {object} out Reference, just for convenience - out === the return.","\t *  @memberof DataTable#oApi","\t *  @todo This doesn't take account of arrays inside the deep copied objects.","\t */","\tfunction _fnExtend( out, extender, breakRefs )","\t{","\t\tvar val;","\t","\t\tfor ( var prop in extender ) {","\t\t\tif ( extender.hasOwnProperty(prop) ) {","\t\t\t\tval = extender[prop];","\t","\t\t\t\tif ( $.isPlainObject( val ) ) {","\t\t\t\t\tif ( ! $.isPlainObject( out[prop] ) ) {","\t\t\t\t\t\tout[prop] = {};","\t\t\t\t\t}","\t\t\t\t\t$.extend( true, out[prop], val );","\t\t\t\t}","\t\t\t\telse if ( breakRefs && prop !== 'data' && prop !== 'aaData' && $.isArray(val) ) {","\t\t\t\t\tout[prop] = val.slice();","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\tout[prop] = val;","\t\t\t\t}","\t\t\t}","\t\t}","\t","\t\treturn out;","\t}","\t","\t","\t/**","\t * Bind an event handers to allow a click or return key to activate the callback.","\t * This is good for accessibility since a return on the keyboard will have the","\t * same effect as a click, if the element has focus.","\t *  @param {element} n Element to bind the action to","\t *  @param {object} oData Data object to pass to the triggered function","\t *  @param {function} fn Callback function for when the event is triggered","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnBindAction( n, oData, fn )","\t{","\t\t$(n)","\t\t\t.bind( 'click.DT', oData, function (e) {","\t\t\t\t\tn.blur(); // Remove focus outline for mouse users","\t\t\t\t\tfn(e);","\t\t\t\t} )","\t\t\t.bind( 'keypress.DT', oData, function (e){","\t\t\t\t\tif ( e.which === 13 ) {","\t\t\t\t\t\te.preventDefault();","\t\t\t\t\t\tfn(e);","\t\t\t\t\t}","\t\t\t\t} )","\t\t\t.bind( 'selectstart.DT', function () {","\t\t\t\t\t/* Take the brutal approach to cancelling text selection */","\t\t\t\t\treturn false;","\t\t\t\t} );","\t}","\t","\t","\t/**","\t * Register a callback function. Easily allows a callback function to be added to","\t * an array store of callback functions that can then all be called together.","\t *  @param {object} oSettings dataTables settings object","\t *  @param {string} sStore Name of the array storage for the callbacks in oSettings","\t *  @param {function} fn Function to be called back","\t *  @param {string} sName Identifying name for the callback (i.e. a label)","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnCallbackReg( oSettings, sStore, fn, sName )","\t{","\t\tif ( fn )","\t\t{","\t\t\toSettings[sStore].push( {","\t\t\t\t\"fn\": fn,","\t\t\t\t\"sName\": sName","\t\t\t} );","\t\t}","\t}","\t","\t","\t/**","\t * Fire callback functions and trigger events. Note that the loop over the","\t * callback array store is done backwards! Further note that you do not want to","\t * fire off triggers in time sensitive applications (for example cell creation)","\t * as its slow.","\t *  @param {object} settings dataTables settings object","\t *  @param {string} callbackArr Name of the array storage for the callbacks in","\t *      oSettings","\t *  @param {string} event Name of the jQuery custom event to trigger. If null no","\t *      trigger is fired","\t *  @param {array} args Array of arguments to pass to the callback function /","\t *      trigger","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnCallbackFire( settings, callbackArr, e, args )","\t{","\t\tvar ret = [];","\t","\t\tif ( callbackArr ) {","\t\t\tret = $.map( settings[callbackArr].slice().reverse(), function (val, i) {","\t\t\t\treturn val.fn.apply( settings.oInstance, args );","\t\t\t} );","\t\t}","\t","\t\tif ( e !== null ) {","\t\t\t$(settings.nTable).trigger( e+'.dt', args );","\t\t}","\t","\t\treturn ret;","\t}","\t","\t","\tfunction _fnLengthOverflow ( settings )","\t{","\t\tvar","\t\t\tstart = settings._iDisplayStart,","\t\t\tend = settings.fnDisplayEnd(),","\t\t\tlen = settings._iDisplayLength;","\t","\t\t/* If we have space to show extra rows (backing up from the end point - then do so */","\t\tif ( start >= end )","\t\t{","\t\t\tstart = end - len;","\t\t}","\t","\t\t// Keep the start record on the current page","\t\tstart -= (start % len);","\t","\t\tif ( len === -1 || start < 0 )","\t\t{","\t\t\tstart = 0;","\t\t}","\t","\t\tsettings._iDisplayStart = start;","\t}","\t","\t","\tfunction _fnRenderer( settings, type )","\t{","\t\tvar renderer = settings.renderer;","\t\tvar host = DataTable.ext.renderer[type];","\t","\t\tif ( $.isPlainObject( renderer ) && renderer[type] ) {","\t\t\t// Specific renderer for this type. If available use it, otherwise use","\t\t\t// the default.","\t\t\treturn host[renderer[type]] || host._;","\t\t}","\t\telse if ( typeof renderer === 'string' ) {","\t\t\t// Common renderer - if there is one available for this type use it,","\t\t\t// otherwise use the default","\t\t\treturn host[renderer] || host._;","\t\t}","\t","\t\t// Use the default","\t\treturn host._;","\t}","\t","\t","\t/**","\t * Detect the data source being used for the table. Used to simplify the code","\t * a little (ajax) and to make it compress a little smaller.","\t *","\t *  @param {object} settings dataTables settings object","\t *  @returns {string} Data source","\t *  @memberof DataTable#oApi","\t */","\tfunction _fnDataSource ( settings )","\t{","\t\tif ( settings.oFeatures.bServerSide ) {","\t\t\treturn 'ssp';","\t\t}","\t\telse if ( settings.ajax || settings.sAjaxSource ) {","\t\t\treturn 'ajax';","\t\t}","\t\treturn 'dom';","\t}","\t","","\tDataTable = function( options )","\t{","\t\t/**","\t\t * Perform a jQuery selector action on the table's TR elements (from the tbody) and","\t\t * return the resulting jQuery object.","\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on","\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included","\t\t *  @param {string} [oOpts.filter=none] Select TR elements that meet the current filter","\t\t *    criterion (\"applied\") or all TR elements (i.e. no filter).","\t\t *  @param {string} [oOpts.order=current] Order of the TR elements in the processed array.","\t\t *    Can be either 'current', whereby the current sorting of the table is used, or","\t\t *    'original' whereby the original order the data was read into the table is used.","\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page","\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be","\t\t *    'current' and filter is 'applied', regardless of what they might be given as.","\t\t *  @returns {object} jQuery object, filtered by the given selector.","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *","\t\t *      // Highlight every second row","\t\t *      oTable.$('tr:odd').css('backgroundColor', 'blue');","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *","\t\t *      // Filter to rows with 'Webkit' in them, add a background colour and then","\t\t *      // remove the filter, thus highlighting the 'Webkit' rows only.","\t\t *      oTable.fnFilter('Webkit');","\t\t *      oTable.$('tr', {\"search\": \"applied\"}).css('backgroundColor', 'blue');","\t\t *      oTable.fnFilter('');","\t\t *    } );","\t\t */","\t\tthis.$ = function ( sSelector, oOpts )","\t\t{","\t\t\treturn this.api(true).$( sSelector, oOpts );","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Almost identical to $ in operation, but in this case returns the data for the matched","\t\t * rows - as such, the jQuery selector used should match TR row nodes or TD/TH cell nodes","\t\t * rather than any descendants, so the data can be obtained for the row/cell. If matching","\t\t * rows are found, the data returned is the original data array/object that was used to","\t\t * create the row (or a generated array if from a DOM source).","\t\t *","\t\t * This method is often useful in-combination with $ where both functions are given the","\t\t * same parameters and the array indexes will match identically.","\t\t *  @param {string|node|jQuery} sSelector jQuery selector or node collection to act on","\t\t *  @param {object} [oOpts] Optional parameters for modifying the rows to be included","\t\t *  @param {string} [oOpts.filter=none] Select elements that meet the current filter","\t\t *    criterion (\"applied\") or all elements (i.e. no filter).","\t\t *  @param {string} [oOpts.order=current] Order of the data in the processed array.","\t\t *    Can be either 'current', whereby the current sorting of the table is used, or","\t\t *    'original' whereby the original order the data was read into the table is used.","\t\t *  @param {string} [oOpts.page=all] Limit the selection to the currently displayed page","\t\t *    (\"current\") or not (\"all\"). If 'current' is given, then order is assumed to be","\t\t *    'current' and filter is 'applied', regardless of what they might be given as.","\t\t *  @returns {array} Data for the matched elements. If any elements, as a result of the","\t\t *    selector, were not TR, TD or TH elements in the DataTable, they will have a null","\t\t *    entry in the array.","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *","\t\t *      // Get the data from the first row in the table","\t\t *      var data = oTable._('tr:first');","\t\t *","\t\t *      // Do something useful with the data","\t\t *      alert( \"First cell is: \"+data[0] );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *","\t\t *      // Filter to 'Webkit' and get all data for","\t\t *      oTable.fnFilter('Webkit');","\t\t *      var data = oTable._('tr', {\"search\": \"applied\"});","\t\t *","\t\t *      // Do something with the data","\t\t *      alert( data.length+\" rows matched the search\" );","\t\t *    } );","\t\t */","\t\tthis._ = function ( sSelector, oOpts )","\t\t{","\t\t\treturn this.api(true).rows( sSelector, oOpts ).data();","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Create a DataTables Api instance, with the currently selected tables for","\t\t * the Api's context.","\t\t * @param {boolean} [traditional=false] Set the API instance's context to be","\t\t *   only the table referred to by the `DataTable.ext.iApiIndex` option, as was","\t\t *   used in the API presented by DataTables 1.9- (i.e. the traditional mode),","\t\t *   or if all tables captured in the jQuery object should be used.","\t\t * @return {DataTables.Api}","\t\t */","\t\tthis.api = function ( traditional )","\t\t{","\t\t\treturn traditional ?","\t\t\t\tnew _Api(","\t\t\t\t\t_fnSettingsFromNode( this[ _ext.iApiIndex ] )","\t\t\t\t) :","\t\t\t\tnew _Api( this );","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Add a single new row or multiple rows of data to the table. Please note","\t\t * that this is suitable for client-side processing only - if you are using","\t\t * server-side processing (i.e. \"bServerSide\": true), then to add data, you","\t\t * must add it to the data source, i.e. the server-side, through an Ajax call.","\t\t *  @param {array|object} data The data to be added to the table. This can be:","\t\t *    <ul>","\t\t *      <li>1D array of data - add a single row with the data provided</li>","\t\t *      <li>2D array of arrays - add multiple rows in a single call</li>","\t\t *      <li>object - data object when using <i>mData</i></li>","\t\t *      <li>array of objects - multiple data objects when using <i>mData</i></li>","\t\t *    </ul>","\t\t *  @param {bool} [redraw=true] redraw the table or not","\t\t *  @returns {array} An array of integers, representing the list of indexes in","\t\t *    <i>aoData</i> ({@link DataTable.models.oSettings}) that have been added to","\t\t *    the table.","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    // Global var for counter","\t\t *    var giCount = 2;","\t\t *","\t\t *    $(document).ready(function() {","\t\t *      $('#example').dataTable();","\t\t *    } );","\t\t *","\t\t *    function fnClickAddRow() {","\t\t *      $('#example').dataTable().fnAddData( [","\t\t *        giCount+\".1\",","\t\t *        giCount+\".2\",","\t\t *        giCount+\".3\",","\t\t *        giCount+\".4\" ]","\t\t *      );","\t\t *","\t\t *      giCount++;","\t\t *    }","\t\t */","\t\tthis.fnAddData = function( data, redraw )","\t\t{","\t\t\tvar api = this.api( true );","\t\t","\t\t\t/* Check if we want to add multiple rows or not */","\t\t\tvar rows = $.isArray(data) && ( $.isArray(data[0]) || $.isPlainObject(data[0]) ) ?","\t\t\t\tapi.rows.add( data ) :","\t\t\t\tapi.row.add( data );","\t\t","\t\t\tif ( redraw === undefined || redraw ) {","\t\t\t\tapi.draw();","\t\t\t}","\t\t","\t\t\treturn rows.flatten().toArray();","\t\t};","\t\t","\t\t","\t\t/**","\t\t * This function will make DataTables recalculate the column sizes, based on the data","\t\t * contained in the table and the sizes applied to the columns (in the DOM, CSS or","\t\t * through the sWidth parameter). This can be useful when the width of the table's","\t\t * parent element changes (for example a window resize).","\t\t *  @param {boolean} [bRedraw=true] Redraw the table or not, you will typically want to","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable( {","\t\t *        \"sScrollY\": \"200px\",","\t\t *        \"bPaginate\": false","\t\t *      } );","\t\t *","\t\t *      $(window).bind('resize', function () {","\t\t *        oTable.fnAdjustColumnSizing();","\t\t *      } );","\t\t *    } );","\t\t */","\t\tthis.fnAdjustColumnSizing = function ( bRedraw )","\t\t{","\t\t\tvar api = this.api( true ).columns.adjust();","\t\t\tvar settings = api.settings()[0];","\t\t\tvar scroll = settings.oScroll;","\t\t","\t\t\tif ( bRedraw === undefined || bRedraw ) {","\t\t\t\tapi.draw( false );","\t\t\t}","\t\t\telse if ( scroll.sX !== \"\" || scroll.sY !== \"\" ) {","\t\t\t\t/* If not redrawing, but scrolling, we want to apply the new column sizes anyway */","\t\t\t\t_fnScrollDraw( settings );","\t\t\t}","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Quickly and simply clear a table","\t\t *  @param {bool} [bRedraw=true] redraw the table or not","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *","\t\t *      // Immediately 'nuke' the current rows (perhaps waiting for an Ajax callback...)","\t\t *      oTable.fnClearTable();","\t\t *    } );","\t\t */","\t\tthis.fnClearTable = function( bRedraw )","\t\t{","\t\t\tvar api = this.api( true ).clear();","\t\t","\t\t\tif ( bRedraw === undefined || bRedraw ) {","\t\t\t\tapi.draw();","\t\t\t}","\t\t};","\t\t","\t\t","\t\t/**","\t\t * The exact opposite of 'opening' a row, this function will close any rows which","\t\t * are currently 'open'.","\t\t *  @param {node} nTr the table row to 'close'","\t\t *  @returns {int} 0 on success, or 1 if failed (can't find the row)","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable;","\t\t *","\t\t *      // 'open' an information row when a row is clicked on","\t\t *      $('#example tbody tr').click( function () {","\t\t *        if ( oTable.fnIsOpen(this) ) {","\t\t *          oTable.fnClose( this );","\t\t *        } else {","\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );","\t\t *        }","\t\t *      } );","\t\t *","\t\t *      oTable = $('#example').dataTable();","\t\t *    } );","\t\t */","\t\tthis.fnClose = function( nTr )","\t\t{","\t\t\tthis.api( true ).row( nTr ).child.hide();","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Remove a row for the table","\t\t *  @param {mixed} target The index of the row from aoData to be deleted, or","\t\t *    the TR element you want to delete","\t\t *  @param {function|null} [callBack] Callback function","\t\t *  @param {bool} [redraw=true] Redraw the table or not","\t\t *  @returns {array} The row that was deleted","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *","\t\t *      // Immediately remove the first row","\t\t *      oTable.fnDeleteRow( 0 );","\t\t *    } );","\t\t */","\t\tthis.fnDeleteRow = function( target, callback, redraw )","\t\t{","\t\t\tvar api = this.api( true );","\t\t\tvar rows = api.rows( target );","\t\t\tvar settings = rows.settings()[0];","\t\t\tvar data = settings.aoData[ rows[0][0] ];","\t\t","\t\t\trows.remove();","\t\t","\t\t\tif ( callback ) {","\t\t\t\tcallback.call( this, settings, data );","\t\t\t}","\t\t","\t\t\tif ( redraw === undefined || redraw ) {","\t\t\t\tapi.draw();","\t\t\t}","\t\t","\t\t\treturn data;","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Restore the table to it's original state in the DOM by removing all of DataTables","\t\t * enhancements, alterations to the DOM structure of the table and event listeners.","\t\t *  @param {boolean} [remove=false] Completely remove the table from the DOM","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      // This example is fairly pointless in reality, but shows how fnDestroy can be used","\t\t *      var oTable = $('#example').dataTable();","\t\t *      oTable.fnDestroy();","\t\t *    } );","\t\t */","\t\tthis.fnDestroy = function ( remove )","\t\t{","\t\t\tthis.api( true ).destroy( remove );","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Redraw the table","\t\t *  @param {bool} [complete=true] Re-filter and resort (if enabled) the table before the draw.","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *","\t\t *      // Re-draw the table - you wouldn't want to do it here, but it's an example :-)","\t\t *      oTable.fnDraw();","\t\t *    } );","\t\t */","\t\tthis.fnDraw = function( complete )","\t\t{","\t\t\t// Note that this isn't an exact match to the old call to _fnDraw - it takes","\t\t\t// into account the new data, but can hold position.","\t\t\tthis.api( true ).draw( complete );","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Filter the input based on data","\t\t *  @param {string} sInput String to filter the table on","\t\t *  @param {int|null} [iColumn] Column to limit filtering to","\t\t *  @param {bool} [bRegex=false] Treat as regular expression or not","\t\t *  @param {bool} [bSmart=true] Perform smart filtering or not","\t\t *  @param {bool} [bShowGlobal=true] Show the input global filter in it's input box(es)","\t\t *  @param {bool} [bCaseInsensitive=true] Do case-insensitive matching (true) or not (false)","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *","\t\t *      // Sometime later - filter...","\t\t *      oTable.fnFilter( 'test string' );","\t\t *    } );","\t\t */","\t\tthis.fnFilter = function( sInput, iColumn, bRegex, bSmart, bShowGlobal, bCaseInsensitive )","\t\t{","\t\t\tvar api = this.api( true );","\t\t","\t\t\tif ( iColumn === null || iColumn === undefined ) {","\t\t\t\tapi.search( sInput, bRegex, bSmart, bCaseInsensitive );","\t\t\t}","\t\t\telse {","\t\t\t\tapi.column( iColumn ).search( sInput, bRegex, bSmart, bCaseInsensitive );","\t\t\t}","\t\t","\t\t\tapi.draw();","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Get the data for the whole table, an individual row or an individual cell based on the","\t\t * provided parameters.","\t\t *  @param {int|node} [src] A TR row node, TD/TH cell node or an integer. If given as","\t\t *    a TR node then the data source for the whole row will be returned. If given as a","\t\t *    TD/TH cell node then iCol will be automatically calculated and the data for the","\t\t *    cell returned. If given as an integer, then this is treated as the aoData internal","\t\t *    data index for the row (see fnGetPosition) and the data for that row used.","\t\t *  @param {int} [col] Optional column index that you want the data of.","\t\t *  @returns {array|object|string} If mRow is undefined, then the data for all rows is","\t\t *    returned. If mRow is defined, just data for that row, and is iCol is","\t\t *    defined, only data for the designated cell is returned.","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    // Row data","\t\t *    $(document).ready(function() {","\t\t *      oTable = $('#example').dataTable();","\t\t *","\t\t *      oTable.$('tr').click( function () {","\t\t *        var data = oTable.fnGetData( this );","\t\t *        // ... do something with the array / object of data for the row","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Individual cell data","\t\t *    $(document).ready(function() {","\t\t *      oTable = $('#example').dataTable();","\t\t *","\t\t *      oTable.$('td').click( function () {","\t\t *        var sData = oTable.fnGetData( this );","\t\t *        alert( 'The cell clicked on had the value of '+sData );","\t\t *      } );","\t\t *    } );","\t\t */","\t\tthis.fnGetData = function( src, col )","\t\t{","\t\t\tvar api = this.api( true );","\t\t","\t\t\tif ( src !== undefined ) {","\t\t\t\tvar type = src.nodeName ? src.nodeName.toLowerCase() : '';","\t\t","\t\t\t\treturn col !== undefined || type == 'td' || type == 'th' ?","\t\t\t\t\tapi.cell( src, col ).data() :","\t\t\t\t\tapi.row( src ).data() || null;","\t\t\t}","\t\t","\t\t\treturn api.data().toArray();","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Get an array of the TR nodes that are used in the table's body. Note that you will","\t\t * typically want to use the '$' API method in preference to this as it is more","\t\t * flexible.","\t\t *  @param {int} [iRow] Optional row index for the TR element you want","\t\t *  @returns {array|node} If iRow is undefined, returns an array of all TR elements","\t\t *    in the table's body, or iRow is defined, just the TR element requested.","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *","\t\t *      // Get the nodes from the table","\t\t *      var nNodes = oTable.fnGetNodes( );","\t\t *    } );","\t\t */","\t\tthis.fnGetNodes = function( iRow )","\t\t{","\t\t\tvar api = this.api( true );","\t\t","\t\t\treturn iRow !== undefined ?","\t\t\t\tapi.row( iRow ).node() :","\t\t\t\tapi.rows().nodes().flatten().toArray();","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Get the array indexes of a particular cell from it's DOM element","\t\t * and column index including hidden columns","\t\t *  @param {node} node this can either be a TR, TD or TH in the table's body","\t\t *  @returns {int} If nNode is given as a TR, then a single index is returned, or","\t\t *    if given as a cell, an array of [row index, column index (visible),","\t\t *    column index (all)] is given.","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      $('#example tbody td').click( function () {","\t\t *        // Get the position of the current data from the node","\t\t *        var aPos = oTable.fnGetPosition( this );","\t\t *","\t\t *        // Get the data array for this row","\t\t *        var aData = oTable.fnGetData( aPos[0] );","\t\t *","\t\t *        // Update the data array and return the value","\t\t *        aData[ aPos[1] ] = 'clicked';","\t\t *        this.innerHTML = 'clicked';","\t\t *      } );","\t\t *","\t\t *      // Init DataTables","\t\t *      oTable = $('#example').dataTable();","\t\t *    } );","\t\t */","\t\tthis.fnGetPosition = function( node )","\t\t{","\t\t\tvar api = this.api( true );","\t\t\tvar nodeName = node.nodeName.toUpperCase();","\t\t","\t\t\tif ( nodeName == 'TR' ) {","\t\t\t\treturn api.row( node ).index();","\t\t\t}","\t\t\telse if ( nodeName == 'TD' || nodeName == 'TH' ) {","\t\t\t\tvar cell = api.cell( node ).index();","\t\t","\t\t\t\treturn [","\t\t\t\t\tcell.row,","\t\t\t\t\tcell.columnVisible,","\t\t\t\t\tcell.column","\t\t\t\t];","\t\t\t}","\t\t\treturn null;","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Check to see if a row is 'open' or not.","\t\t *  @param {node} nTr the table row to check","\t\t *  @returns {boolean} true if the row is currently open, false otherwise","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable;","\t\t *","\t\t *      // 'open' an information row when a row is clicked on","\t\t *      $('#example tbody tr').click( function () {","\t\t *        if ( oTable.fnIsOpen(this) ) {","\t\t *          oTable.fnClose( this );","\t\t *        } else {","\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );","\t\t *        }","\t\t *      } );","\t\t *","\t\t *      oTable = $('#example').dataTable();","\t\t *    } );","\t\t */","\t\tthis.fnIsOpen = function( nTr )","\t\t{","\t\t\treturn this.api( true ).row( nTr ).child.isShown();","\t\t};","\t\t","\t\t","\t\t/**","\t\t * This function will place a new row directly after a row which is currently","\t\t * on display on the page, with the HTML contents that is passed into the","\t\t * function. This can be used, for example, to ask for confirmation that a","\t\t * particular record should be deleted.","\t\t *  @param {node} nTr The table row to 'open'","\t\t *  @param {string|node|jQuery} mHtml The HTML to put into the row","\t\t *  @param {string} sClass Class to give the new TD cell","\t\t *  @returns {node} The row opened. Note that if the table row passed in as the","\t\t *    first parameter, is not found in the table, this method will silently","\t\t *    return.","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable;","\t\t *","\t\t *      // 'open' an information row when a row is clicked on","\t\t *      $('#example tbody tr').click( function () {","\t\t *        if ( oTable.fnIsOpen(this) ) {","\t\t *          oTable.fnClose( this );","\t\t *        } else {","\t\t *          oTable.fnOpen( this, \"Temporary row opened\", \"info_row\" );","\t\t *        }","\t\t *      } );","\t\t *","\t\t *      oTable = $('#example').dataTable();","\t\t *    } );","\t\t */","\t\tthis.fnOpen = function( nTr, mHtml, sClass )","\t\t{","\t\t\treturn this.api( true )","\t\t\t\t.row( nTr )","\t\t\t\t.child( mHtml, sClass )","\t\t\t\t.show()","\t\t\t\t.child()[0];","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Change the pagination - provides the internal logic for pagination in a simple API","\t\t * function. With this function you can have a DataTables table go to the next,","\t\t * previous, first or last pages.","\t\t *  @param {string|int} mAction Paging action to take: \"first\", \"previous\", \"next\" or \"last\"","\t\t *    or page number to jump to (integer), note that page 0 is the first page.","\t\t *  @param {bool} [bRedraw=true] Redraw the table or not","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *      oTable.fnPageChange( 'next' );","\t\t *    } );","\t\t */","\t\tthis.fnPageChange = function ( mAction, bRedraw )","\t\t{","\t\t\tvar api = this.api( true ).page( mAction );","\t\t","\t\t\tif ( bRedraw === undefined || bRedraw ) {","\t\t\t\tapi.draw(false);","\t\t\t}","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Show a particular column","\t\t *  @param {int} iCol The column whose display should be changed","\t\t *  @param {bool} bShow Show (true) or hide (false) the column","\t\t *  @param {bool} [bRedraw=true] Redraw the table or not","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *","\t\t *      // Hide the second column after initialisation","\t\t *      oTable.fnSetColumnVis( 1, false );","\t\t *    } );","\t\t */","\t\tthis.fnSetColumnVis = function ( iCol, bShow, bRedraw )","\t\t{","\t\t\tvar api = this.api( true ).column( iCol ).visible( bShow );","\t\t","\t\t\tif ( bRedraw === undefined || bRedraw ) {","\t\t\t\tapi.columns.adjust().draw();","\t\t\t}","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Get the settings for a particular table for external manipulation","\t\t *  @returns {object} DataTables settings object. See","\t\t *    {@link DataTable.models.oSettings}","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *      var oSettings = oTable.fnSettings();","\t\t *","\t\t *      // Show an example parameter from the settings","\t\t *      alert( oSettings._iDisplayStart );","\t\t *    } );","\t\t */","\t\tthis.fnSettings = function()","\t\t{","\t\t\treturn _fnSettingsFromNode( this[_ext.iApiIndex] );","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Sort the table by a particular column","\t\t *  @param {int} iCol the data index to sort on. Note that this will not match the","\t\t *    'display index' if you have hidden data entries","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *","\t\t *      // Sort immediately with columns 0 and 1","\t\t *      oTable.fnSort( [ [0,'asc'], [1,'asc'] ] );","\t\t *    } );","\t\t */","\t\tthis.fnSort = function( aaSort )","\t\t{","\t\t\tthis.api( true ).order( aaSort ).draw();","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Attach a sort listener to an element for a given column","\t\t *  @param {node} nNode the element to attach the sort listener to","\t\t *  @param {int} iColumn the column that a click on this node will sort on","\t\t *  @param {function} [fnCallback] callback function when sort is run","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *","\t\t *      // Sort on column 1, when 'sorter' is clicked on","\t\t *      oTable.fnSortListener( document.getElementById('sorter'), 1 );","\t\t *    } );","\t\t */","\t\tthis.fnSortListener = function( nNode, iColumn, fnCallback )","\t\t{","\t\t\tthis.api( true ).order.listener( nNode, iColumn, fnCallback );","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Update a table cell or row - this method will accept either a single value to","\t\t * update the cell with, an array of values with one element for each column or","\t\t * an object in the same format as the original data source. The function is","\t\t * self-referencing in order to make the multi column updates easier.","\t\t *  @param {object|array|string} mData Data to update the cell/row with","\t\t *  @param {node|int} mRow TR element you want to update or the aoData index","\t\t *  @param {int} [iColumn] The column to update, give as null or undefined to","\t\t *    update a whole row.","\t\t *  @param {bool} [bRedraw=true] Redraw the table or not","\t\t *  @param {bool} [bAction=true] Perform pre-draw actions or not","\t\t *  @returns {int} 0 on success, 1 on error","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *      oTable.fnUpdate( 'Example update', 0, 0 ); // Single cell","\t\t *      oTable.fnUpdate( ['a', 'b', 'c', 'd', 'e'], $('tbody tr')[0] ); // Row","\t\t *    } );","\t\t */","\t\tthis.fnUpdate = function( mData, mRow, iColumn, bRedraw, bAction )","\t\t{","\t\t\tvar api = this.api( true );","\t\t","\t\t\tif ( iColumn === undefined || iColumn === null ) {","\t\t\t\tapi.row( mRow ).data( mData );","\t\t\t}","\t\t\telse {","\t\t\t\tapi.cell( mRow, iColumn ).data( mData );","\t\t\t}","\t\t","\t\t\tif ( bAction === undefined || bAction ) {","\t\t\t\tapi.columns.adjust();","\t\t\t}","\t\t","\t\t\tif ( bRedraw === undefined || bRedraw ) {","\t\t\t\tapi.draw();","\t\t\t}","\t\t\treturn 0;","\t\t};","\t\t","\t\t","\t\t/**","\t\t * Provide a common method for plug-ins to check the version of DataTables being used, in order","\t\t * to ensure compatibility.","\t\t *  @param {string} sVersion Version string to check for, in the format \"X.Y.Z\". Note that the","\t\t *    formats \"X\" and \"X.Y\" are also acceptable.","\t\t *  @returns {boolean} true if this version of DataTables is greater or equal to the required","\t\t *    version, or false if this version of DataTales is not suitable","\t\t *  @method","\t\t *  @dtopt API","\t\t *  @deprecated Since v1.10","\t\t *","\t\t *  @example","\t\t *    $(document).ready(function() {","\t\t *      var oTable = $('#example').dataTable();","\t\t *      alert( oTable.fnVersionCheck( '1.9.0' ) );","\t\t *    } );","\t\t */","\t\tthis.fnVersionCheck = _ext.fnVersionCheck;","\t\t","","\t\tvar _that = this;","\t\tvar emptyInit = options === undefined;","\t\tvar len = this.length;","","\t\tif ( emptyInit ) {","\t\t\toptions = {};","\t\t}","","\t\tthis.oApi = this.internal = _ext.internal;","","\t\t// Extend with old style plug-in API methods","\t\tfor ( var fn in DataTable.ext.internal ) {","\t\t\tif ( fn ) {","\t\t\t\tthis[fn] = _fnExternApiFunc(fn);","\t\t\t}","\t\t}","","\t\tthis.each(function() {","\t\t\t// For each initialisation we want to give it a clean initialisation","\t\t\t// object that can be bashed around","\t\t\tvar o = {};","\t\t\tvar oInit = len > 1 ? // optimisation for single table case","\t\t\t\t_fnExtend( o, options, true ) :","\t\t\t\toptions;","","\t\t\t/*global oInit,_that,emptyInit*/","\t\t\tvar i=0, iLen, j, jLen, k, kLen;","\t\t\tvar sId = this.getAttribute( 'id' );","\t\t\tvar bInitHandedOff = false;","\t\t\tvar defaults = DataTable.defaults;","\t\t\tvar $this = $(this);","\t\t\t","\t\t\t","\t\t\t/* Sanity check */","\t\t\tif ( this.nodeName.toLowerCase() != 'table' )","\t\t\t{","\t\t\t\t_fnLog( null, 0, 'Non-table node initialisation ('+this.nodeName+')', 2 );","\t\t\t\treturn;","\t\t\t}","\t\t\t","\t\t\t/* Backwards compatibility for the defaults */","\t\t\t_fnCompatOpts( defaults );","\t\t\t_fnCompatCols( defaults.column );","\t\t\t","\t\t\t/* Convert the camel-case defaults to Hungarian */","\t\t\t_fnCamelToHungarian( defaults, defaults, true );","\t\t\t_fnCamelToHungarian( defaults.column, defaults.column, true );","\t\t\t","\t\t\t/* Setting up the initialisation object */","\t\t\t_fnCamelToHungarian( defaults, $.extend( oInit, $this.data() ) );","\t\t\t","\t\t\t","\t\t\t","\t\t\t/* Check to see if we are re-initialising a table */","\t\t\tvar allSettings = DataTable.settings;","\t\t\tfor ( i=0, iLen=allSettings.length ; i<iLen ; i++ )","\t\t\t{","\t\t\t\tvar s = allSettings[i];","\t\t\t","\t\t\t\t/* Base check on table node */","\t\t\t\tif ( s.nTable == this || s.nTHead.parentNode == this || (s.nTFoot && s.nTFoot.parentNode == this) )","\t\t\t\t{","\t\t\t\t\tvar bRetrieve = oInit.bRetrieve !== undefined ? oInit.bRetrieve : defaults.bRetrieve;","\t\t\t\t\tvar bDestroy = oInit.bDestroy !== undefined ? oInit.bDestroy : defaults.bDestroy;","\t\t\t","\t\t\t\t\tif ( emptyInit || bRetrieve )","\t\t\t\t\t{","\t\t\t\t\t\treturn s.oInstance;","\t\t\t\t\t}","\t\t\t\t\telse if ( bDestroy )","\t\t\t\t\t{","\t\t\t\t\t\ts.oInstance.fnDestroy();","\t\t\t\t\t\tbreak;","\t\t\t\t\t}","\t\t\t\t\telse","\t\t\t\t\t{","\t\t\t\t\t\t_fnLog( s, 0, 'Cannot reinitialise DataTable', 3 );","\t\t\t\t\t\treturn;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t","\t\t\t\t/* If the element we are initialising has the same ID as a table which was previously","\t\t\t\t * initialised, but the table nodes don't match (from before) then we destroy the old","\t\t\t\t * instance by simply deleting it. This is under the assumption that the table has been","\t\t\t\t * destroyed by other methods. Anyone using non-id selectors will need to do this manually","\t\t\t\t */","\t\t\t\tif ( s.sTableId == this.id )","\t\t\t\t{","\t\t\t\t\tallSettings.splice( i, 1 );","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","\t\t\t","\t\t\t/* Ensure the table has an ID - required for accessibility */","\t\t\tif ( sId === null || sId === \"\" )","\t\t\t{","\t\t\t\tsId = \"DataTables_Table_\"+(DataTable.ext._unique++);","\t\t\t\tthis.id = sId;","\t\t\t}","\t\t\t","\t\t\t/* Create the settings object for this table and set some of the default parameters */","\t\t\tvar oSettings = $.extend( true, {}, DataTable.models.oSettings, {","\t\t\t\t\"sDestroyWidth\": $this[0].style.width,","\t\t\t\t\"sInstance\":     sId,","\t\t\t\t\"sTableId\":      sId","\t\t\t} );","\t\t\toSettings.nTable = this;","\t\t\toSettings.oApi   = _that.internal;","\t\t\toSettings.oInit  = oInit;","\t\t\t","\t\t\tallSettings.push( oSettings );","\t\t\t","\t\t\t// Need to add the instance after the instance after the settings object has been added","\t\t\t// to the settings array, so we can self reference the table instance if more than one","\t\t\toSettings.oInstance = (_that.length===1) ? _that : $this.dataTable();","\t\t\t","\t\t\t// Backwards compatibility, before we apply all the defaults","\t\t\t_fnCompatOpts( oInit );","\t\t\t","\t\t\tif ( oInit.oLanguage )","\t\t\t{","\t\t\t\t_fnLanguageCompat( oInit.oLanguage );","\t\t\t}","\t\t\t","\t\t\t// If the length menu is given, but the init display length is not, use the length menu","\t\t\tif ( oInit.aLengthMenu && ! oInit.iDisplayLength )","\t\t\t{","\t\t\t\toInit.iDisplayLength = $.isArray( oInit.aLengthMenu[0] ) ?","\t\t\t\t\toInit.aLengthMenu[0][0] : oInit.aLengthMenu[0];","\t\t\t}","\t\t\t","\t\t\t// Apply the defaults and init options to make a single init object will all","\t\t\t// options defined from defaults and instance options.","\t\t\toInit = _fnExtend( $.extend( true, {}, defaults ), oInit );","\t\t\t","\t\t\t","\t\t\t// Map the initialisation options onto the settings object","\t\t\t_fnMap( oSettings.oFeatures, oInit, [","\t\t\t\t\"bPaginate\",","\t\t\t\t\"bLengthChange\",","\t\t\t\t\"bFilter\",","\t\t\t\t\"bSort\",","\t\t\t\t\"bSortMulti\",","\t\t\t\t\"bInfo\",","\t\t\t\t\"bProcessing\",","\t\t\t\t\"bAutoWidth\",","\t\t\t\t\"bSortClasses\",","\t\t\t\t\"bServerSide\",","\t\t\t\t\"bDeferRender\"","\t\t\t] );","\t\t\t_fnMap( oSettings, oInit, [","\t\t\t\t\"asStripeClasses\",","\t\t\t\t\"ajax\",","\t\t\t\t\"fnServerData\",","\t\t\t\t\"fnFormatNumber\",","\t\t\t\t\"sServerMethod\",","\t\t\t\t\"aaSorting\",","\t\t\t\t\"aaSortingFixed\",","\t\t\t\t\"aLengthMenu\",","\t\t\t\t\"sPaginationType\",","\t\t\t\t\"sAjaxSource\",","\t\t\t\t\"sAjaxDataProp\",","\t\t\t\t\"iStateDuration\",","\t\t\t\t\"sDom\",","\t\t\t\t\"bSortCellsTop\",","\t\t\t\t\"iTabIndex\",","\t\t\t\t\"fnStateLoadCallback\",","\t\t\t\t\"fnStateSaveCallback\",","\t\t\t\t\"renderer\",","\t\t\t\t\"searchDelay\",","\t\t\t\t[ \"iCookieDuration\", \"iStateDuration\" ], // backwards compat","\t\t\t\t[ \"oSearch\", \"oPreviousSearch\" ],","\t\t\t\t[ \"aoSearchCols\", \"aoPreSearchCols\" ],","\t\t\t\t[ \"iDisplayLength\", \"_iDisplayLength\" ],","\t\t\t\t[ \"bJQueryUI\", \"bJUI\" ]","\t\t\t] );","\t\t\t_fnMap( oSettings.oScroll, oInit, [","\t\t\t\t[ \"sScrollX\", \"sX\" ],","\t\t\t\t[ \"sScrollXInner\", \"sXInner\" ],","\t\t\t\t[ \"sScrollY\", \"sY\" ],","\t\t\t\t[ \"bScrollCollapse\", \"bCollapse\" ]","\t\t\t] );","\t\t\t_fnMap( oSettings.oLanguage, oInit, \"fnInfoCallback\" );","\t\t\t","\t\t\t/* Callback functions which are array driven */","\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback',       oInit.fnDrawCallback,      'user' );","\t\t\t_fnCallbackReg( oSettings, 'aoServerParams',       oInit.fnServerParams,      'user' );","\t\t\t_fnCallbackReg( oSettings, 'aoStateSaveParams',    oInit.fnStateSaveParams,   'user' );","\t\t\t_fnCallbackReg( oSettings, 'aoStateLoadParams',    oInit.fnStateLoadParams,   'user' );","\t\t\t_fnCallbackReg( oSettings, 'aoStateLoaded',        oInit.fnStateLoaded,       'user' );","\t\t\t_fnCallbackReg( oSettings, 'aoRowCallback',        oInit.fnRowCallback,       'user' );","\t\t\t_fnCallbackReg( oSettings, 'aoRowCreatedCallback', oInit.fnCreatedRow,        'user' );","\t\t\t_fnCallbackReg( oSettings, 'aoHeaderCallback',     oInit.fnHeaderCallback,    'user' );","\t\t\t_fnCallbackReg( oSettings, 'aoFooterCallback',     oInit.fnFooterCallback,    'user' );","\t\t\t_fnCallbackReg( oSettings, 'aoInitComplete',       oInit.fnInitComplete,      'user' );","\t\t\t_fnCallbackReg( oSettings, 'aoPreDrawCallback',    oInit.fnPreDrawCallback,   'user' );","\t\t\t","\t\t\tvar oClasses = oSettings.oClasses;","\t\t\t","\t\t\t// @todo Remove in 1.11","\t\t\tif ( oInit.bJQueryUI )","\t\t\t{","\t\t\t\t/* Use the JUI classes object for display. You could clone the oStdClasses object if","\t\t\t\t * you want to have multiple tables with multiple independent classes","\t\t\t\t */","\t\t\t\t$.extend( oClasses, DataTable.ext.oJUIClasses, oInit.oClasses );","\t\t\t","\t\t\t\tif ( oInit.sDom === defaults.sDom && defaults.sDom === \"lfrtip\" )","\t\t\t\t{","\t\t\t\t\t/* Set the DOM to use a layout suitable for jQuery UI's theming */","\t\t\t\t\toSettings.sDom = '<\"H\"lfr>t<\"F\"ip>';","\t\t\t\t}","\t\t\t","\t\t\t\tif ( ! oSettings.renderer ) {","\t\t\t\t\toSettings.renderer = 'jqueryui';","\t\t\t\t}","\t\t\t\telse if ( $.isPlainObject( oSettings.renderer ) && ! oSettings.renderer.header ) {","\t\t\t\t\toSettings.renderer.header = 'jqueryui';","\t\t\t\t}","\t\t\t}","\t\t\telse","\t\t\t{","\t\t\t\t$.extend( oClasses, DataTable.ext.classes, oInit.oClasses );","\t\t\t}","\t\t\t$this.addClass( oClasses.sTable );","\t\t\t","\t\t\t/* Calculate the scroll bar width and cache it for use later on */","\t\t\tif ( oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\" )","\t\t\t{","\t\t\t\toSettings.oScroll.iBarWidth = _fnScrollBarWidth();","\t\t\t}","\t\t\tif ( oSettings.oScroll.sX === true ) { // Easy initialisation of x-scrolling","\t\t\t\toSettings.oScroll.sX = '100%';","\t\t\t}","\t\t\t","\t\t\tif ( oSettings.iInitDisplayStart === undefined )","\t\t\t{","\t\t\t\t/* Display start point, taking into account the save saving */","\t\t\t\toSettings.iInitDisplayStart = oInit.iDisplayStart;","\t\t\t\toSettings._iDisplayStart = oInit.iDisplayStart;","\t\t\t}","\t\t\t","\t\t\tif ( oInit.iDeferLoading !== null )","\t\t\t{","\t\t\t\toSettings.bDeferLoading = true;","\t\t\t\tvar tmp = $.isArray( oInit.iDeferLoading );","\t\t\t\toSettings._iRecordsDisplay = tmp ? oInit.iDeferLoading[0] : oInit.iDeferLoading;","\t\t\t\toSettings._iRecordsTotal = tmp ? oInit.iDeferLoading[1] : oInit.iDeferLoading;","\t\t\t}","\t\t\t","\t\t\t/* Language definitions */","\t\t\tvar oLanguage = oSettings.oLanguage;","\t\t\t$.extend( true, oLanguage, oInit.oLanguage );","\t\t\t","\t\t\tif ( oLanguage.sUrl !== \"\" )","\t\t\t{","\t\t\t\t/* Get the language definitions from a file - because this Ajax call makes the language","\t\t\t\t * get async to the remainder of this function we use bInitHandedOff to indicate that","\t\t\t\t * _fnInitialise will be fired by the returned Ajax handler, rather than the constructor","\t\t\t\t */","\t\t\t\t$.ajax( {","\t\t\t\t\tdataType: 'json',","\t\t\t\t\turl: oLanguage.sUrl,","\t\t\t\t\tsuccess: function ( json ) {","\t\t\t\t\t\t_fnLanguageCompat( json );","\t\t\t\t\t\t_fnCamelToHungarian( defaults.oLanguage, json );","\t\t\t\t\t\t$.extend( true, oLanguage, json );","\t\t\t\t\t\t_fnInitialise( oSettings );","\t\t\t\t\t},","\t\t\t\t\terror: function () {","\t\t\t\t\t\t// Error occurred loading language file, continue on as best we can","\t\t\t\t\t\t_fnInitialise( oSettings );","\t\t\t\t\t}","\t\t\t\t} );","\t\t\t\tbInitHandedOff = true;","\t\t\t}","\t\t\t","\t\t\t/*","\t\t\t * Stripes","\t\t\t */","\t\t\tif ( oInit.asStripeClasses === null )","\t\t\t{","\t\t\t\toSettings.asStripeClasses =[","\t\t\t\t\toClasses.sStripeOdd,","\t\t\t\t\toClasses.sStripeEven","\t\t\t\t];","\t\t\t}","\t\t\t","\t\t\t/* Remove row stripe classes if they are already on the table row */","\t\t\tvar stripeClasses = oSettings.asStripeClasses;","\t\t\tvar rowOne = $this.children('tbody').find('tr').eq(0);","\t\t\tif ( $.inArray( true, $.map( stripeClasses, function(el, i) {","\t\t\t\treturn rowOne.hasClass(el);","\t\t\t} ) ) !== -1 ) {","\t\t\t\t$('tbody tr', this).removeClass( stripeClasses.join(' ') );","\t\t\t\toSettings.asDestroyStripes = stripeClasses.slice();","\t\t\t}","\t\t\t","\t\t\t/*","\t\t\t * Columns","\t\t\t * See if we should load columns automatically or use defined ones","\t\t\t */","\t\t\tvar anThs = [];","\t\t\tvar aoColumnsInit;","\t\t\tvar nThead = this.getElementsByTagName('thead');","\t\t\tif ( nThead.length !== 0 )","\t\t\t{","\t\t\t\t_fnDetectHeader( oSettings.aoHeader, nThead[0] );","\t\t\t\tanThs = _fnGetUniqueThs( oSettings );","\t\t\t}","\t\t\t","\t\t\t/* If not given a column array, generate one with nulls */","\t\t\tif ( oInit.aoColumns === null )","\t\t\t{","\t\t\t\taoColumnsInit = [];","\t\t\t\tfor ( i=0, iLen=anThs.length ; i<iLen ; i++ )","\t\t\t\t{","\t\t\t\t\taoColumnsInit.push( null );","\t\t\t\t}","\t\t\t}","\t\t\telse","\t\t\t{","\t\t\t\taoColumnsInit = oInit.aoColumns;","\t\t\t}","\t\t\t","\t\t\t/* Add the columns */","\t\t\tfor ( i=0, iLen=aoColumnsInit.length ; i<iLen ; i++ )","\t\t\t{","\t\t\t\t_fnAddColumn( oSettings, anThs ? anThs[i] : null );","\t\t\t}","\t\t\t","\t\t\t/* Apply the column definitions */","\t\t\t_fnApplyColumnDefs( oSettings, oInit.aoColumnDefs, aoColumnsInit, function (iCol, oDef) {","\t\t\t\t_fnColumnOptions( oSettings, iCol, oDef );","\t\t\t} );","\t\t\t","\t\t\t/* HTML5 attribute detection - build an mData object automatically if the","\t\t\t * attributes are found","\t\t\t */","\t\t\tif ( rowOne.length ) {","\t\t\t\tvar a = function ( cell, name ) {","\t\t\t\t\treturn cell.getAttribute( 'data-'+name ) !== null ? name : null;","\t\t\t\t};","\t\t\t","\t\t\t\t$.each( _fnGetRowElements( oSettings, rowOne[0] ).cells, function (i, cell) {","\t\t\t\t\tvar col = oSettings.aoColumns[i];","\t\t\t","\t\t\t\t\tif ( col.mData === i ) {","\t\t\t\t\t\tvar sort = a( cell, 'sort' ) || a( cell, 'order' );","\t\t\t\t\t\tvar filter = a( cell, 'filter' ) || a( cell, 'search' );","\t\t\t","\t\t\t\t\t\tif ( sort !== null || filter !== null ) {","\t\t\t\t\t\t\tcol.mData = {","\t\t\t\t\t\t\t\t_:      i+'.display',","\t\t\t\t\t\t\t\tsort:   sort !== null   ? i+'.@data-'+sort   : undefined,","\t\t\t\t\t\t\t\ttype:   sort !== null   ? i+'.@data-'+sort   : undefined,","\t\t\t\t\t\t\t\tfilter: filter !== null ? i+'.@data-'+filter : undefined","\t\t\t\t\t\t\t};","\t\t\t","\t\t\t\t\t\t\t_fnColumnOptions( oSettings, i );","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t} );","\t\t\t}","\t\t\t","\t\t\tvar features = oSettings.oFeatures;","\t\t\t","\t\t\t/* Must be done after everything which can be overridden by the state saving! */","\t\t\tif ( oInit.bStateSave )","\t\t\t{","\t\t\t\tfeatures.bStateSave = true;","\t\t\t\t_fnLoadState( oSettings, oInit );","\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', _fnSaveState, 'state_save' );","\t\t\t}","\t\t\t","\t\t\t","\t\t\t/*","\t\t\t * Sorting","\t\t\t * @todo For modularisation (1.11) this needs to do into a sort start up handler","\t\t\t */","\t\t\t","\t\t\t// If aaSorting is not defined, then we use the first indicator in asSorting","\t\t\t// in case that has been altered, so the default sort reflects that option","\t\t\tif ( oInit.aaSorting === undefined )","\t\t\t{","\t\t\t\tvar sorting = oSettings.aaSorting;","\t\t\t\tfor ( i=0, iLen=sorting.length ; i<iLen ; i++ )","\t\t\t\t{","\t\t\t\t\tsorting[i][1] = oSettings.aoColumns[ i ].asSorting[0];","\t\t\t\t}","\t\t\t}","\t\t\t","\t\t\t/* Do a first pass on the sorting classes (allows any size changes to be taken into","\t\t\t * account, and also will apply sorting disabled classes if disabled","\t\t\t */","\t\t\t_fnSortingClasses( oSettings );","\t\t\t","\t\t\tif ( features.bSort )","\t\t\t{","\t\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {","\t\t\t\t\tif ( oSettings.bSorted ) {","\t\t\t\t\t\tvar aSort = _fnSortFlatten( oSettings );","\t\t\t\t\t\tvar sortedColumns = {};","\t\t\t","\t\t\t\t\t\t$.each( aSort, function (i, val) {","\t\t\t\t\t\t\tsortedColumns[ val.src ] = val.dir;","\t\t\t\t\t\t} );","\t\t\t","\t\t\t\t\t\t_fnCallbackFire( oSettings, null, 'order', [oSettings, aSort, sortedColumns] );","\t\t\t\t\t\t_fnSortAria( oSettings );","\t\t\t\t\t}","\t\t\t\t} );","\t\t\t}","\t\t\t","\t\t\t_fnCallbackReg( oSettings, 'aoDrawCallback', function () {","\t\t\t\tif ( oSettings.bSorted || _fnDataSource( oSettings ) === 'ssp' || features.bDeferRender ) {","\t\t\t\t\t_fnSortingClasses( oSettings );","\t\t\t\t}","\t\t\t}, 'sc' );","\t\t\t","\t\t\t","\t\t\t/*","\t\t\t * Final init","\t\t\t * Cache the header, body and footer as required, creating them if needed","\t\t\t */","\t\t\t","\t\t\t/* Browser support detection */","\t\t\t_fnBrowserDetect( oSettings );","\t\t\t","\t\t\t// Work around for Webkit bug 83867 - store the caption-side before removing from doc","\t\t\tvar captions = $this.children('caption').each( function () {","\t\t\t\tthis._captionSide = $this.css('caption-side');","\t\t\t} );","\t\t\t","\t\t\tvar thead = $this.children('thead');","\t\t\tif ( thead.length === 0 )","\t\t\t{","\t\t\t\tthead = $('<thead/>').appendTo(this);","\t\t\t}","\t\t\toSettings.nTHead = thead[0];","\t\t\t","\t\t\tvar tbody = $this.children('tbody');","\t\t\tif ( tbody.length === 0 )","\t\t\t{","\t\t\t\ttbody = $('<tbody/>').appendTo(this);","\t\t\t}","\t\t\toSettings.nTBody = tbody[0];","\t\t\t","\t\t\tvar tfoot = $this.children('tfoot');","\t\t\tif ( tfoot.length === 0 && captions.length > 0 && (oSettings.oScroll.sX !== \"\" || oSettings.oScroll.sY !== \"\") )","\t\t\t{","\t\t\t\t// If we are a scrolling table, and no footer has been given, then we need to create","\t\t\t\t// a tfoot element for the caption element to be appended to","\t\t\t\ttfoot = $('<tfoot/>').appendTo(this);","\t\t\t}","\t\t\t","\t\t\tif ( tfoot.length === 0 || tfoot.children().length === 0 ) {","\t\t\t\t$this.addClass( oClasses.sNoFooter );","\t\t\t}","\t\t\telse if ( tfoot.length > 0 ) {","\t\t\t\toSettings.nTFoot = tfoot[0];","\t\t\t\t_fnDetectHeader( oSettings.aoFooter, oSettings.nTFoot );","\t\t\t}","\t\t\t","\t\t\t/* Check if there is data passing into the constructor */","\t\t\tif ( oInit.aaData )","\t\t\t{","\t\t\t\tfor ( i=0 ; i<oInit.aaData.length ; i++ )","\t\t\t\t{","\t\t\t\t\t_fnAddData( oSettings, oInit.aaData[ i ] );","\t\t\t\t}","\t\t\t}","\t\t\telse if ( oSettings.bDeferLoading || _fnDataSource( oSettings ) == 'dom' )","\t\t\t{","\t\t\t\t/* Grab the data from the page - only do this when deferred loading or no Ajax","\t\t\t\t * source since there is no point in reading the DOM data if we are then going","\t\t\t\t * to replace it with Ajax data","\t\t\t\t */","\t\t\t\t_fnAddTr( oSettings, $(oSettings.nTBody).children('tr') );","\t\t\t}","\t\t\t","\t\t\t/* Copy the data index array */","\t\t\toSettings.aiDisplay = oSettings.aiDisplayMaster.slice();","\t\t\t","\t\t\t/* Initialisation complete - table can be drawn */","\t\t\toSettings.bInitialised = true;","\t\t\t","\t\t\t/* Check if we need to initialise the table (it might not have been handed off to the","\t\t\t * language processor)","\t\t\t */","\t\t\tif ( bInitHandedOff === false )","\t\t\t{","\t\t\t\t_fnInitialise( oSettings );","\t\t\t}","\t\t} );","\t\t_that = null;","\t\treturn this;","\t};","","\t","\t","\t/**","\t * Computed structure of the DataTables API, defined by the options passed to","\t * `DataTable.Api.register()` when building the API.","\t *","\t * The structure is built in order to speed creation and extension of the Api","\t * objects since the extensions are effectively pre-parsed.","\t *","\t * The array is an array of objects with the following structure, where this","\t * base array represents the Api prototype base:","\t *","\t *     [","\t *       {","\t *         name:      'data'                -- string   - Property name","\t *         val:       function () {},       -- function - Api method (or undefined if just an object","\t *         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result","\t *         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property","\t *       },","\t *       {","\t *         name:     'row'","\t *         val:       {},","\t *         methodExt: [ ... ],","\t *         propExt:   [","\t *           {","\t *             name:      'data'","\t *             val:       function () {},","\t *             methodExt: [ ... ],","\t *             propExt:   [ ... ]","\t *           },","\t *           ...","\t *         ]","\t *       }","\t *     ]","\t *","\t * @type {Array}","\t * @ignore","\t */","\tvar __apiStruct = [];","\t","\t","\t/**","\t * `Array.prototype` reference.","\t *","\t * @type object","\t * @ignore","\t */","\tvar __arrayProto = Array.prototype;","\t","\t","\t/**","\t * Abstraction for `context` parameter of the `Api` constructor to allow it to","\t * take several different forms for ease of use.","\t *","\t * Each of the input parameter types will be converted to a DataTables settings","\t * object where possible.","\t *","\t * @param  {string|node|jQuery|object} mixed DataTable identifier. Can be one","\t *   of:","\t *","\t *   * `string` - jQuery selector. Any DataTables' matching the given selector","\t *     with be found and used.","\t *   * `node` - `TABLE` node which has already been formed into a DataTable.","\t *   * `jQuery` - A jQuery object of `TABLE` nodes.","\t *   * `object` - DataTables settings object","\t *   * `DataTables.Api` - API instance","\t * @return {array|null} Matching DataTables settings objects. `null` or","\t *   `undefined` is returned if no matching DataTable is found.","\t * @ignore","\t */","\tvar _toSettings = function ( mixed )","\t{","\t\tvar idx, jq;","\t\tvar settings = DataTable.settings;","\t\tvar tables = $.map( settings, function (el, i) {","\t\t\treturn el.nTable;","\t\t} );","\t","\t\tif ( ! mixed ) {","\t\t\treturn [];","\t\t}","\t\telse if ( mixed.nTable && mixed.oApi ) {","\t\t\t// DataTables settings object","\t\t\treturn [ mixed ];","\t\t}","\t\telse if ( mixed.nodeName && mixed.nodeName.toLowerCase() === 'table' ) {","\t\t\t// Table node","\t\t\tidx = $.inArray( mixed, tables );","\t\t\treturn idx !== -1 ? [ settings[idx] ] : null;","\t\t}","\t\telse if ( mixed && typeof mixed.settings === 'function' ) {","\t\t\treturn mixed.settings().toArray();","\t\t}","\t\telse if ( typeof mixed === 'string' ) {","\t\t\t// jQuery selector","\t\t\tjq = $(mixed);","\t\t}","\t\telse if ( mixed instanceof $ ) {","\t\t\t// jQuery object (also DataTables instance)","\t\t\tjq = mixed;","\t\t}","\t","\t\tif ( jq ) {","\t\t\treturn jq.map( function(i) {","\t\t\t\tidx = $.inArray( this, tables );","\t\t\t\treturn idx !== -1 ? settings[idx] : null;","\t\t\t} ).toArray();","\t\t}","\t};","\t","\t","\t/**","\t * DataTables API class - used to control and interface with  one or more","\t * DataTables enhanced tables.","\t *","\t * The API class is heavily based on jQuery, presenting a chainable interface","\t * that you can use to interact with tables. Each instance of the API class has","\t * a \"context\" - i.e. the tables that it will operate on. This could be a single","\t * table, all tables on a page or a sub-set thereof.","\t *","\t * Additionally the API is designed to allow you to easily work with the data in","\t * the tables, retrieving and manipulating it as required. This is done by","\t * presenting the API class as an array like interface. The contents of the","\t * array depend upon the actions requested by each method (for example","\t * `rows().nodes()` will return an array of nodes, while `rows().data()` will","\t * return an array of objects or arrays depending upon your table's","\t * configuration). The API object has a number of array like methods (`push`,","\t * `pop`, `reverse` etc) as well as additional helper methods (`each`, `pluck`,","\t * `unique` etc) to assist your working with the data held in a table.","\t *","\t * Most methods (those which return an Api instance) are chainable, which means","\t * the return from a method call also has all of the methods available that the","\t * top level object had. For example, these two calls are equivalent:","\t *","\t *     // Not chained","\t *     api.row.add( {...} );","\t *     api.draw();","\t *","\t *     // Chained","\t *     api.row.add( {...} ).draw();","\t *","\t * @class DataTable.Api","\t * @param {array|object|string|jQuery} context DataTable identifier. This is","\t *   used to define which DataTables enhanced tables this API will operate on.","\t *   Can be one of:","\t *","\t *   * `string` - jQuery selector. Any DataTables' matching the given selector","\t *     with be found and used.","\t *   * `node` - `TABLE` node which has already been formed into a DataTable.","\t *   * `jQuery` - A jQuery object of `TABLE` nodes.","\t *   * `object` - DataTables settings object","\t * @param {array} [data] Data to initialise the Api instance with.","\t *","\t * @example","\t *   // Direct initialisation during DataTables construction","\t *   var api = $('#example').DataTable();","\t *","\t * @example","\t *   // Initialisation using a DataTables jQuery object","\t *   var api = $('#example').dataTable().api();","\t *","\t * @example","\t *   // Initialisation as a constructor","\t *   var api = new $.fn.DataTable.Api( 'table.dataTable' );","\t */","\t_Api = function ( context, data )","\t{","\t\tif ( ! this instanceof _Api ) {","\t\t\tthrow 'DT API must be constructed as a new object';","\t\t\t// or should it do the 'new' for the caller?","\t\t\t// return new _Api.apply( this, arguments );","\t\t}","\t","\t\tvar settings = [];","\t\tvar ctxSettings = function ( o ) {","\t\t\tvar a = _toSettings( o );","\t\t\tif ( a ) {","\t\t\t\tsettings.push.apply( settings, a );","\t\t\t}","\t\t};","\t","\t\tif ( $.isArray( context ) ) {","\t\t\tfor ( var i=0, ien=context.length ; i<ien ; i++ ) {","\t\t\t\tctxSettings( context[i] );","\t\t\t}","\t\t}","\t\telse {","\t\t\tctxSettings( context );","\t\t}","\t","\t\t// Remove duplicates","\t\tthis.context = _unique( settings );","\t","\t\t// Initial data","\t\tif ( data ) {","\t\t\tthis.push.apply( this, data.toArray ? data.toArray() : data );","\t\t}","\t","\t\t// selector","\t\tthis.selector = {","\t\t\trows: null,","\t\t\tcols: null,","\t\t\topts: null","\t\t};","\t","\t\t_Api.extend( this, this, __apiStruct );","\t};","\t","\tDataTable.Api = _Api;","\t","\t_Api.prototype = /** @lends DataTables.Api */{","\t\t/**","\t\t * Return a new Api instance, comprised of the data held in the current","\t\t * instance, join with the other array(s) and/or value(s).","\t\t *","\t\t * An alias for `Array.prototype.concat`.","\t\t *","\t\t * @type method","\t\t * @param {*} value1 Arrays and/or values to concatenate.","\t\t * @param {*} [...] Additional arrays and/or values to concatenate.","\t\t * @returns {DataTables.Api} New API instance, comprising of the combined","\t\t *   array.","\t\t */","\t\tconcat:  __arrayProto.concat,","\t","\t","\t\tcontext: [], // array of table settings objects","\t","\t","\t\teach: function ( fn )","\t\t{","\t\t\tfor ( var i=0, ien=this.length ; i<ien; i++ ) {","\t\t\t\tfn.call( this, this[i], i, this );","\t\t\t}","\t","\t\t\treturn this;","\t\t},","\t","\t","\t\teq: function ( idx )","\t\t{","\t\t\tvar ctx = this.context;","\t","\t\t\treturn ctx.length > idx ?","\t\t\t\tnew _Api( ctx[idx], this[idx] ) :","\t\t\t\tnull;","\t\t},","\t","\t","\t\tfilter: function ( fn )","\t\t{","\t\t\tvar a = [];","\t","\t\t\tif ( __arrayProto.filter ) {","\t\t\t\ta = __arrayProto.filter.call( this, fn, this );","\t\t\t}","\t\t\telse {","\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)","\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {","\t\t\t\t\tif ( fn.call( this, this[i], i, this ) ) {","\t\t\t\t\t\ta.push( this[i] );","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t","\t\t\treturn new _Api( this.context, a );","\t\t},","\t","\t","\t\tflatten: function ()","\t\t{","\t\t\tvar a = [];","\t\t\treturn new _Api( this.context, a.concat.apply( a, this.toArray() ) );","\t\t},","\t","\t","\t\tjoin:    __arrayProto.join,","\t","\t","\t\tindexOf: __arrayProto.indexOf || function (obj, start)","\t\t{","\t\t\tfor ( var i=(start || 0), ien=this.length ; i<ien ; i++ ) {","\t\t\t\tif ( this[i] === obj ) {","\t\t\t\t\treturn i;","\t\t\t\t}","\t\t\t}","\t\t\treturn -1;","\t\t},","\t","\t\t// Note that `alwaysNew` is internal - use iteratorNew externally","\t\titerator: function ( flatten, type, fn, alwaysNew ) {","\t\t\tvar","\t\t\t\ta = [], ret,","\t\t\t\ti, ien, j, jen,","\t\t\t\tcontext = this.context,","\t\t\t\trows, items, item,","\t\t\t\tselector = this.selector;","\t","\t\t\t// Argument shifting","\t\t\tif ( typeof flatten === 'string' ) {","\t\t\t\talwaysNew = fn;","\t\t\t\tfn = type;","\t\t\t\ttype = flatten;","\t\t\t\tflatten = false;","\t\t\t}","\t","\t\t\tfor ( i=0, ien=context.length ; i<ien ; i++ ) {","\t\t\t\tvar apiInst = new _Api( context[i] );","\t","\t\t\t\tif ( type === 'table' ) {","\t\t\t\t\tret = fn.call( apiInst, context[i], i );","\t","\t\t\t\t\tif ( ret !== undefined ) {","\t\t\t\t\t\ta.push( ret );","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\telse if ( type === 'columns' || type === 'rows' ) {","\t\t\t\t\t// this has same length as context - one entry for each table","\t\t\t\t\tret = fn.call( apiInst, context[i], this[i], i );","\t","\t\t\t\t\tif ( ret !== undefined ) {","\t\t\t\t\t\ta.push( ret );","\t\t\t\t\t}","\t\t\t\t}","\t\t\t\telse if ( type === 'column' || type === 'column-rows' || type === 'row' || type === 'cell' ) {","\t\t\t\t\t// columns and rows share the same structure.","\t\t\t\t\t// 'this' is an array of column indexes for each context","\t\t\t\t\titems = this[i];","\t","\t\t\t\t\tif ( type === 'column-rows' ) {","\t\t\t\t\t\trows = _selector_row_indexes( context[i], selector.opts );","\t\t\t\t\t}","\t","\t\t\t\t\tfor ( j=0, jen=items.length ; j<jen ; j++ ) {","\t\t\t\t\t\titem = items[j];","\t","\t\t\t\t\t\tif ( type === 'cell' ) {","\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item.row, item.column, i, j );","\t\t\t\t\t\t}","\t\t\t\t\t\telse {","\t\t\t\t\t\t\tret = fn.call( apiInst, context[i], item, i, j, rows );","\t\t\t\t\t\t}","\t","\t\t\t\t\t\tif ( ret !== undefined ) {","\t\t\t\t\t\t\ta.push( ret );","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t","\t\t\tif ( a.length || alwaysNew ) {","\t\t\t\tvar api = new _Api( context, flatten ? a.concat.apply( [], a ) : a );","\t\t\t\tvar apiSelector = api.selector;","\t\t\t\tapiSelector.rows = selector.rows;","\t\t\t\tapiSelector.cols = selector.cols;","\t\t\t\tapiSelector.opts = selector.opts;","\t\t\t\treturn api;","\t\t\t}","\t\t\treturn this;","\t\t},","\t","\t","\t\tlastIndexOf: __arrayProto.lastIndexOf || function (obj, start)","\t\t{","\t\t\t// Bit cheeky...","\t\t\treturn this.indexOf.apply( this.toArray.reverse(), arguments );","\t\t},","\t","\t","\t\tlength:  0,","\t","\t","\t\tmap: function ( fn )","\t\t{","\t\t\tvar a = [];","\t","\t\t\tif ( __arrayProto.map ) {","\t\t\t\ta = __arrayProto.map.call( this, fn, this );","\t\t\t}","\t\t\telse {","\t\t\t\t// Compatibility for browsers without EMCA-252-5 (JS 1.6)","\t\t\t\tfor ( var i=0, ien=this.length ; i<ien ; i++ ) {","\t\t\t\t\ta.push( fn.call( this, this[i], i ) );","\t\t\t\t}","\t\t\t}","\t","\t\t\treturn new _Api( this.context, a );","\t\t},","\t","\t","\t\tpluck: function ( prop )","\t\t{","\t\t\treturn this.map( function ( el ) {","\t\t\t\treturn el[ prop ];","\t\t\t} );","\t\t},","\t","\t\tpop:     __arrayProto.pop,","\t","\t","\t\tpush:    __arrayProto.push,","\t","\t","\t\t// Does not return an API instance","\t\treduce: __arrayProto.reduce || function ( fn, init )","\t\t{","\t\t\treturn _fnReduce( this, fn, init, 0, this.length, 1 );","\t\t},","\t","\t","\t\treduceRight: __arrayProto.reduceRight || function ( fn, init )","\t\t{","\t\t\treturn _fnReduce( this, fn, init, this.length-1, -1, -1 );","\t\t},","\t","\t","\t\treverse: __arrayProto.reverse,","\t","\t","\t\t// Object with rows, columns and opts","\t\tselector: null,","\t","\t","\t\tshift:   __arrayProto.shift,","\t","\t","\t\tsort:    __arrayProto.sort, // ? name - order?","\t","\t","\t\tsplice:  __arrayProto.splice,","\t","\t","\t\ttoArray: function ()","\t\t{","\t\t\treturn __arrayProto.slice.call( this );","\t\t},","\t","\t","\t\tto$: function ()","\t\t{","\t\t\treturn $( this );","\t\t},","\t","\t","\t\ttoJQuery: function ()","\t\t{","\t\t\treturn $( this );","\t\t},","\t","\t","\t\tunique: function ()","\t\t{","\t\t\treturn new _Api( this.context, _unique(this) );","\t\t},","\t","\t","\t\tunshift: __arrayProto.unshift","\t};","\t","\t","\t_Api.extend = function ( scope, obj, ext )","\t{","\t\t// Only extend API instances and static properties of the API","\t\tif ( ! ext.length || ! obj || ( ! (obj instanceof _Api) && ! obj.__dt_wrapper ) ) {","\t\t\treturn;","\t\t}","\t","\t\tvar","\t\t\ti, ien,","\t\t\tj, jen,","\t\t\tstruct, inner,","\t\t\tmethodScoping = function ( scope, fn, struc ) {","\t\t\t\treturn function () {","\t\t\t\t\tvar ret = fn.apply( scope, arguments );","\t","\t\t\t\t\t// Method extension","\t\t\t\t\t_Api.extend( ret, ret, struc.methodExt );","\t\t\t\t\treturn ret;","\t\t\t\t};","\t\t\t};","\t","\t\tfor ( i=0, ien=ext.length ; i<ien ; i++ ) {","\t\t\tstruct = ext[i];","\t","\t\t\t// Value","\t\t\tobj[ struct.name ] = typeof struct.val === 'function' ?","\t\t\t\tmethodScoping( scope, struct.val, struct ) :","\t\t\t\t$.isPlainObject( struct.val ) ?","\t\t\t\t\t{} :","\t\t\t\t\tstruct.val;","\t","\t\t\tobj[ struct.name ].__dt_wrapper = true;","\t","\t\t\t// Property extension","\t\t\t_Api.extend( scope, obj[ struct.name ], struct.propExt );","\t\t}","\t};","\t","\t","\t// @todo - Is there need for an augment function?","\t// _Api.augment = function ( inst, name )","\t// {","\t// \t// Find src object in the structure from the name","\t// \tvar parts = name.split('.');","\t","\t// \t_Api.extend( inst, obj );","\t// };","\t","\t","\t//     [","\t//       {","\t//         name:      'data'                -- string   - Property name","\t//         val:       function () {},       -- function - Api method (or undefined if just an object","\t//         methodExt: [ ... ],              -- array    - Array of Api object definitions to extend the method result","\t//         propExt:   [ ... ]               -- array    - Array of Api object definitions to extend the property","\t//       },","\t//       {","\t//         name:     'row'","\t//         val:       {},","\t//         methodExt: [ ... ],","\t//         propExt:   [","\t//           {","\t//             name:      'data'","\t//             val:       function () {},","\t//             methodExt: [ ... ],","\t//             propExt:   [ ... ]","\t//           },","\t//           ...","\t//         ]","\t//       }","\t//     ]","\t","\t_Api.register = _api_register = function ( name, val )","\t{","\t\tif ( $.isArray( name ) ) {","\t\t\tfor ( var j=0, jen=name.length ; j<jen ; j++ ) {","\t\t\t\t_Api.register( name[j], val );","\t\t\t}","\t\t\treturn;","\t\t}","\t","\t\tvar","\t\t\ti, ien,","\t\t\their = name.split('.'),","\t\t\tstruct = __apiStruct,","\t\t\tkey, method;","\t","\t\tvar find = function ( src, name ) {","\t\t\tfor ( var i=0, ien=src.length ; i<ien ; i++ ) {","\t\t\t\tif ( src[i].name === name ) {","\t\t\t\t\treturn src[i];","\t\t\t\t}","\t\t\t}","\t\t\treturn null;","\t\t};","\t","\t\tfor ( i=0, ien=heir.length ; i<ien ; i++ ) {","\t\t\tmethod = heir[i].indexOf('()') !== -1;","\t\t\tkey = method ?","\t\t\t\their[i].replace('()', '') :","\t\t\t\their[i];","\t","\t\t\tvar src = find( struct, key );","\t\t\tif ( ! src ) {","\t\t\t\tsrc = {","\t\t\t\t\tname:      key,","\t\t\t\t\tval:       {},","\t\t\t\t\tmethodExt: [],","\t\t\t\t\tpropExt:   []","\t\t\t\t};","\t\t\t\tstruct.push( src );","\t\t\t}","\t","\t\t\tif ( i === ien-1 ) {","\t\t\t\tsrc.val = val;","\t\t\t}","\t\t\telse {","\t\t\t\tstruct = method ?","\t\t\t\t\tsrc.methodExt :","\t\t\t\t\tsrc.propExt;","\t\t\t}","\t\t}","\t};","\t","\t","\t_Api.registerPlural = _api_registerPlural = function ( pluralName, singularName, val ) {","\t\t_Api.register( pluralName, val );","\t","\t\t_Api.register( singularName, function () {","\t\t\tvar ret = val.apply( this, arguments );","\t","\t\t\tif ( ret === this ) {","\t\t\t\t// Returned item is the API instance that was passed in, return it","\t\t\t\treturn this;","\t\t\t}","\t\t\telse if ( ret instanceof _Api ) {","\t\t\t\t// New API instance returned, want the value from the first item","\t\t\t\t// in the returned array for the singular result.","\t\t\t\treturn ret.length ?","\t\t\t\t\t$.isArray( ret[0] ) ?","\t\t\t\t\t\tnew _Api( ret.context, ret[0] ) : // Array results are 'enhanced'","\t\t\t\t\t\tret[0] :","\t\t\t\t\tundefined;","\t\t\t}","\t","\t\t\t// Non-API return - just fire it back","\t\t\treturn ret;","\t\t} );","\t};","\t","\t","\t/**","\t * Selector for HTML tables. Apply the given selector to the give array of","\t * DataTables settings objects.","\t *","\t * @param {string|integer} [selector] jQuery selector string or integer","\t * @param  {array} Array of DataTables settings objects to be filtered","\t * @return {array}","\t * @ignore","\t */","\tvar __table_selector = function ( selector, a )","\t{","\t\t// Integer is used to pick out a table by index","\t\tif ( typeof selector === 'number' ) {","\t\t\treturn [ a[ selector ] ];","\t\t}","\t","\t\t// Perform a jQuery selector on the table nodes","\t\tvar nodes = $.map( a, function (el, i) {","\t\t\treturn el.nTable;","\t\t} );","\t","\t\treturn $(nodes)","\t\t\t.filter( selector )","\t\t\t.map( function (i) {","\t\t\t\t// Need to translate back from the table node to the settings","\t\t\t\tvar idx = $.inArray( this, nodes );","\t\t\t\treturn a[ idx ];","\t\t\t} )","\t\t\t.toArray();","\t};","\t","\t","\t","\t/**","\t * Context selector for the API's context (i.e. the tables the API instance","\t * refers to.","\t *","\t * @name    DataTable.Api#tables","\t * @param {string|integer} [selector] Selector to pick which tables the iterator","\t *   should operate on. If not given, all tables in the current context are","\t *   used. This can be given as a jQuery selector (for example `':gt(0)'`) to","\t *   select multiple tables or as an integer to select a single table.","\t * @returns {DataTable.Api} Returns a new API instance if a selector is given.","\t */","\t_api_register( 'tables()', function ( selector ) {","\t\t// A new instance is created if there was a selector specified","\t\treturn selector ?","\t\t\tnew _Api( __table_selector( selector, this.context ) ) :","\t\t\tthis;","\t} );","\t","\t","\t_api_register( 'table()', function ( selector ) {","\t\tvar tables = this.tables( selector );","\t\tvar ctx = tables.context;","\t","\t\t// Truncate to the first matched table","\t\treturn ctx.length ?","\t\t\tnew _Api( ctx[0] ) :","\t\t\ttables;","\t} );","\t","\t","\t_api_registerPlural( 'tables().nodes()', 'table().node()' , function () {","\t\treturn this.iterator( 'table', function ( ctx ) {","\t\t\treturn ctx.nTable;","\t\t}, 1 );","\t} );","\t","\t","\t_api_registerPlural( 'tables().body()', 'table().body()' , function () {","\t\treturn this.iterator( 'table', function ( ctx ) {","\t\t\treturn ctx.nTBody;","\t\t}, 1 );","\t} );","\t","\t","\t_api_registerPlural( 'tables().header()', 'table().header()' , function () {","\t\treturn this.iterator( 'table', function ( ctx ) {","\t\t\treturn ctx.nTHead;","\t\t}, 1 );","\t} );","\t","\t","\t_api_registerPlural( 'tables().footer()', 'table().footer()' , function () {","\t\treturn this.iterator( 'table', function ( ctx ) {","\t\t\treturn ctx.nTFoot;","\t\t}, 1 );","\t} );","\t","\t","\t_api_registerPlural( 'tables().containers()', 'table().container()' , function () {","\t\treturn this.iterator( 'table', function ( ctx ) {","\t\t\treturn ctx.nTableWrapper;","\t\t}, 1 );","\t} );","\t","\t","\t","\t/**","\t * Redraw the tables in the current context.","\t *","\t * @param {boolean} [reset=true] Reset (default) or hold the current paging","\t *   position. A full re-sort and re-filter is performed when this method is","\t *   called, which is why the pagination reset is the default action.","\t * @returns {DataTables.Api} this","\t */","\t_api_register( 'draw()', function ( resetPaging ) {","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\t_fnReDraw( settings, resetPaging===false );","\t\t} );","\t} );","\t","\t","\t","\t/**","\t * Get the current page index.","\t *","\t * @return {integer} Current page index (zero based)","\t *//**","\t * Set the current page.","\t *","\t * Note that if you attempt to show a page which does not exist, DataTables will","\t * not throw an error, but rather reset the paging.","\t *","\t * @param {integer|string} action The paging action to take. This can be one of:","\t *  * `integer` - The page index to jump to","\t *  * `string` - An action to take:","\t *    * `first` - Jump to first page.","\t *    * `next` - Jump to the next page","\t *    * `previous` - Jump to previous page","\t *    * `last` - Jump to the last page.","\t * @returns {DataTables.Api} this","\t */","\t_api_register( 'page()', function ( action ) {","\t\tif ( action === undefined ) {","\t\t\treturn this.page.info().page; // not an expensive call","\t\t}","\t","\t\t// else, have an action to take on all tables","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\t_fnPageChange( settings, action );","\t\t} );","\t} );","\t","\t","\t/**","\t * Paging information for the first table in the current context.","\t *","\t * If you require paging information for another table, use the `table()` method","\t * with a suitable selector.","\t *","\t * @return {object} Object with the following properties set:","\t *  * `page` - Current page index (zero based - i.e. the first page is `0`)","\t *  * `pages` - Total number of pages","\t *  * `start` - Display index for the first record shown on the current page","\t *  * `end` - Display index for the last record shown on the current page","\t *  * `length` - Display length (number of records). Note that generally `start","\t *    + length = end`, but this is not always true, for example if there are","\t *    only 2 records to show on the final page, with a length of 10.","\t *  * `recordsTotal` - Full data set length","\t *  * `recordsDisplay` - Data set length once the current filtering criterion","\t *    are applied.","\t */","\t_api_register( 'page.info()', function ( action ) {","\t\tif ( this.context.length === 0 ) {","\t\t\treturn undefined;","\t\t}","\t","\t\tvar","\t\t\tsettings   = this.context[0],","\t\t\tstart      = settings._iDisplayStart,","\t\t\tlen        = settings._iDisplayLength,","\t\t\tvisRecords = settings.fnRecordsDisplay(),","\t\t\tall        = len === -1;","\t","\t\treturn {","\t\t\t\"page\":           all ? 0 : Math.floor( start / len ),","\t\t\t\"pages\":          all ? 1 : Math.ceil( visRecords / len ),","\t\t\t\"start\":          start,","\t\t\t\"end\":            settings.fnDisplayEnd(),","\t\t\t\"length\":         len,","\t\t\t\"recordsTotal\":   settings.fnRecordsTotal(),","\t\t\t\"recordsDisplay\": visRecords","\t\t};","\t} );","\t","\t","\t/**","\t * Get the current page length.","\t *","\t * @return {integer} Current page length. Note `-1` indicates that all records","\t *   are to be shown.","\t *//**","\t * Set the current page length.","\t *","\t * @param {integer} Page length to set. Use `-1` to show all records.","\t * @returns {DataTables.Api} this","\t */","\t_api_register( 'page.len()', function ( len ) {","\t\t// Note that we can't call this function 'length()' because `length`","\t\t// is a Javascript property of functions which defines how many arguments","\t\t// the function expects.","\t\tif ( len === undefined ) {","\t\t\treturn this.context.length !== 0 ?","\t\t\t\tthis.context[0]._iDisplayLength :","\t\t\t\tundefined;","\t\t}","\t","\t\t// else, set the page length","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\t_fnLengthChange( settings, len );","\t\t} );","\t} );","\t","\t","\t","\tvar __reload = function ( settings, holdPosition, callback ) {","\t\t// Use the draw event to trigger a callback","\t\tif ( callback ) {","\t\t\tvar api = new _Api( settings );","\t","\t\t\tapi.one( 'draw', function () {","\t\t\t\tcallback( api.ajax.json() );","\t\t\t} );","\t\t}","\t","\t\tif ( _fnDataSource( settings ) == 'ssp' ) {","\t\t\t_fnReDraw( settings, holdPosition );","\t\t}","\t\telse {","\t\t\t// Trigger xhr","\t\t\t_fnProcessingDisplay( settings, true );","\t","\t\t\t_fnBuildAjax( settings, [], function( json ) {","\t\t\t\t_fnClearTable( settings );","\t","\t\t\t\tvar data = _fnAjaxDataSrc( settings, json );","\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {","\t\t\t\t\t_fnAddData( settings, data[i] );","\t\t\t\t}","\t","\t\t\t\t_fnReDraw( settings, holdPosition );","\t\t\t\t_fnProcessingDisplay( settings, false );","\t\t\t} );","\t\t}","\t};","\t","\t","\t/**","\t * Get the JSON response from the last Ajax request that DataTables made to the","\t * server. Note that this returns the JSON from the first table in the current","\t * context.","\t *","\t * @return {object} JSON received from the server.","\t */","\t_api_register( 'ajax.json()', function () {","\t\tvar ctx = this.context;","\t","\t\tif ( ctx.length > 0 ) {","\t\t\treturn ctx[0].json;","\t\t}","\t","\t\t// else return undefined;","\t} );","\t","\t","\t/**","\t * Get the data submitted in the last Ajax request","\t */","\t_api_register( 'ajax.params()', function () {","\t\tvar ctx = this.context;","\t","\t\tif ( ctx.length > 0 ) {","\t\t\treturn ctx[0].oAjaxData;","\t\t}","\t","\t\t// else return undefined;","\t} );","\t","\t","\t/**","\t * Reload tables from the Ajax data source. Note that this function will","\t * automatically re-draw the table when the remote data has been loaded.","\t *","\t * @param {boolean} [reset=true] Reset (default) or hold the current paging","\t *   position. A full re-sort and re-filter is performed when this method is","\t *   called, which is why the pagination reset is the default action.","\t * @returns {DataTables.Api} this","\t */","\t_api_register( 'ajax.reload()', function ( callback, resetPaging ) {","\t\treturn this.iterator( 'table', function (settings) {","\t\t\t__reload( settings, resetPaging===false, callback );","\t\t} );","\t} );","\t","\t","\t/**","\t * Get the current Ajax URL. Note that this returns the URL from the first","\t * table in the current context.","\t *","\t * @return {string} Current Ajax source URL","\t *//**","\t * Set the Ajax URL. Note that this will set the URL for all tables in the","\t * current context.","\t *","\t * @param {string} url URL to set.","\t * @returns {DataTables.Api} this","\t */","\t_api_register( 'ajax.url()', function ( url ) {","\t\tvar ctx = this.context;","\t","\t\tif ( url === undefined ) {","\t\t\t// get","\t\t\tif ( ctx.length === 0 ) {","\t\t\t\treturn undefined;","\t\t\t}","\t\t\tctx = ctx[0];","\t","\t\t\treturn ctx.ajax ?","\t\t\t\t$.isPlainObject( ctx.ajax ) ?","\t\t\t\t\tctx.ajax.url :","\t\t\t\t\tctx.ajax :","\t\t\t\tctx.sAjaxSource;","\t\t}","\t","\t\t// set","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\tif ( $.isPlainObject( settings.ajax ) ) {","\t\t\t\tsettings.ajax.url = url;","\t\t\t}","\t\t\telse {","\t\t\t\tsettings.ajax = url;","\t\t\t}","\t\t\t// No need to consider sAjaxSource here since DataTables gives priority","\t\t\t// to `ajax` over `sAjaxSource`. So setting `ajax` here, renders any","\t\t\t// value of `sAjaxSource` redundant.","\t\t} );","\t} );","\t","\t","\t/**","\t * Load data from the newly set Ajax URL. Note that this method is only","\t * available when `ajax.url()` is used to set a URL. Additionally, this method","\t * has the same effect as calling `ajax.reload()` but is provided for","\t * convenience when setting a new URL. Like `ajax.reload()` it will","\t * automatically redraw the table once the remote data has been loaded.","\t *","\t * @returns {DataTables.Api} this","\t */","\t_api_register( 'ajax.url().load()', function ( callback, resetPaging ) {","\t\t// Same as a reload, but makes sense to present it for easy access after a","\t\t// url change","\t\treturn this.iterator( 'table', function ( ctx ) {","\t\t\t__reload( ctx, resetPaging===false, callback );","\t\t} );","\t} );","\t","\t","\t","\t","\tvar _selector_run = function ( selector, select )","\t{","\t\tvar","\t\t\tout = [], res,","\t\t\ta, i, ien, j, jen,","\t\t\tselectorType = typeof selector;","\t","\t\t// Can't just check for isArray here, as an API or jQuery instance might be","\t\t// given with their array like look","\t\tif ( ! selector || selectorType === 'string' || selectorType === 'function' || selector.length === undefined ) {","\t\t\tselector = [ selector ];","\t\t}","\t","\t\tfor ( i=0, ien=selector.length ; i<ien ; i++ ) {","\t\t\ta = selector[i] && selector[i].split ?","\t\t\t\tselector[i].split(',') :","\t\t\t\t[ selector[i] ];","\t","\t\t\tfor ( j=0, jen=a.length ; j<jen ; j++ ) {","\t\t\t\tres = select( typeof a[j] === 'string' ? $.trim(a[j]) : a[j] );","\t","\t\t\t\tif ( res && res.length ) {","\t\t\t\t\tout.push.apply( out, res );","\t\t\t\t}","\t\t\t}","\t\t}","\t","\t\treturn out;","\t};","\t","\t","\tvar _selector_opts = function ( opts )","\t{","\t\tif ( ! opts ) {","\t\t\topts = {};","\t\t}","\t","\t\t// Backwards compatibility for 1.9- which used the terminology filter rather","\t\t// than search","\t\tif ( opts.filter && ! opts.search ) {","\t\t\topts.search = opts.filter;","\t\t}","\t","\t\treturn {","\t\t\tsearch: opts.search || 'none',","\t\t\torder:  opts.order  || 'current',","\t\t\tpage:   opts.page   || 'all'","\t\t};","\t};","\t","\t","\tvar _selector_first = function ( inst )","\t{","\t\t// Reduce the API instance to the first item found","\t\tfor ( var i=0, ien=inst.length ; i<ien ; i++ ) {","\t\t\tif ( inst[i].length > 0 ) {","\t\t\t\t// Assign the first element to the first item in the instance","\t\t\t\t// and truncate the instance and context","\t\t\t\tinst[0] = inst[i];","\t\t\t\tinst.length = 1;","\t\t\t\tinst.context = [ inst.context[i] ];","\t","\t\t\t\treturn inst;","\t\t\t}","\t\t}","\t","\t\t// Not found - return an empty instance","\t\tinst.length = 0;","\t\treturn inst;","\t};","\t","\t","\tvar _selector_row_indexes = function ( settings, opts )","\t{","\t\tvar","\t\t\ti, ien, tmp, a=[],","\t\t\tdisplayFiltered = settings.aiDisplay,","\t\t\tdisplayMaster = settings.aiDisplayMaster;","\t","\t\tvar","\t\t\tsearch = opts.search,  // none, applied, removed","\t\t\torder  = opts.order,   // applied, current, index (original - compatibility with 1.9)","\t\t\tpage   = opts.page;    // all, current","\t","\t\tif ( _fnDataSource( settings ) == 'ssp' ) {","\t\t\t// In server-side processing mode, most options are irrelevant since","\t\t\t// rows not shown don't exist and the index order is the applied order","\t\t\t// Removed is a special case - for consistency just return an empty","\t\t\t// array","\t\t\treturn search === 'removed' ?","\t\t\t\t[] :","\t\t\t\t_range( 0, displayMaster.length );","\t\t}","\t\telse if ( page == 'current' ) {","\t\t\t// Current page implies that order=current and fitler=applied, since it is","\t\t\t// fairly senseless otherwise, regardless of what order and search actually","\t\t\t// are","\t\t\tfor ( i=settings._iDisplayStart, ien=settings.fnDisplayEnd() ; i<ien ; i++ ) {","\t\t\t\ta.push( displayFiltered[i] );","\t\t\t}","\t\t}","\t\telse if ( order == 'current' || order == 'applied' ) {","\t\t\ta = search == 'none' ?","\t\t\t\tdisplayMaster.slice() :                      // no search","\t\t\t\tsearch == 'applied' ?","\t\t\t\t\tdisplayFiltered.slice() :                // applied search","\t\t\t\t\t$.map( displayMaster, function (el, i) { // removed search","\t\t\t\t\t\treturn $.inArray( el, displayFiltered ) === -1 ? el : null;","\t\t\t\t\t} );","\t\t}","\t\telse if ( order == 'index' || order == 'original' ) {","\t\t\tfor ( i=0, ien=settings.aoData.length ; i<ien ; i++ ) {","\t\t\t\tif ( search == 'none' ) {","\t\t\t\t\ta.push( i );","\t\t\t\t}","\t\t\t\telse { // applied | removed","\t\t\t\t\ttmp = $.inArray( i, displayFiltered );","\t","\t\t\t\t\tif ((tmp === -1 && search == 'removed') ||","\t\t\t\t\t\t(tmp >= 0   && search == 'applied') )","\t\t\t\t\t{","\t\t\t\t\t\ta.push( i );","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t}","\t","\t\treturn a;","\t};","\t","\t","\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *","\t * Rows","\t *","\t * {}          - no selector - use all available rows","\t * {integer}   - row aoData index","\t * {node}      - TR node","\t * {string}    - jQuery selector to apply to the TR elements","\t * {array}     - jQuery array of nodes, or simply an array of TR nodes","\t *","\t */","\t","\t","\tvar __row_selector = function ( settings, selector, opts )","\t{","\t\treturn _selector_run( selector, function ( sel ) {","\t\t\tvar selInt = _intVal( sel );","\t\t\tvar i, ien;","\t","\t\t\t// Short cut - selector is a number and no options provided (default is","\t\t\t// all records, so no need to check if the index is in there, since it","\t\t\t// must be - dev error if the index doesn't exist).","\t\t\tif ( selInt !== null && ! opts ) {","\t\t\t\treturn [ selInt ];","\t\t\t}","\t","\t\t\tvar rows = _selector_row_indexes( settings, opts );","\t","\t\t\tif ( selInt !== null && $.inArray( selInt, rows ) !== -1 ) {","\t\t\t\t// Selector - integer","\t\t\t\treturn [ selInt ];","\t\t\t}","\t\t\telse if ( ! sel ) {","\t\t\t\t// Selector - none","\t\t\t\treturn rows;","\t\t\t}","\t","\t\t\t// Selector - function","\t\t\tif ( typeof sel === 'function' ) {","\t\t\t\treturn $.map( rows, function (idx) {","\t\t\t\t\tvar row = settings.aoData[ idx ];","\t\t\t\t\treturn sel( idx, row._aData, row.nTr ) ? idx : null;","\t\t\t\t} );","\t\t\t}","\t","\t\t\t// Get nodes in the order from the `rows` array with null values removed","\t\t\tvar nodes = _removeEmpty(","\t\t\t\t_pluck_order( settings.aoData, rows, 'nTr' )","\t\t\t);","\t","\t\t\t// Selector - node","\t\t\tif ( sel.nodeName ) {","\t\t\t\tif ( $.inArray( sel, nodes ) !== -1 ) {","\t\t\t\t\treturn [ sel._DT_RowIndex ]; // sel is a TR node that is in the table","\t\t\t\t\t                             // and DataTables adds a prop for fast lookup","\t\t\t\t}","\t\t\t}","\t","\t\t\t// Selector - jQuery selector string, array of nodes or jQuery object/","\t\t\t// As jQuery's .filter() allows jQuery objects to be passed in filter,","\t\t\t// it also allows arrays, so this will cope with all three options","\t\t\treturn $(nodes)","\t\t\t\t.filter( sel )","\t\t\t\t.map( function () {","\t\t\t\t\treturn this._DT_RowIndex;","\t\t\t\t} )","\t\t\t\t.toArray();","\t\t} );","\t};","\t","\t","\t_api_register( 'rows()', function ( selector, opts ) {","\t\t// argument shifting","\t\tif ( selector === undefined ) {","\t\t\tselector = '';","\t\t}","\t\telse if ( $.isPlainObject( selector ) ) {","\t\t\topts = selector;","\t\t\tselector = '';","\t\t}","\t","\t\topts = _selector_opts( opts );","\t","\t\tvar inst = this.iterator( 'table', function ( settings ) {","\t\t\treturn __row_selector( settings, selector, opts );","\t\t}, 1 );","\t","\t\t// Want argument shifting here and in __row_selector?","\t\tinst.selector.rows = selector;","\t\tinst.selector.opts = opts;","\t","\t\treturn inst;","\t} );","\t","\t_api_register( 'rows().nodes()', function () {","\t\treturn this.iterator( 'row', function ( settings, row ) {","\t\t\treturn settings.aoData[ row ].nTr || undefined;","\t\t}, 1 );","\t} );","\t","\t_api_register( 'rows().data()', function () {","\t\treturn this.iterator( true, 'rows', function ( settings, rows ) {","\t\t\treturn _pluck_order( settings.aoData, rows, '_aData' );","\t\t}, 1 );","\t} );","\t","\t_api_registerPlural( 'rows().cache()', 'row().cache()', function ( type ) {","\t\treturn this.iterator( 'row', function ( settings, row ) {","\t\t\tvar r = settings.aoData[ row ];","\t\t\treturn type === 'search' ? r._aFilterData : r._aSortData;","\t\t}, 1 );","\t} );","\t","\t_api_registerPlural( 'rows().invalidate()', 'row().invalidate()', function ( src ) {","\t\treturn this.iterator( 'row', function ( settings, row ) {","\t\t\t_fnInvalidate( settings, row, src );","\t\t} );","\t} );","\t","\t_api_registerPlural( 'rows().indexes()', 'row().index()', function () {","\t\treturn this.iterator( 'row', function ( settings, row ) {","\t\t\treturn row;","\t\t}, 1 );","\t} );","\t","\t_api_registerPlural( 'rows().remove()', 'row().remove()', function () {","\t\tvar that = this;","\t","\t\treturn this.iterator( 'row', function ( settings, row, thatIdx ) {","\t\t\tvar data = settings.aoData;","\t","\t\t\tdata.splice( row, 1 );","\t","\t\t\t// Update the _DT_RowIndex parameter on all rows in the table","\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {","\t\t\t\tif ( data[i].nTr !== null ) {","\t\t\t\t\tdata[i].nTr._DT_RowIndex = i;","\t\t\t\t}","\t\t\t}","\t","\t\t\t// Remove the target row from the search array","\t\t\tvar displayIndex = $.inArray( row, settings.aiDisplay );","\t","\t\t\t// Delete from the display arrays","\t\t\t_fnDeleteIndex( settings.aiDisplayMaster, row );","\t\t\t_fnDeleteIndex( settings.aiDisplay, row );","\t\t\t_fnDeleteIndex( that[ thatIdx ], row, false ); // maintain local indexes","\t","\t\t\t// Check for an 'overflow' they case for displaying the table","\t\t\t_fnLengthOverflow( settings );","\t\t} );","\t} );","\t","\t","\t_api_register( 'rows.add()', function ( rows ) {","\t\tvar newRows = this.iterator( 'table', function ( settings ) {","\t\t\t\tvar row, i, ien;","\t\t\t\tvar out = [];","\t","\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {","\t\t\t\t\trow = rows[i];","\t","\t\t\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {","\t\t\t\t\t\tout.push( _fnAddTr( settings, row )[0] );","\t\t\t\t\t}","\t\t\t\t\telse {","\t\t\t\t\t\tout.push( _fnAddData( settings, row ) );","\t\t\t\t\t}","\t\t\t\t}","\t","\t\t\t\treturn out;","\t\t\t}, 1 );","\t","\t\t// Return an Api.rows() extended instance, so rows().nodes() etc can be used","\t\tvar modRows = this.rows( -1 );","\t\tmodRows.pop();","\t\tmodRows.push.apply( modRows, newRows.toArray() );","\t","\t\treturn modRows;","\t} );","\t","\t","\t","\t","\t","\t/**","\t *","\t */","\t_api_register( 'row()', function ( selector, opts ) {","\t\treturn _selector_first( this.rows( selector, opts ) );","\t} );","\t","\t","\t_api_register( 'row().data()', function ( data ) {","\t\tvar ctx = this.context;","\t","\t\tif ( data === undefined ) {","\t\t\t// Get","\t\t\treturn ctx.length && this.length ?","\t\t\t\tctx[0].aoData[ this[0] ]._aData :","\t\t\t\tundefined;","\t\t}","\t","\t\t// Set","\t\tctx[0].aoData[ this[0] ]._aData = data;","\t","\t\t// Automatically invalidate","\t\t_fnInvalidate( ctx[0], this[0], 'data' );","\t","\t\treturn this;","\t} );","\t","\t","\t_api_register( 'row().node()', function () {","\t\tvar ctx = this.context;","\t","\t\treturn ctx.length && this.length ?","\t\t\tctx[0].aoData[ this[0] ].nTr || null :","\t\t\tnull;","\t} );","\t","\t","\t_api_register( 'row.add()', function ( row ) {","\t\t// Allow a jQuery object to be passed in - only a single row is added from","\t\t// it though - the first element in the set","\t\tif ( row instanceof $ && row.length ) {","\t\t\trow = row[0];","\t\t}","\t","\t\tvar rows = this.iterator( 'table', function ( settings ) {","\t\t\tif ( row.nodeName && row.nodeName.toUpperCase() === 'TR' ) {","\t\t\t\treturn _fnAddTr( settings, row )[0];","\t\t\t}","\t\t\treturn _fnAddData( settings, row );","\t\t} );","\t","\t\t// Return an Api.rows() extended instance, with the newly added row selected","\t\treturn this.row( rows[0] );","\t} );","\t","\t","\t","\tvar __details_add = function ( ctx, row, data, klass )","\t{","\t\t// Convert to array of TR elements","\t\tvar rows = [];","\t\tvar addRow = function ( r, k ) {","\t\t\t// Recursion to allow for arrays of jQuery objects","\t\t\tif ( $.isArray( r ) || r instanceof $ ) {","\t\t\t\tfor ( var i=0, ien=r.length ; i<ien ; i++ ) {","\t\t\t\t\taddRow( r[i], k );","\t\t\t\t}","\t\t\t\treturn;","\t\t\t}","\t","\t\t\t// If we get a TR element, then just add it directly - up to the dev","\t\t\t// to add the correct number of columns etc","\t\t\tif ( r.nodeName && r.nodeName.toLowerCase() === 'tr' ) {","\t\t\t\trows.push( r );","\t\t\t}","\t\t\telse {","\t\t\t\t// Otherwise create a row with a wrapper","\t\t\t\tvar created = $('<tr><td/></tr>').addClass( k );","\t\t\t\t$('td', created)","\t\t\t\t\t.addClass( k )","\t\t\t\t\t.html( r )","\t\t\t\t\t[0].colSpan = _fnVisbleColumns( ctx );","\t","\t\t\t\trows.push( created[0] );","\t\t\t}","\t\t};","\t","\t\taddRow( data, klass );","\t","\t\tif ( row._details ) {","\t\t\trow._details.remove();","\t\t}","\t","\t\trow._details = $(rows);","\t","\t\t// If the children were already shown, that state should be retained","\t\tif ( row._detailsShow ) {","\t\t\trow._details.insertAfter( row.nTr );","\t\t}","\t};","\t","\t","\tvar __details_remove = function ( api, idx )","\t{","\t\tvar ctx = api.context;","\t","\t\tif ( ctx.length ) {","\t\t\tvar row = ctx[0].aoData[ idx !== undefined ? idx : api[0] ];","\t","\t\t\tif ( row._details ) {","\t\t\t\trow._details.remove();","\t","\t\t\t\trow._detailsShow = undefined;","\t\t\t\trow._details = undefined;","\t\t\t}","\t\t}","\t};","\t","\t","\tvar __details_display = function ( api, show ) {","\t\tvar ctx = api.context;","\t","\t\tif ( ctx.length && api.length ) {","\t\t\tvar row = ctx[0].aoData[ api[0] ];","\t","\t\t\tif ( row._details ) {","\t\t\t\trow._detailsShow = show;","\t","\t\t\t\tif ( show ) {","\t\t\t\t\trow._details.insertAfter( row.nTr );","\t\t\t\t}","\t\t\t\telse {","\t\t\t\t\trow._details.detach();","\t\t\t\t}","\t","\t\t\t\t__details_events( ctx[0] );","\t\t\t}","\t\t}","\t};","\t","\t","\tvar __details_events = function ( settings )","\t{","\t\tvar api = new _Api( settings );","\t\tvar namespace = '.dt.DT_details';","\t\tvar drawEvent = 'draw'+namespace;","\t\tvar colvisEvent = 'column-visibility'+namespace;","\t\tvar destroyEvent = 'destroy'+namespace;","\t\tvar data = settings.aoData;","\t","\t\tapi.off( drawEvent +' '+ colvisEvent +' '+ destroyEvent );","\t","\t\tif ( _pluck( data, '_details' ).length > 0 ) {","\t\t\t// On each draw, insert the required elements into the document","\t\t\tapi.on( drawEvent, function ( e, ctx ) {","\t\t\t\tif ( settings !== ctx ) {","\t\t\t\t\treturn;","\t\t\t\t}","\t","\t\t\t\tapi.rows( {page:'current'} ).eq(0).each( function (idx) {","\t\t\t\t\t// Internal data grab","\t\t\t\t\tvar row = data[ idx ];","\t","\t\t\t\t\tif ( row._detailsShow ) {","\t\t\t\t\t\trow._details.insertAfter( row.nTr );","\t\t\t\t\t}","\t\t\t\t} );","\t\t\t} );","\t","\t\t\t// Column visibility change - update the colspan","\t\t\tapi.on( colvisEvent, function ( e, ctx, idx, vis ) {","\t\t\t\tif ( settings !== ctx ) {","\t\t\t\t\treturn;","\t\t\t\t}","\t","\t\t\t\t// Update the colspan for the details rows (note, only if it already has","\t\t\t\t// a colspan)","\t\t\t\tvar row, visible = _fnVisbleColumns( ctx );","\t","\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {","\t\t\t\t\trow = data[i];","\t","\t\t\t\t\tif ( row._details ) {","\t\t\t\t\t\trow._details.children('td[colspan]').attr('colspan', visible );","\t\t\t\t\t}","\t\t\t\t}","\t\t\t} );","\t","\t\t\t// Table destroyed - nuke any child rows","\t\t\tapi.on( destroyEvent, function ( e, ctx ) {","\t\t\t\tif ( settings !== ctx ) {","\t\t\t\t\treturn;","\t\t\t\t}","\t","\t\t\t\tfor ( var i=0, ien=data.length ; i<ien ; i++ ) {","\t\t\t\t\tif ( data[i]._details ) {","\t\t\t\t\t\t__details_remove( api, i );","\t\t\t\t\t}","\t\t\t\t}","\t\t\t} );","\t\t}","\t};","\t","\t// Strings for the method names to help minification","\tvar _emp = '';","\tvar _child_obj = _emp+'row().child';","\tvar _child_mth = _child_obj+'()';","\t","\t// data can be:","\t//  tr","\t//  string","\t//  jQuery or array of any of the above","\t_api_register( _child_mth, function ( data, klass ) {","\t\tvar ctx = this.context;","\t","\t\tif ( data === undefined ) {","\t\t\t// get","\t\t\treturn ctx.length && this.length ?","\t\t\t\tctx[0].aoData[ this[0] ]._details :","\t\t\t\tundefined;","\t\t}","\t\telse if ( data === true ) {","\t\t\t// show","\t\t\tthis.child.show();","\t\t}","\t\telse if ( data === false ) {","\t\t\t// remove","\t\t\t__details_remove( this );","\t\t}","\t\telse if ( ctx.length && this.length ) {","\t\t\t// set","\t\t\t__details_add( ctx[0], ctx[0].aoData[ this[0] ], data, klass );","\t\t}","\t","\t\treturn this;","\t} );","\t","\t","\t_api_register( [","\t\t_child_obj+'.show()',","\t\t_child_mth+'.show()' // only when `child()` was called with parameters (without","\t], function ( show ) {   // it returns an object and this method is not executed)","\t\t__details_display( this, true );","\t\treturn this;","\t} );","\t","\t","\t_api_register( [","\t\t_child_obj+'.hide()',","\t\t_child_mth+'.hide()' // only when `child()` was called with parameters (without","\t], function () {         // it returns an object and this method is not executed)","\t\t__details_display( this, false );","\t\treturn this;","\t} );","\t","\t","\t_api_register( [","\t\t_child_obj+'.remove()',","\t\t_child_mth+'.remove()' // only when `child()` was called with parameters (without","\t], function () {           // it returns an object and this method is not executed)","\t\t__details_remove( this );","\t\treturn this;","\t} );","\t","\t","\t_api_register( _child_obj+'.isShown()', function () {","\t\tvar ctx = this.context;","\t","\t\tif ( ctx.length && this.length ) {","\t\t\t// _detailsShown as false or undefined will fall through to return false","\t\t\treturn ctx[0].aoData[ this[0] ]._detailsShow || false;","\t\t}","\t\treturn false;","\t} );","\t","\t","\t","\t/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *","\t * Columns","\t *","\t * {integer}           - column index (>=0 count from left, <0 count from right)","\t * \"{integer}:visIdx\"  - visible column index (i.e. translate to column index)  (>=0 count from left, <0 count from right)","\t * \"{integer}:visible\" - alias for {integer}:visIdx  (>=0 count from left, <0 count from right)","\t * \"{string}:name\"     - column name","\t * \"{string}\"          - jQuery selector on column header nodes","\t *","\t */","\t","\t// can be an array of these items, comma separated list, or an array of comma","\t// separated lists","\t","\tvar __re_column_selector = /^(.+):(name|visIdx|visible)$/;","\t","\t","\t// r1 and r2 are redundant - but it means that the parameters match for the","\t// iterator callback in columns().data()","\tvar __columnData = function ( settings, column, r1, r2, rows ) {","\t\tvar a = [];","\t\tfor ( var row=0, ien=rows.length ; row<ien ; row++ ) {","\t\t\ta.push( _fnGetCellData( settings, rows[row], column ) );","\t\t}","\t\treturn a;","\t};","\t","\t","\tvar __column_selector = function ( settings, selector, opts )","\t{","\t\tvar","\t\t\tcolumns = settings.aoColumns,","\t\t\tnames = _pluck( columns, 'sName' ),","\t\t\tnodes = _pluck( columns, 'nTh' );","\t","\t\treturn _selector_run( selector, function ( s ) {","\t\t\tvar selInt = _intVal( s );","\t","\t\t\t// Selector - all","\t\t\tif ( s === '' ) {","\t\t\t\treturn _range( columns.length );","\t\t\t}","\t\t\t","\t\t\t// Selector - index","\t\t\tif ( selInt !== null ) {","\t\t\t\treturn [ selInt >= 0 ?","\t\t\t\t\tselInt : // Count from left","\t\t\t\t\tcolumns.length + selInt // Count from right (+ because its a negative value)","\t\t\t\t];","\t\t\t}","\t\t\t","\t\t\t// Selector = function","\t\t\tif ( typeof s === 'function' ) {","\t\t\t\tvar rows = _selector_row_indexes( settings, opts );","\t","\t\t\t\treturn $.map( columns, function (col, idx) {","\t\t\t\t\treturn s(","\t\t\t\t\t\t\tidx,","\t\t\t\t\t\t\t__columnData( settings, idx, 0, 0, rows ),","\t\t\t\t\t\t\tnodes[ idx ]","\t\t\t\t\t\t) ? idx : null;","\t\t\t\t} );","\t\t\t}","\t","\t\t\t// jQuery or string selector","\t\t\tvar match = typeof s === 'string' ?","\t\t\t\ts.match( __re_column_selector ) :","\t\t\t\t'';","\t","\t\t\tif ( match ) {","\t\t\t\tswitch( match[2] ) {","\t\t\t\t\tcase 'visIdx':","\t\t\t\t\tcase 'visible':","\t\t\t\t\t\tvar idx = parseInt( match[1], 10 );","\t\t\t\t\t\t// Visible index given, convert to column index","\t\t\t\t\t\tif ( idx < 0 ) {","\t\t\t\t\t\t\t// Counting from the right","\t\t\t\t\t\t\tvar visColumns = $.map( columns, function (col,i) {","\t\t\t\t\t\t\t\treturn col.bVisible ? i : null;","\t\t\t\t\t\t\t} );","\t\t\t\t\t\t\treturn [ visColumns[ visColumns.length + idx ] ];","\t\t\t\t\t\t}","\t\t\t\t\t\t// Counting from the left","\t\t\t\t\t\treturn [ _fnVisibleToColumnIndex( settings, idx ) ];","\t","\t\t\t\t\tcase 'name':","\t\t\t\t\t\t// match by name. `names` is column index complete and in order","\t\t\t\t\t\treturn $.map( names, function (name, i) {","\t\t\t\t\t\t\treturn name === match[1] ? i : null;","\t\t\t\t\t\t} );","\t\t\t\t}","\t\t\t}","\t\t\telse {","\t\t\t\t// jQuery selector on the TH elements for the columns","\t\t\t\treturn $( nodes )","\t\t\t\t\t.filter( s )","\t\t\t\t\t.map( function () {","\t\t\t\t\t\treturn $.inArray( this, nodes ); // `nodes` is column index complete and in order","\t\t\t\t\t} )","\t\t\t\t\t.toArray();","\t\t\t}","\t\t} );","\t};","\t","\t","\tvar __setColumnVis = function ( settings, column, vis, recalc ) {","\t\tvar","\t\t\tcols = settings.aoColumns,","\t\t\tcol  = cols[ column ],","\t\t\tdata = settings.aoData,","\t\t\trow, cells, i, ien, tr;","\t","\t\t// Get","\t\tif ( vis === undefined ) {","\t\t\treturn col.bVisible;","\t\t}","\t","\t\t// Set","\t\t// No change","\t\tif ( col.bVisible === vis ) {","\t\t\treturn;","\t\t}","\t","\t\tif ( vis ) {","\t\t\t// Insert column","\t\t\t// Need to decide if we should use appendChild or insertBefore","\t\t\tvar insertBefore = $.inArray( true, _pluck(cols, 'bVisible'), column+1 );","\t","\t\t\tfor ( i=0, ien=data.length ; i<ien ; i++ ) {","\t\t\t\ttr = data[i].nTr;","\t\t\t\tcells = data[i].anCells;","\t","\t\t\t\tif ( tr ) {","\t\t\t\t\t// insertBefore can act like appendChild if 2nd arg is null","\t\t\t\t\ttr.insertBefore( cells[ column ], cells[ insertBefore ] || null );","\t\t\t\t}","\t\t\t}","\t\t}","\t\telse {","\t\t\t// Remove column","\t\t\t$( _pluck( settings.aoData, 'anCells', column ) ).detach();","\t\t}","\t","\t\t// Common actions","\t\tcol.bVisible = vis;","\t\t_fnDrawHead( settings, settings.aoHeader );","\t\t_fnDrawHead( settings, settings.aoFooter );","\t","\t\tif ( recalc === undefined || recalc ) {","\t\t\t// Automatically adjust column sizing","\t\t\t_fnAdjustColumnSizing( settings );","\t","\t\t\t// Realign columns for scrolling","\t\t\tif ( settings.oScroll.sX || settings.oScroll.sY ) {","\t\t\t\t_fnScrollDraw( settings );","\t\t\t}","\t\t}","\t","\t\t_fnCallbackFire( settings, null, 'column-visibility', [settings, column, vis] );","\t","\t\t_fnSaveState( settings );","\t};","\t","\t","\t_api_register( 'columns()', function ( selector, opts ) {","\t\t// argument shifting","\t\tif ( selector === undefined ) {","\t\t\tselector = '';","\t\t}","\t\telse if ( $.isPlainObject( selector ) ) {","\t\t\topts = selector;","\t\t\tselector = '';","\t\t}","\t","\t\topts = _selector_opts( opts );","\t","\t\tvar inst = this.iterator( 'table', function ( settings ) {","\t\t\treturn __column_selector( settings, selector, opts );","\t\t}, 1 );","\t","\t\t// Want argument shifting here and in _row_selector?","\t\tinst.selector.cols = selector;","\t\tinst.selector.opts = opts;","\t","\t\treturn inst;","\t} );","\t","\t_api_registerPlural( 'columns().header()', 'column().header()', function ( selector, opts ) {","\t\treturn this.iterator( 'column', function ( settings, column ) {","\t\t\treturn settings.aoColumns[column].nTh;","\t\t}, 1 );","\t} );","\t","\t_api_registerPlural( 'columns().footer()', 'column().footer()', function ( selector, opts ) {","\t\treturn this.iterator( 'column', function ( settings, column ) {","\t\t\treturn settings.aoColumns[column].nTf;","\t\t}, 1 );","\t} );","\t","\t_api_registerPlural( 'columns().data()', 'column().data()', function () {","\t\treturn this.iterator( 'column-rows', __columnData, 1 );","\t} );","\t","\t_api_registerPlural( 'columns().dataSrc()', 'column().dataSrc()', function () {","\t\treturn this.iterator( 'column', function ( settings, column ) {","\t\t\treturn settings.aoColumns[column].mData;","\t\t}, 1 );","\t} );","\t","\t_api_registerPlural( 'columns().cache()', 'column().cache()', function ( type ) {","\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {","\t\t\treturn _pluck_order( settings.aoData, rows,","\t\t\t\ttype === 'search' ? '_aFilterData' : '_aSortData', column","\t\t\t);","\t\t}, 1 );","\t} );","\t","\t_api_registerPlural( 'columns().nodes()', 'column().nodes()', function () {","\t\treturn this.iterator( 'column-rows', function ( settings, column, i, j, rows ) {","\t\t\treturn _pluck_order( settings.aoData, rows, 'anCells', column ) ;","\t\t}, 1 );","\t} );","\t","\t_api_registerPlural( 'columns().visible()', 'column().visible()', function ( vis, calc ) {","\t\treturn this.iterator( 'column', function ( settings, column ) {","\t\t\tif ( vis === undefined ) {","\t\t\t\treturn settings.aoColumns[ column ].bVisible;","\t\t\t} // else","\t\t\t__setColumnVis( settings, column, vis, calc );","\t\t} );","\t} );","\t","\t_api_registerPlural( 'columns().indexes()', 'column().index()', function ( type ) {","\t\treturn this.iterator( 'column', function ( settings, column ) {","\t\t\treturn type === 'visible' ?","\t\t\t\t_fnColumnIndexToVisible( settings, column ) :","\t\t\t\tcolumn;","\t\t}, 1 );","\t} );","\t","\t_api_register( 'columns.adjust()', function () {","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\t_fnAdjustColumnSizing( settings );","\t\t}, 1 );","\t} );","\t","\t_api_register( 'column.index()', function ( type, idx ) {","\t\tif ( this.context.length !== 0 ) {","\t\t\tvar ctx = this.context[0];","\t","\t\t\tif ( type === 'fromVisible' || type === 'toData' ) {","\t\t\t\treturn _fnVisibleToColumnIndex( ctx, idx );","\t\t\t}","\t\t\telse if ( type === 'fromData' || type === 'toVisible' ) {","\t\t\t\treturn _fnColumnIndexToVisible( ctx, idx );","\t\t\t}","\t\t}","\t} );","\t","\t_api_register( 'column()', function ( selector, opts ) {","\t\treturn _selector_first( this.columns( selector, opts ) );","\t} );","\t","\t","\t","\t","\tvar __cell_selector = function ( settings, selector, opts )","\t{","\t\tvar data = settings.aoData;","\t\tvar rows = _selector_row_indexes( settings, opts );","\t\tvar cells = _removeEmpty( _pluck_order( data, rows, 'anCells' ) );","\t\tvar allCells = $( [].concat.apply([], cells) );","\t\tvar row;","\t\tvar columns = settings.aoColumns.length;","\t\tvar a, i, ien, j, o, host;","\t","\t\treturn _selector_run( selector, function ( s ) {","\t\t\tvar fnSelector = typeof s === 'function';","\t","\t\t\tif ( s === null || s === undefined || fnSelector ) {","\t\t\t\t// All cells and function selectors","\t\t\t\ta = [];","\t","\t\t\t\tfor ( i=0, ien=rows.length ; i<ien ; i++ ) {","\t\t\t\t\trow = rows[i];","\t","\t\t\t\t\tfor ( j=0 ; j<columns ; j++ ) {","\t\t\t\t\t\to = {","\t\t\t\t\t\t\trow: row,","\t\t\t\t\t\t\tcolumn: j","\t\t\t\t\t\t};","\t","\t\t\t\t\t\tif ( fnSelector ) {","\t\t\t\t\t\t\t// Selector - function","\t\t\t\t\t\t\thost = settings.aoData[ row ];","\t","\t\t\t\t\t\t\tif ( s( o, _fnGetCellData(settings, row, j), host.anCells[j] ) ) {","\t\t\t\t\t\t\t\ta.push( o );","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t\telse {","\t\t\t\t\t\t\t// Selector - all","\t\t\t\t\t\t\ta.push( o );","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t","\t\t\t\treturn a;","\t\t\t}","\t\t\t","\t\t\t// Selector - index","\t\t\tif ( $.isPlainObject( s ) ) {","\t\t\t\treturn [s];","\t\t\t}","\t","\t\t\t// Selector - jQuery filtered cells","\t\t\treturn allCells","\t\t\t\t.filter( s )","\t\t\t\t.map( function (i, el) {","\t\t\t\t\trow = el.parentNode._DT_RowIndex;","\t","\t\t\t\t\treturn {","\t\t\t\t\t\trow: row,","\t\t\t\t\t\tcolumn: $.inArray( el, data[ row ].anCells )","\t\t\t\t\t};","\t\t\t\t} )","\t\t\t\t.toArray();","\t\t} );","\t};","\t","\t","\t","\t","\t_api_register( 'cells()', function ( rowSelector, columnSelector, opts ) {","\t\t// Argument shifting","\t\tif ( $.isPlainObject( rowSelector ) ) {","\t\t\t// Indexes","\t\t\tif ( rowSelector.row === undefined ) {","\t\t\t\t// Selector options in first parameter","\t\t\t\topts = rowSelector;","\t\t\t\trowSelector = null;","\t\t\t}","\t\t\telse {","\t\t\t\t// Cell index objects in first parameter","\t\t\t\topts = columnSelector;","\t\t\t\tcolumnSelector = null;","\t\t\t}","\t\t}","\t\tif ( $.isPlainObject( columnSelector ) ) {","\t\t\topts = columnSelector;","\t\t\tcolumnSelector = null;","\t\t}","\t","\t\t// Cell selector","\t\tif ( columnSelector === null || columnSelector === undefined ) {","\t\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\t\treturn __cell_selector( settings, rowSelector, _selector_opts( opts ) );","\t\t\t} );","\t\t}","\t","\t\t// Row + column selector","\t\tvar columns = this.columns( columnSelector, opts );","\t\tvar rows = this.rows( rowSelector, opts );","\t\tvar a, i, ien, j, jen;","\t","\t\tvar cells = this.iterator( 'table', function ( settings, idx ) {","\t\t\ta = [];","\t","\t\t\tfor ( i=0, ien=rows[idx].length ; i<ien ; i++ ) {","\t\t\t\tfor ( j=0, jen=columns[idx].length ; j<jen ; j++ ) {","\t\t\t\t\ta.push( {","\t\t\t\t\t\trow:    rows[idx][i],","\t\t\t\t\t\tcolumn: columns[idx][j]","\t\t\t\t\t} );","\t\t\t\t}","\t\t\t}","\t","\t\t\treturn a;","\t\t}, 1 );","\t","\t\t$.extend( cells.selector, {","\t\t\tcols: columnSelector,","\t\t\trows: rowSelector,","\t\t\topts: opts","\t\t} );","\t","\t\treturn cells;","\t} );","\t","\t","\t_api_registerPlural( 'cells().nodes()', 'cell().node()', function () {","\t\treturn this.iterator( 'cell', function ( settings, row, column ) {","\t\t\tvar cells = settings.aoData[ row ].anCells;","\t\t\treturn cells ?","\t\t\t\tcells[ column ] :","\t\t\t\tundefined;","\t\t}, 1 );","\t} );","\t","\t","\t_api_register( 'cells().data()', function () {","\t\treturn this.iterator( 'cell', function ( settings, row, column ) {","\t\t\treturn _fnGetCellData( settings, row, column );","\t\t}, 1 );","\t} );","\t","\t","\t_api_registerPlural( 'cells().cache()', 'cell().cache()', function ( type ) {","\t\ttype = type === 'search' ? '_aFilterData' : '_aSortData';","\t","\t\treturn this.iterator( 'cell', function ( settings, row, column ) {","\t\t\treturn settings.aoData[ row ][ type ][ column ];","\t\t}, 1 );","\t} );","\t","\t","\t_api_registerPlural( 'cells().render()', 'cell().render()', function ( type ) {","\t\treturn this.iterator( 'cell', function ( settings, row, column ) {","\t\t\treturn _fnGetCellData( settings, row, column, type );","\t\t}, 1 );","\t} );","\t","\t","\t_api_registerPlural( 'cells().indexes()', 'cell().index()', function () {","\t\treturn this.iterator( 'cell', function ( settings, row, column ) {","\t\t\treturn {","\t\t\t\trow: row,","\t\t\t\tcolumn: column,","\t\t\t\tcolumnVisible: _fnColumnIndexToVisible( settings, column )","\t\t\t};","\t\t}, 1 );","\t} );","\t","\t","\t_api_registerPlural( 'cells().invalidate()', 'cell().invalidate()', function ( src ) {","\t\treturn this.iterator( 'cell', function ( settings, row, column ) {","\t\t\t_fnInvalidate( settings, row, src, column );","\t\t} );","\t} );","\t","\t","\t","\t_api_register( 'cell()', function ( rowSelector, columnSelector, opts ) {","\t\treturn _selector_first( this.cells( rowSelector, columnSelector, opts ) );","\t} );","\t","\t","\t_api_register( 'cell().data()', function ( data ) {","\t\tvar ctx = this.context;","\t\tvar cell = this[0];","\t","\t\tif ( data === undefined ) {","\t\t\t// Get","\t\t\treturn ctx.length && cell.length ?","\t\t\t\t_fnGetCellData( ctx[0], cell[0].row, cell[0].column ) :","\t\t\t\tundefined;","\t\t}","\t","\t\t// Set","\t\t_fnSetCellData( ctx[0], cell[0].row, cell[0].column, data );","\t\t_fnInvalidate( ctx[0], cell[0].row, 'data', cell[0].column );","\t","\t\treturn this;","\t} );","\t","\t","\t","\t/**","\t * Get current ordering (sorting) that has been applied to the table.","\t *","\t * @returns {array} 2D array containing the sorting information for the first","\t *   table in the current context. Each element in the parent array represents","\t *   a column being sorted upon (i.e. multi-sorting with two columns would have","\t *   2 inner arrays). The inner arrays may have 2 or 3 elements. The first is","\t *   the column index that the sorting condition applies to, the second is the","\t *   direction of the sort (`desc` or `asc`) and, optionally, the third is the","\t *   index of the sorting order from the `column.sorting` initialisation array.","\t *//**","\t * Set the ordering for the table.","\t *","\t * @param {integer} order Column index to sort upon.","\t * @param {string} direction Direction of the sort to be applied (`asc` or `desc`)","\t * @returns {DataTables.Api} this","\t *//**","\t * Set the ordering for the table.","\t *","\t * @param {array} order 1D array of sorting information to be applied.","\t * @param {array} [...] Optional additional sorting conditions","\t * @returns {DataTables.Api} this","\t *//**","\t * Set the ordering for the table.","\t *","\t * @param {array} order 2D array of sorting information to be applied.","\t * @returns {DataTables.Api} this","\t */","\t_api_register( 'order()', function ( order, dir ) {","\t\tvar ctx = this.context;","\t","\t\tif ( order === undefined ) {","\t\t\t// get","\t\t\treturn ctx.length !== 0 ?","\t\t\t\tctx[0].aaSorting :","\t\t\t\tundefined;","\t\t}","\t","\t\t// set","\t\tif ( typeof order === 'number' ) {","\t\t\t// Simple column / direction passed in","\t\t\torder = [ [ order, dir ] ];","\t\t}","\t\telse if ( ! $.isArray( order[0] ) ) {","\t\t\t// Arguments passed in (list of 1D arrays)","\t\t\torder = Array.prototype.slice.call( arguments );","\t\t}","\t\t// otherwise a 2D array was passed in","\t","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\tsettings.aaSorting = order.slice();","\t\t} );","\t} );","\t","\t","\t/**","\t * Attach a sort listener to an element for a given column","\t *","\t * @param {node|jQuery|string} node Identifier for the element(s) to attach the","\t *   listener to. This can take the form of a single DOM node, a jQuery","\t *   collection of nodes or a jQuery selector which will identify the node(s).","\t * @param {integer} column the column that a click on this node will sort on","\t * @param {function} [callback] callback function when sort is run","\t * @returns {DataTables.Api} this","\t */","\t_api_register( 'order.listener()', function ( node, column, callback ) {","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\t_fnSortAttachListener( settings, node, column, callback );","\t\t} );","\t} );","\t","\t","\t// Order by the selected column(s)","\t_api_register( [","\t\t'columns().order()',","\t\t'column().order()'","\t], function ( dir ) {","\t\tvar that = this;","\t","\t\treturn this.iterator( 'table', function ( settings, i ) {","\t\t\tvar sort = [];","\t","\t\t\t$.each( that[i], function (j, col) {","\t\t\t\tsort.push( [ col, dir ] );","\t\t\t} );","\t","\t\t\tsettings.aaSorting = sort;","\t\t} );","\t} );","\t","\t","\t","\t_api_register( 'search()', function ( input, regex, smart, caseInsen ) {","\t\tvar ctx = this.context;","\t","\t\tif ( input === undefined ) {","\t\t\t// get","\t\t\treturn ctx.length !== 0 ?","\t\t\t\tctx[0].oPreviousSearch.sSearch :","\t\t\t\tundefined;","\t\t}","\t","\t\t// set","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\tif ( ! settings.oFeatures.bFilter ) {","\t\t\t\treturn;","\t\t\t}","\t","\t\t\t_fnFilterComplete( settings, $.extend( {}, settings.oPreviousSearch, {","\t\t\t\t\"sSearch\": input+\"\",","\t\t\t\t\"bRegex\":  regex === null ? false : regex,","\t\t\t\t\"bSmart\":  smart === null ? true  : smart,","\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen","\t\t\t} ), 1 );","\t\t} );","\t} );","\t","\t","\t_api_registerPlural(","\t\t'columns().search()',","\t\t'column().search()',","\t\tfunction ( input, regex, smart, caseInsen ) {","\t\t\treturn this.iterator( 'column', function ( settings, column ) {","\t\t\t\tvar preSearch = settings.aoPreSearchCols;","\t","\t\t\t\tif ( input === undefined ) {","\t\t\t\t\t// get","\t\t\t\t\treturn preSearch[ column ].sSearch;","\t\t\t\t}","\t","\t\t\t\t// set","\t\t\t\tif ( ! settings.oFeatures.bFilter ) {","\t\t\t\t\treturn;","\t\t\t\t}","\t","\t\t\t\t$.extend( preSearch[ column ], {","\t\t\t\t\t\"sSearch\": input+\"\",","\t\t\t\t\t\"bRegex\":  regex === null ? false : regex,","\t\t\t\t\t\"bSmart\":  smart === null ? true  : smart,","\t\t\t\t\t\"bCaseInsensitive\": caseInsen === null ? true : caseInsen","\t\t\t\t} );","\t","\t\t\t\t_fnFilterComplete( settings, settings.oPreviousSearch, 1 );","\t\t\t} );","\t\t}","\t);","\t","\t/*","\t * State API methods","\t */","\t","\t_api_register( 'state()', function () {","\t\treturn this.context.length ?","\t\t\tthis.context[0].oSavedState :","\t\t\tnull;","\t} );","\t","\t","\t_api_register( 'state.clear()', function () {","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\t// Save an empty object","\t\t\tsettings.fnStateSaveCallback.call( settings.oInstance, settings, {} );","\t\t} );","\t} );","\t","\t","\t_api_register( 'state.loaded()', function () {","\t\treturn this.context.length ?","\t\t\tthis.context[0].oLoadedState :","\t\t\tnull;","\t} );","\t","\t","\t_api_register( 'state.save()', function () {","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\t_fnSaveState( settings );","\t\t} );","\t} );","\t","\t","\t","\t/**","\t * Provide a common method for plug-ins to check the version of DataTables being","\t * used, in order to ensure compatibility.","\t *","\t *  @param {string} version Version string to check for, in the format \"X.Y.Z\".","\t *    Note that the formats \"X\" and \"X.Y\" are also acceptable.","\t *  @returns {boolean} true if this version of DataTables is greater or equal to","\t *    the required version, or false if this version of DataTales is not","\t *    suitable","\t *  @static","\t *  @dtopt API-Static","\t *","\t *  @example","\t *    alert( $.fn.dataTable.versionCheck( '1.9.0' ) );","\t */","\tDataTable.versionCheck = DataTable.fnVersionCheck = function( version )","\t{","\t\tvar aThis = DataTable.version.split('.');","\t\tvar aThat = version.split('.');","\t\tvar iThis, iThat;","\t","\t\tfor ( var i=0, iLen=aThat.length ; i<iLen ; i++ ) {","\t\t\tiThis = parseInt( aThis[i], 10 ) || 0;","\t\t\tiThat = parseInt( aThat[i], 10 ) || 0;","\t","\t\t\t// Parts are the same, keep comparing","\t\t\tif (iThis === iThat) {","\t\t\t\tcontinue;","\t\t\t}","\t","\t\t\t// Parts are different, return immediately","\t\t\treturn iThis > iThat;","\t\t}","\t","\t\treturn true;","\t};","\t","\t","\t/**","\t * Check if a `<table>` node is a DataTable table already or not.","\t *","\t *  @param {node|jquery|string} table Table node, jQuery object or jQuery","\t *      selector for the table to test. Note that if more than more than one","\t *      table is passed on, only the first will be checked","\t *  @returns {boolean} true the table given is a DataTable, or false otherwise","\t *  @static","\t *  @dtopt API-Static","\t *","\t *  @example","\t *    if ( ! $.fn.DataTable.isDataTable( '#example' ) ) {","\t *      $('#example').dataTable();","\t *    }","\t */","\tDataTable.isDataTable = DataTable.fnIsDataTable = function ( table )","\t{","\t\tvar t = $(table).get(0);","\t\tvar is = false;","\t","\t\t$.each( DataTable.settings, function (i, o) {","\t\t\tvar head = o.nScrollHead ? $('table', o.nScrollHead)[0] : null;","\t\t\tvar foot = o.nScrollFoot ? $('table', o.nScrollFoot)[0] : null;","\t","\t\t\tif ( o.nTable === t || head === t || foot === t ) {","\t\t\t\tis = true;","\t\t\t}","\t\t} );","\t","\t\treturn is;","\t};","\t","\t","\t/**","\t * Get all DataTable tables that have been initialised - optionally you can","\t * select to get only currently visible tables.","\t *","\t *  @param {boolean} [visible=false] Flag to indicate if you want all (default)","\t *    or visible tables only.","\t *  @returns {array} Array of `table` nodes (not DataTable instances) which are","\t *    DataTables","\t *  @static","\t *  @dtopt API-Static","\t *","\t *  @example","\t *    $.each( $.fn.dataTable.tables(true), function () {","\t *      $(table).DataTable().columns.adjust();","\t *    } );","\t */","\tDataTable.tables = DataTable.fnTables = function ( visible )","\t{","\t\treturn $.map( DataTable.settings, function (o) {","\t\t\tif ( !visible || (visible && $(o.nTable).is(':visible')) ) {","\t\t\t\treturn o.nTable;","\t\t\t}","\t\t} );","\t};","\t","\t","\t/**","\t * DataTables utility methods","\t * ","\t * This namespace provides helper methods that DataTables uses internally to","\t * create a DataTable, but which are not exclusively used only for DataTables.","\t * These methods can be used by extension authors to save the duplication of","\t * code.","\t *","\t *  @namespace","\t */","\tDataTable.util = {","\t\t/**","\t\t * Throttle the calls to a function. Arguments and context are maintained","\t\t * for the throttled function.","\t\t *","\t\t * @param {function} fn Function to be called","\t\t * @param {integer} freq Call frequency in mS","\t\t * @return {function} Wrapped function","\t\t */","\t\tthrottle: _fnThrottle,","\t","\t","\t\t/**","\t\t * Escape a string such that it can be used in a regular expression","\t\t *","\t\t *  @param {string} sVal string to escape","\t\t *  @returns {string} escaped string","\t\t */","\t\tescapeRegex: _fnEscapeRegex","\t};","\t","\t","\t/**","\t * Convert from camel case parameters to Hungarian notation. This is made public","\t * for the extensions to provide the same ability as DataTables core to accept","\t * either the 1.9 style Hungarian notation, or the 1.10+ style camelCase","\t * parameters.","\t *","\t *  @param {object} src The model object which holds all parameters that can be","\t *    mapped.","\t *  @param {object} user The object to convert from camel case to Hungarian.","\t *  @param {boolean} force When set to `true`, properties which already have a","\t *    Hungarian value in the `user` object will be overwritten. Otherwise they","\t *    won't be.","\t */","\tDataTable.camelToHungarian = _fnCamelToHungarian;","\t","\t","\t","\t/**","\t *","\t */","\t_api_register( '$()', function ( selector, opts ) {","\t\tvar","\t\t\trows   = this.rows( opts ).nodes(), // Get all rows","\t\t\tjqRows = $(rows);","\t","\t\treturn $( [].concat(","\t\t\tjqRows.filter( selector ).toArray(),","\t\t\tjqRows.find( selector ).toArray()","\t\t) );","\t} );","\t","\t","\t// jQuery functions to operate on the tables","\t$.each( [ 'on', 'one', 'off' ], function (i, key) {","\t\t_api_register( key+'()', function ( /* event, handler */ ) {","\t\t\tvar args = Array.prototype.slice.call(arguments);","\t","\t\t\t// Add the `dt` namespace automatically if it isn't already present","\t\t\tif ( ! args[0].match(/\\.dt\\b/) ) {","\t\t\t\targs[0] += '.dt';","\t\t\t}","\t","\t\t\tvar inst = $( this.tables().nodes() );","\t\t\tinst[key].apply( inst, args );","\t\t\treturn this;","\t\t} );","\t} );","\t","\t","\t_api_register( 'clear()', function () {","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\t_fnClearTable( settings );","\t\t} );","\t} );","\t","\t","\t_api_register( 'settings()', function () {","\t\treturn new _Api( this.context, this.context );","\t} );","\t","\t","\t_api_register( 'init()', function () {","\t\tvar ctx = this.context;","\t\treturn ctx.length ? ctx[0].oInit : null;","\t} );","\t","\t","\t_api_register( 'data()', function () {","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\treturn _pluck( settings.aoData, '_aData' );","\t\t} ).flatten();","\t} );","\t","\t","\t_api_register( 'destroy()', function ( remove ) {","\t\tremove = remove || false;","\t","\t\treturn this.iterator( 'table', function ( settings ) {","\t\t\tvar orig      = settings.nTableWrapper.parentNode;","\t\t\tvar classes   = settings.oClasses;","\t\t\tvar table     = settings.nTable;","\t\t\tvar tbody     = settings.nTBody;","\t\t\tvar thead     = settings.nTHead;","\t\t\tvar tfoot     = settings.nTFoot;","\t\t\tvar jqTable   = $(table);","\t\t\tvar jqTbody   = $(tbody);","\t\t\tvar jqWrapper = $(settings.nTableWrapper);","\t\t\tvar rows      = $.map( settings.aoData, function (r) { return r.nTr; } );","\t\t\tvar i, ien;","\t","\t\t\t// Flag to note that the table is currently being destroyed - no action","\t\t\t// should be taken","\t\t\tsettings.bDestroying = true;","\t","\t\t\t// Fire off the destroy callbacks for plug-ins etc","\t\t\t_fnCallbackFire( settings, \"aoDestroyCallback\", \"destroy\", [settings] );","\t","\t\t\t// If not being removed from the document, make all columns visible","\t\t\tif ( ! remove ) {","\t\t\t\tnew _Api( settings ).columns().visible( true );","\t\t\t}","\t","\t\t\t// Blitz all `DT` namespaced events (these are internal events, the","\t\t\t// lowercase, `dt` events are user subscribed and they are responsible","\t\t\t// for removing them","\t\t\tjqWrapper.unbind('.DT').find(':not(tbody *)').unbind('.DT');","\t\t\t$(window).unbind('.DT-'+settings.sInstance);","\t","\t\t\t// When scrolling we had to break the table up - restore it","\t\t\tif ( table != thead.parentNode ) {","\t\t\t\tjqTable.children('thead').detach();","\t\t\t\tjqTable.append( thead );","\t\t\t}","\t","\t\t\tif ( tfoot && table != tfoot.parentNode ) {","\t\t\t\tjqTable.children('tfoot').detach();","\t\t\t\tjqTable.append( tfoot );","\t\t\t}","\t","\t\t\t// Remove the DataTables generated nodes, events and classes","\t\t\tjqTable.detach();","\t\t\tjqWrapper.detach();","\t","\t\t\tsettings.aaSorting = [];","\t\t\tsettings.aaSortingFixed = [];","\t\t\t_fnSortingClasses( settings );","\t","\t\t\t$( rows ).removeClass( settings.asStripeClasses.join(' ') );","\t","\t\t\t$('th, td', thead).removeClass( classes.sSortable+' '+","\t\t\t\tclasses.sSortableAsc+' '+classes.sSortableDesc+' '+classes.sSortableNone","\t\t\t);","\t","\t\t\tif ( settings.bJUI ) {","\t\t\t\t$('th span.'+classes.sSortIcon+ ', td span.'+classes.sSortIcon, thead).detach();","\t\t\t\t$('th, td', thead).each( function () {","\t\t\t\t\tvar wrapper = $('div.'+classes.sSortJUIWrapper, this);","\t\t\t\t\t$(this).append( wrapper.contents() );","\t\t\t\t\twrapper.detach();","\t\t\t\t} );","\t\t\t}","\t","\t\t\tif ( ! remove && orig ) {","\t\t\t\t// insertBefore acts like appendChild if !arg[1]","\t\t\t\torig.insertBefore( table, settings.nTableReinsertBefore );","\t\t\t}","\t","\t\t\t// Add the TR elements back into the table in their original order","\t\t\tjqTbody.children().detach();","\t\t\tjqTbody.append( rows );","\t","\t\t\t// Restore the width of the original table - was read from the style property,","\t\t\t// so we can restore directly to that","\t\t\tjqTable","\t\t\t\t.css( 'width', settings.sDestroyWidth )","\t\t\t\t.removeClass( classes.sTable );","\t","\t\t\t// If the were originally stripe classes - then we add them back here.","\t\t\t// Note this is not fool proof (for example if not all rows had stripe","\t\t\t// classes - but it's a good effort without getting carried away","\t\t\tien = settings.asDestroyStripes.length;","\t","\t\t\tif ( ien ) {","\t\t\t\tjqTbody.children().each( function (i) {","\t\t\t\t\t$(this).addClass( settings.asDestroyStripes[i % ien] );","\t\t\t\t} );","\t\t\t}","\t","\t\t\t/* Remove the settings object from the settings array */","\t\t\tvar idx = $.inArray( settings, DataTable.settings );","\t\t\tif ( idx !== -1 ) {","\t\t\t\tDataTable.settings.splice( idx, 1 );","\t\t\t}","\t\t} );","\t} );","\t","\t","\t// Add the `every()` method for rows, columns and cells in a compact form","\t$.each( [ 'column', 'row', 'cell' ], function ( i, type ) {","\t\t_api_register( type+'s().every()', function ( fn ) {","\t\t\treturn this.iterator( type, function ( settings, idx, idx2 ) {","\t\t\t\t// idx2 is undefined for rows and columns.","\t\t\t\tfn.call( new _Api( settings )[ type ]( idx, idx2 ) );","\t\t\t} );","\t\t} );","\t} );","\t","","\t/**","\t * Version string for plug-ins to check compatibility. Allowed format is","\t * `a.b.c-d` where: a:int, b:int, c:int, d:string(dev|beta|alpha). `d` is used","\t * only for non-release builds. See http://semver.org/ for more information.","\t *  @member","\t *  @type string","\t *  @default Version number","\t */","\tDataTable.version = \"1.10.6\";","","\t/**","\t * Private data store, containing all of the settings objects that are","\t * created for the tables on a given page.","\t *","\t * Note that the `DataTable.settings` object is aliased to","\t * `jQuery.fn.dataTableExt` through which it may be accessed and","\t * manipulated, or `jQuery.fn.dataTable.settings`.","\t *  @member","\t *  @type array","\t *  @default []","\t *  @private","\t */","\tDataTable.settings = [];","","\t/**","\t * Object models container, for the various models that DataTables has","\t * available to it. These models define the objects that are used to hold","\t * the active state and configuration of the table.","\t *  @namespace","\t */","\tDataTable.models = {};","\t","\t","\t","\t/**","\t * Template object for the way in which DataTables holds information about","\t * search information for the global filter and individual column filters.","\t *  @namespace","\t */","\tDataTable.models.oSearch = {","\t\t/**","\t\t * Flag to indicate if the filtering should be case insensitive or not","\t\t *  @type boolean","\t\t *  @default true","\t\t */","\t\t\"bCaseInsensitive\": true,","\t","\t\t/**","\t\t * Applied search term","\t\t *  @type string","\t\t *  @default <i>Empty string</i>","\t\t */","\t\t\"sSearch\": \"\",","\t","\t\t/**","\t\t * Flag to indicate if the search term should be interpreted as a","\t\t * regular expression (true) or not (false) and therefore and special","\t\t * regex characters escaped.","\t\t *  @type boolean","\t\t *  @default false","\t\t */","\t\t\"bRegex\": false,","\t","\t\t/**","\t\t * Flag to indicate if DataTables is to use its smart filtering or not.","\t\t *  @type boolean","\t\t *  @default true","\t\t */","\t\t\"bSmart\": true","\t};","\t","\t","\t","\t","\t/**","\t * Template object for the way in which DataTables holds information about","\t * each individual row. This is the object format used for the settings","\t * aoData array.","\t *  @namespace","\t */","\tDataTable.models.oRow = {","\t\t/**","\t\t * TR element for the row","\t\t *  @type node","\t\t *  @default null","\t\t */","\t\t\"nTr\": null,","\t","\t\t/**","\t\t * Array of TD elements for each row. This is null until the row has been","\t\t * created.","\t\t *  @type array nodes","\t\t *  @default []","\t\t */","\t\t\"anCells\": null,","\t","\t\t/**","\t\t * Data object from the original data source for the row. This is either","\t\t * an array if using the traditional form of DataTables, or an object if","\t\t * using mData options. The exact type will depend on the passed in","\t\t * data from the data source, or will be an array if using DOM a data","\t\t * source.","\t\t *  @type array|object","\t\t *  @default []","\t\t */","\t\t\"_aData\": [],","\t","\t\t/**","\t\t * Sorting data cache - this array is ostensibly the same length as the","\t\t * number of columns (although each index is generated only as it is","\t\t * needed), and holds the data that is used for sorting each column in the","\t\t * row. We do this cache generation at the start of the sort in order that","\t\t * the formatting of the sort data need be done only once for each cell","\t\t * per sort. This array should not be read from or written to by anything","\t\t * other than the master sorting methods.","\t\t *  @type array","\t\t *  @default null","\t\t *  @private","\t\t */","\t\t\"_aSortData\": null,","\t","\t\t/**","\t\t * Per cell filtering data cache. As per the sort data cache, used to","\t\t * increase the performance of the filtering in DataTables","\t\t *  @type array","\t\t *  @default null","\t\t *  @private","\t\t */","\t\t\"_aFilterData\": null,","\t","\t\t/**","\t\t * Filtering data cache. This is the same as the cell filtering cache, but","\t\t * in this case a string rather than an array. This is easily computed with","\t\t * a join on `_aFilterData`, but is provided as a cache so the join isn't","\t\t * needed on every search (memory traded for performance)","\t\t *  @type array","\t\t *  @default null","\t\t *  @private","\t\t */","\t\t\"_sFilterRow\": null,","\t","\t\t/**","\t\t * Cache of the class name that DataTables has applied to the row, so we","\t\t * can quickly look at this variable rather than needing to do a DOM check","\t\t * on className for the nTr property.","\t\t *  @type string","\t\t *  @default <i>Empty string</i>","\t\t *  @private","\t\t */","\t\t\"_sRowStripe\": \"\",","\t","\t\t/**","\t\t * Denote if the original data source was from the DOM, or the data source","\t\t * object. This is used for invalidating data, so DataTables can","\t\t * automatically read data from the original source, unless uninstructed","\t\t * otherwise.","\t\t *  @type string","\t\t *  @default null","\t\t *  @private","\t\t */","\t\t\"src\": null","\t};","\t","\t","\t/**","\t * Template object for the column information object in DataTables. This object","\t * is held in the settings aoColumns array and contains all the information that","\t * DataTables needs about each individual column.","\t *","\t * Note that this object is related to {@link DataTable.defaults.column}","\t * but this one is the internal data store for DataTables's cache of columns.","\t * It should NOT be manipulated outside of DataTables. Any configuration should","\t * be done through the initialisation options.","\t *  @namespace","\t */","\tDataTable.models.oColumn = {","\t\t/**","\t\t * Column index. This could be worked out on-the-fly with $.inArray, but it","\t\t * is faster to just hold it as a variable","\t\t *  @type integer","\t\t *  @default null","\t\t */","\t\t\"idx\": null,","\t","\t\t/**","\t\t * A list of the columns that sorting should occur on when this column","\t\t * is sorted. That this property is an array allows multi-column sorting","\t\t * to be defined for a column (for example first name / last name columns","\t\t * would benefit from this). The values are integers pointing to the","\t\t * columns to be sorted on (typically it will be a single integer pointing","\t\t * at itself, but that doesn't need to be the case).","\t\t *  @type array","\t\t */","\t\t\"aDataSort\": null,","\t","\t\t/**","\t\t * Define the sorting directions that are applied to the column, in sequence","\t\t * as the column is repeatedly sorted upon - i.e. the first value is used","\t\t * as the sorting direction when the column if first sorted (clicked on).","\t\t * Sort it again (click again) and it will move on to the next index.","\t\t * Repeat until loop.","\t\t *  @type array","\t\t */","\t\t\"asSorting\": null,","\t","\t\t/**","\t\t * Flag to indicate if the column is searchable, and thus should be included","\t\t * in the filtering or not.","\t\t *  @type boolean","\t\t */","\t\t\"bSearchable\": null,","\t","\t\t/**","\t\t * Flag to indicate if the column is sortable or not.","\t\t *  @type boolean","\t\t */","\t\t\"bSortable\": null,","\t","\t\t/**","\t\t * Flag to indicate if the column is currently visible in the table or not","\t\t *  @type boolean","\t\t */","\t\t\"bVisible\": null,","\t","\t\t/**","\t\t * Store for manual type assignment using the `column.type` option. This","\t\t * is held in store so we can manipulate the column's `sType` property.","\t\t *  @type string","\t\t *  @default null","\t\t *  @private","\t\t */","\t\t\"_sManualType\": null,","\t","\t\t/**","\t\t * Flag to indicate if HTML5 data attributes should be used as the data","\t\t * source for filtering or sorting. True is either are.","\t\t *  @type boolean","\t\t *  @default false","\t\t *  @private","\t\t */","\t\t\"_bAttrSrc\": false,","\t","\t\t/**","\t\t * Developer definable function that is called whenever a cell is created (Ajax source,","\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender","\t\t * allowing you to modify the DOM element (add background colour for example) when the","\t\t * element is available.","\t\t *  @type function","\t\t *  @param {element} nTd The TD node that has been created","\t\t *  @param {*} sData The Data for the cell","\t\t *  @param {array|object} oData The data for the whole row","\t\t *  @param {int} iRow The row index for the aoData data store","\t\t *  @default null","\t\t */","\t\t\"fnCreatedCell\": null,","\t","\t\t/**","\t\t * Function to get data from a cell in a column. You should <b>never</b>","\t\t * access data directly through _aData internally in DataTables - always use","\t\t * the method attached to this property. It allows mData to function as","\t\t * required. This function is automatically assigned by the column","\t\t * initialisation method","\t\t *  @type function","\t\t *  @param {array|object} oData The data array/object for the array","\t\t *    (i.e. aoData[]._aData)","\t\t *  @param {string} sSpecific The specific data type you want to get -","\t\t *    'display', 'type' 'filter' 'sort'","\t\t *  @returns {*} The data for the cell from the given row's data","\t\t *  @default null","\t\t */","\t\t\"fnGetData\": null,","\t","\t\t/**","\t\t * Function to set data for a cell in the column. You should <b>never</b>","\t\t * set the data directly to _aData internally in DataTables - always use","\t\t * this method. It allows mData to function as required. This function","\t\t * is automatically assigned by the column initialisation method","\t\t *  @type function","\t\t *  @param {array|object} oData The data array/object for the array","\t\t *    (i.e. aoData[]._aData)","\t\t *  @param {*} sValue Value to set","\t\t *  @default null","\t\t */","\t\t\"fnSetData\": null,","\t","\t\t/**","\t\t * Property to read the value for the cells in the column from the data","\t\t * source array / object. If null, then the default content is used, if a","\t\t * function is given then the return from the function is used.","\t\t *  @type function|int|string|null","\t\t *  @default null","\t\t */","\t\t\"mData\": null,","\t","\t\t/**","\t\t * Partner property to mData which is used (only when defined) to get","\t\t * the data - i.e. it is basically the same as mData, but without the","\t\t * 'set' option, and also the data fed to it is the result from mData.","\t\t * This is the rendering method to match the data method of mData.","\t\t *  @type function|int|string|null","\t\t *  @default null","\t\t */","\t\t\"mRender\": null,","\t","\t\t/**","\t\t * Unique header TH/TD element for this column - this is what the sorting","\t\t * listener is attached to (if sorting is enabled.)","\t\t *  @type node","\t\t *  @default null","\t\t */","\t\t\"nTh\": null,","\t","\t\t/**","\t\t * Unique footer TH/TD element for this column (if there is one). Not used","\t\t * in DataTables as such, but can be used for plug-ins to reference the","\t\t * footer for each column.","\t\t *  @type node","\t\t *  @default null","\t\t */","\t\t\"nTf\": null,","\t","\t\t/**","\t\t * The class to apply to all TD elements in the table's TBODY for the column","\t\t *  @type string","\t\t *  @default null","\t\t */","\t\t\"sClass\": null,","\t","\t\t/**","\t\t * When DataTables calculates the column widths to assign to each column,","\t\t * it finds the longest string in each column and then constructs a","\t\t * temporary table and reads the widths from that. The problem with this","\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer","\t\t * string - thus the calculation can go wrong (doing it properly and putting","\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as","\t\t * a \"work around\" we provide this option. It will append its value to the","\t\t * text that is found to be the longest string for the column - i.e. padding.","\t\t *  @type string","\t\t */","\t\t\"sContentPadding\": null,","\t","\t\t/**","\t\t * Allows a default value to be given for a column's data, and will be used","\t\t * whenever a null data source is encountered (this can be because mData","\t\t * is set to null, or because the data source itself is null).","\t\t *  @type string","\t\t *  @default null","\t\t */","\t\t\"sDefaultContent\": null,","\t","\t\t/**","\t\t * Name for the column, allowing reference to the column by name as well as","\t\t * by index (needs a lookup to work by name).","\t\t *  @type string","\t\t */","\t\t\"sName\": null,","\t","\t\t/**","\t\t * Custom sorting data type - defines which of the available plug-ins in","\t\t * afnSortData the custom sorting will use - if any is defined.","\t\t *  @type string","\t\t *  @default std","\t\t */","\t\t\"sSortDataType\": 'std',","\t","\t\t/**","\t\t * Class to be applied to the header element when sorting on this column","\t\t *  @type string","\t\t *  @default null","\t\t */","\t\t\"sSortingClass\": null,","\t","\t\t/**","\t\t * Class to be applied to the header element when sorting on this column -","\t\t * when jQuery UI theming is used.","\t\t *  @type string","\t\t *  @default null","\t\t */","\t\t\"sSortingClassJUI\": null,","\t","\t\t/**","\t\t * Title of the column - what is seen in the TH element (nTh).","\t\t *  @type string","\t\t */","\t\t\"sTitle\": null,","\t","\t\t/**","\t\t * Column sorting and filtering type","\t\t *  @type string","\t\t *  @default null","\t\t */","\t\t\"sType\": null,","\t","\t\t/**","\t\t * Width of the column","\t\t *  @type string","\t\t *  @default null","\t\t */","\t\t\"sWidth\": null,","\t","\t\t/**","\t\t * Width of the column when it was first \"encountered\"","\t\t *  @type string","\t\t *  @default null","\t\t */","\t\t\"sWidthOrig\": null","\t};","\t","\t","\t/*","\t * Developer note: The properties of the object below are given in Hungarian","\t * notation, that was used as the interface for DataTables prior to v1.10, however","\t * from v1.10 onwards the primary interface is camel case. In order to avoid","\t * breaking backwards compatibility utterly with this change, the Hungarian","\t * version is still, internally the primary interface, but is is not documented","\t * - hence the @name tags in each doc comment. This allows a Javascript function","\t * to create a map from Hungarian notation to camel case (going the other direction","\t * would require each property to be listed, which would at around 3K to the size","\t * of DataTables, while this method is about a 0.5K hit.","\t *","\t * Ultimately this does pave the way for Hungarian notation to be dropped","\t * completely, but that is a massive amount of work and will break current","\t * installs (therefore is on-hold until v2).","\t */","\t","\t/**","\t * Initialisation options that can be given to DataTables at initialisation","\t * time.","\t *  @namespace","\t */","\tDataTable.defaults = {","\t\t/**","\t\t * An array of data to use for the table, passed in at initialisation which","\t\t * will be used in preference to any data which is already in the DOM. This is","\t\t * particularly useful for constructing tables purely in Javascript, for","\t\t * example with a custom Ajax call.","\t\t *  @type array","\t\t *  @default null","\t\t *","\t\t *  @dtopt Option","\t\t *  @name DataTable.defaults.data","\t\t *","\t\t *  @example","\t\t *    // Using a 2D array data source","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"data\": [","\t\t *          ['Trident', 'Internet Explorer 4.0', 'Win 95+', 4, 'X'],","\t\t *          ['Trident', 'Internet Explorer 5.0', 'Win 95+', 5, 'C'],","\t\t *        ],","\t\t *        \"columns\": [","\t\t *          { \"title\": \"Engine\" },","\t\t *          { \"title\": \"Browser\" },","\t\t *          { \"title\": \"Platform\" },","\t\t *          { \"title\": \"Version\" },","\t\t *          { \"title\": \"Grade\" }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using an array of objects as a data source (`data`)","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"data\": [","\t\t *          {","\t\t *            \"engine\":   \"Trident\",","\t\t *            \"browser\":  \"Internet Explorer 4.0\",","\t\t *            \"platform\": \"Win 95+\",","\t\t *            \"version\":  4,","\t\t *            \"grade\":    \"X\"","\t\t *          },","\t\t *          {","\t\t *            \"engine\":   \"Trident\",","\t\t *            \"browser\":  \"Internet Explorer 5.0\",","\t\t *            \"platform\": \"Win 95+\",","\t\t *            \"version\":  5,","\t\t *            \"grade\":    \"C\"","\t\t *          }","\t\t *        ],","\t\t *        \"columns\": [","\t\t *          { \"title\": \"Engine\",   \"data\": \"engine\" },","\t\t *          { \"title\": \"Browser\",  \"data\": \"browser\" },","\t\t *          { \"title\": \"Platform\", \"data\": \"platform\" },","\t\t *          { \"title\": \"Version\",  \"data\": \"version\" },","\t\t *          { \"title\": \"Grade\",    \"data\": \"grade\" }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"aaData\": null,","\t","\t","\t\t/**","\t\t * If ordering is enabled, then DataTables will perform a first pass sort on","\t\t * initialisation. You can define which column(s) the sort is performed","\t\t * upon, and the sorting direction, with this variable. The `sorting` array","\t\t * should contain an array for each column to be sorted initially containing","\t\t * the column's index and a direction string ('asc' or 'desc').","\t\t *  @type array","\t\t *  @default [[0,'asc']]","\t\t *","\t\t *  @dtopt Option","\t\t *  @name DataTable.defaults.order","\t\t *","\t\t *  @example","\t\t *    // Sort by 3rd column first, and then 4th column","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"order\": [[2,'asc'], [3,'desc']]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *    // No initial sorting","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"order\": []","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"aaSorting\": [[0,'asc']],","\t","\t","\t\t/**","\t\t * This parameter is basically identical to the `sorting` parameter, but","\t\t * cannot be overridden by user interaction with the table. What this means","\t\t * is that you could have a column (visible or hidden) which the sorting","\t\t * will always be forced on first - any sorting after that (from the user)","\t\t * will then be performed as required. This can be useful for grouping rows","\t\t * together.","\t\t *  @type array","\t\t *  @default null","\t\t *","\t\t *  @dtopt Option","\t\t *  @name DataTable.defaults.orderFixed","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"orderFixed\": [[0,'asc']]","\t\t *      } );","\t\t *    } )","\t\t */","\t\t\"aaSortingFixed\": [],","\t","\t","\t\t/**","\t\t * DataTables can be instructed to load data to display in the table from a","\t\t * Ajax source. This option defines how that Ajax call is made and where to.","\t\t *","\t\t * The `ajax` property has three different modes of operation, depending on","\t\t * how it is defined. These are:","\t\t *","\t\t * * `string` - Set the URL from where the data should be loaded from.","\t\t * * `object` - Define properties for `jQuery.ajax`.","\t\t * * `function` - Custom data get function","\t\t *","\t\t * `string`","\t\t * --------","\t\t *","\t\t * As a string, the `ajax` property simply defines the URL from which","\t\t * DataTables will load data.","\t\t *","\t\t * `object`","\t\t * --------","\t\t *","\t\t * As an object, the parameters in the object are passed to","\t\t * [jQuery.ajax](http://api.jquery.com/jQuery.ajax/) allowing fine control","\t\t * of the Ajax request. DataTables has a number of default parameters which","\t\t * you can override using this option. Please refer to the jQuery","\t\t * documentation for a full description of the options available, although","\t\t * the following parameters provide additional options in DataTables or","\t\t * require special consideration:","\t\t *","\t\t * * `data` - As with jQuery, `data` can be provided as an object, but it","\t\t *   can also be used as a function to manipulate the data DataTables sends","\t\t *   to the server. The function takes a single parameter, an object of","\t\t *   parameters with the values that DataTables has readied for sending. An","\t\t *   object may be returned which will be merged into the DataTables","\t\t *   defaults, or you can add the items to the object that was passed in and","\t\t *   not return anything from the function. This supersedes `fnServerParams`","\t\t *   from DataTables 1.9-.","\t\t *","\t\t * * `dataSrc` - By default DataTables will look for the property `data` (or","\t\t *   `aaData` for compatibility with DataTables 1.9-) when obtaining data","\t\t *   from an Ajax source or for server-side processing - this parameter","\t\t *   allows that property to be changed. You can use Javascript dotted","\t\t *   object notation to get a data source for multiple levels of nesting, or","\t\t *   it my be used as a function. As a function it takes a single parameter,","\t\t *   the JSON returned from the server, which can be manipulated as","\t\t *   required, with the returned value being that used by DataTables as the","\t\t *   data source for the table. This supersedes `sAjaxDataProp` from","\t\t *   DataTables 1.9-.","\t\t *","\t\t * * `success` - Should not be overridden it is used internally in","\t\t *   DataTables. To manipulate / transform the data returned by the server","\t\t *   use `ajax.dataSrc`, or use `ajax` as a function (see below).","\t\t *","\t\t * `function`","\t\t * ----------","\t\t *","\t\t * As a function, making the Ajax call is left up to yourself allowing","\t\t * complete control of the Ajax request. Indeed, if desired, a method other","\t\t * than Ajax could be used to obtain the required data, such as Web storage","\t\t * or an AIR database.","\t\t *","\t\t * The function is given four parameters and no return is required. The","\t\t * parameters are:","\t\t *","\t\t * 1. _object_ - Data to send to the server","\t\t * 2. _function_ - Callback function that must be executed when the required","\t\t *    data has been obtained. That data should be passed into the callback","\t\t *    as the only parameter","\t\t * 3. _object_ - DataTables settings object for the table","\t\t *","\t\t * Note that this supersedes `fnServerData` from DataTables 1.9-.","\t\t *","\t\t *  @type string|object|function","\t\t *  @default null","\t\t *","\t\t *  @dtopt Option","\t\t *  @name DataTable.defaults.ajax","\t\t *  @since 1.10.0","\t\t *","\t\t * @example","\t\t *   // Get JSON data from a file via Ajax.","\t\t *   // Note DataTables expects data in the form `{ data: [ ...data... ] }` by default).","\t\t *   $('#example').dataTable( {","\t\t *     \"ajax\": \"data.json\"","\t\t *   } );","\t\t *","\t\t * @example","\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to change","\t\t *   // `data` to `tableData` (i.e. `{ tableData: [ ...data... ] }`)","\t\t *   $('#example').dataTable( {","\t\t *     \"ajax\": {","\t\t *       \"url\": \"data.json\",","\t\t *       \"dataSrc\": \"tableData\"","\t\t *     }","\t\t *   } );","\t\t *","\t\t * @example","\t\t *   // Get JSON data from a file via Ajax, using `dataSrc` to read data","\t\t *   // from a plain array rather than an array in an object","\t\t *   $('#example').dataTable( {","\t\t *     \"ajax\": {","\t\t *       \"url\": \"data.json\",","\t\t *       \"dataSrc\": \"\"","\t\t *     }","\t\t *   } );","\t\t *","\t\t * @example","\t\t *   // Manipulate the data returned from the server - add a link to data","\t\t *   // (note this can, should, be done using `render` for the column - this","\t\t *   // is just a simple example of how the data can be manipulated).","\t\t *   $('#example').dataTable( {","\t\t *     \"ajax\": {","\t\t *       \"url\": \"data.json\",","\t\t *       \"dataSrc\": function ( json ) {","\t\t *         for ( var i=0, ien=json.length ; i<ien ; i++ ) {","\t\t *           json[i][0] = '<a href=\"/message/'+json[i][0]+'>View message</a>';","\t\t *         }","\t\t *         return json;","\t\t *       }","\t\t *     }","\t\t *   } );","\t\t *","\t\t * @example","\t\t *   // Add data to the request","\t\t *   $('#example').dataTable( {","\t\t *     \"ajax\": {","\t\t *       \"url\": \"data.json\",","\t\t *       \"data\": function ( d ) {","\t\t *         return {","\t\t *           \"extra_search\": $('#extra').val()","\t\t *         };","\t\t *       }","\t\t *     }","\t\t *   } );","\t\t *","\t\t * @example","\t\t *   // Send request as POST","\t\t *   $('#example').dataTable( {","\t\t *     \"ajax\": {","\t\t *       \"url\": \"data.json\",","\t\t *       \"type\": \"POST\"","\t\t *     }","\t\t *   } );","\t\t *","\t\t * @example","\t\t *   // Get the data from localStorage (could interface with a form for","\t\t *   // adding, editing and removing rows).","\t\t *   $('#example').dataTable( {","\t\t *     \"ajax\": function (data, callback, settings) {","\t\t *       callback(","\t\t *         JSON.parse( localStorage.getItem('dataTablesData') )","\t\t *       );","\t\t *     }","\t\t *   } );","\t\t */","\t\t\"ajax\": null,","\t","\t","\t\t/**","\t\t * This parameter allows you to readily specify the entries in the length drop","\t\t * down menu that DataTables shows when pagination is enabled. It can be","\t\t * either a 1D array of options which will be used for both the displayed","\t\t * option and the value, or a 2D array which will use the array in the first","\t\t * position as the value, and the array in the second position as the","\t\t * displayed options (useful for language strings such as 'All').","\t\t *","\t\t * Note that the `pageLength` property will be automatically set to the","\t\t * first value given in this array, unless `pageLength` is also provided.","\t\t *  @type array","\t\t *  @default [ 10, 25, 50, 100 ]","\t\t *","\t\t *  @dtopt Option","\t\t *  @name DataTable.defaults.lengthMenu","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"aLengthMenu\": [ 10, 25, 50, 100 ],","\t","\t","\t\t/**","\t\t * The `columns` option in the initialisation parameter allows you to define","\t\t * details about the way individual columns behave. For a full list of","\t\t * column options that can be set, please see","\t\t * {@link DataTable.defaults.column}. Note that if you use `columns` to","\t\t * define your columns, you must have an entry in the array for every single","\t\t * column that you have in your table (these can be null if you don't which","\t\t * to specify any options).","\t\t *  @member","\t\t *","\t\t *  @name DataTable.defaults.column","\t\t */","\t\t\"aoColumns\": null,","\t","\t\t/**","\t\t * Very similar to `columns`, `columnDefs` allows you to target a specific","\t\t * column, multiple columns, or all columns, using the `targets` property of","\t\t * each object in the array. This allows great flexibility when creating","\t\t * tables, as the `columnDefs` arrays can be of any length, targeting the","\t\t * columns you specifically want. `columnDefs` may use any of the column","\t\t * options available: {@link DataTable.defaults.column}, but it _must_","\t\t * have `targets` defined in each object in the array. Values in the `targets`","\t\t * array may be:","\t\t *   <ul>","\t\t *     <li>a string - class name will be matched on the TH for the column</li>","\t\t *     <li>0 or a positive integer - column index counting from the left</li>","\t\t *     <li>a negative integer - column index counting from the right</li>","\t\t *     <li>the string \"_all\" - all columns (i.e. assign a default)</li>","\t\t *   </ul>","\t\t *  @member","\t\t *","\t\t *  @name DataTable.defaults.columnDefs","\t\t */","\t\t\"aoColumnDefs\": null,","\t","\t","\t\t/**","\t\t * Basically the same as `search`, this parameter defines the individual column","\t\t * filtering state at initialisation time. The array must be of the same size","\t\t * as the number of columns, and each element be an object with the parameters","\t\t * `search` and `escapeRegex` (the latter is optional). 'null' is also","\t\t * accepted and the default will be used.","\t\t *  @type array","\t\t *  @default []","\t\t *","\t\t *  @dtopt Option","\t\t *  @name DataTable.defaults.searchCols","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"searchCols\": [","\t\t *          null,","\t\t *          { \"search\": \"My filter\" },","\t\t *          null,","\t\t *          { \"search\": \"^[0-9]\", \"escapeRegex\": false }","\t\t *        ]","\t\t *      } );","\t\t *    } )","\t\t */","\t\t\"aoSearchCols\": [],","\t","\t","\t\t/**","\t\t * An array of CSS classes that should be applied to displayed rows. This","\t\t * array may be of any length, and DataTables will apply each class","\t\t * sequentially, looping when required.","\t\t *  @type array","\t\t *  @default null <i>Will take the values determined by the `oClasses.stripe*`","\t\t *    options</i>","\t\t *","\t\t *  @dtopt Option","\t\t *  @name DataTable.defaults.stripeClasses","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"stripeClasses\": [ 'strip1', 'strip2', 'strip3' ]","\t\t *      } );","\t\t *    } )","\t\t */","\t\t\"asStripeClasses\": null,","\t","\t","\t\t/**","\t\t * Enable or disable automatic column width calculation. This can be disabled","\t\t * as an optimisation (it takes some time to calculate the widths) if the","\t\t * tables widths are passed in using `columns`.","\t\t *  @type boolean","\t\t *  @default true","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.autoWidth","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"autoWidth\": false","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bAutoWidth\": true,","\t","\t","\t\t/**","\t\t * Deferred rendering can provide DataTables with a huge speed boost when you","\t\t * are using an Ajax or JS data source for the table. This option, when set to","\t\t * true, will cause DataTables to defer the creation of the table elements for","\t\t * each row until they are needed for a draw - saving a significant amount of","\t\t * time.","\t\t *  @type boolean","\t\t *  @default false","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.deferRender","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"ajax\": \"sources/arrays.txt\",","\t\t *        \"deferRender\": true","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bDeferRender\": false,","\t","\t","\t\t/**","\t\t * Replace a DataTable which matches the given selector and replace it with","\t\t * one which has the properties of the new initialisation object passed. If no","\t\t * table matches the selector, then the new DataTable will be constructed as","\t\t * per normal.","\t\t *  @type boolean","\t\t *  @default false","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.destroy","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"srollY\": \"200px\",","\t\t *        \"paginate\": false","\t\t *      } );","\t\t *","\t\t *      // Some time later....","\t\t *      $('#example').dataTable( {","\t\t *        \"filter\": false,","\t\t *        \"destroy\": true","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bDestroy\": false,","\t","\t","\t\t/**","\t\t * Enable or disable filtering of data. Filtering in DataTables is \"smart\" in","\t\t * that it allows the end user to input multiple words (space separated) and","\t\t * will match a row containing those words, even if not in the order that was","\t\t * specified (this allow matching across multiple columns). Note that if you","\t\t * wish to use filtering in DataTables this must remain 'true' - to remove the","\t\t * default filtering input box and retain filtering abilities, please use","\t\t * {@link DataTable.defaults.dom}.","\t\t *  @type boolean","\t\t *  @default true","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.searching","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"searching\": false","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bFilter\": true,","\t","\t","\t\t/**","\t\t * Enable or disable the table information display. This shows information","\t\t * about the data that is currently visible on the page, including information","\t\t * about filtered data if that action is being performed.","\t\t *  @type boolean","\t\t *  @default true","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.info","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"info\": false","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bInfo\": true,","\t","\t","\t\t/**","\t\t * Enable jQuery UI ThemeRoller support (required as ThemeRoller requires some","\t\t * slightly different and additional mark-up from what DataTables has","\t\t * traditionally used).","\t\t *  @type boolean","\t\t *  @default false","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.jQueryUI","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"jQueryUI\": true","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bJQueryUI\": false,","\t","\t","\t\t/**","\t\t * Allows the end user to select the size of a formatted page from a select","\t\t * menu (sizes are 10, 25, 50 and 100). Requires pagination (`paginate`).","\t\t *  @type boolean","\t\t *  @default true","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.lengthChange","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"lengthChange\": false","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bLengthChange\": true,","\t","\t","\t\t/**","\t\t * Enable or disable pagination.","\t\t *  @type boolean","\t\t *  @default true","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.paging","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"paging\": false","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bPaginate\": true,","\t","\t","\t\t/**","\t\t * Enable or disable the display of a 'processing' indicator when the table is","\t\t * being processed (e.g. a sort). This is particularly useful for tables with","\t\t * large amounts of data where it can take a noticeable amount of time to sort","\t\t * the entries.","\t\t *  @type boolean","\t\t *  @default false","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.processing","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"processing\": true","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bProcessing\": false,","\t","\t","\t\t/**","\t\t * Retrieve the DataTables object for the given selector. Note that if the","\t\t * table has already been initialised, this parameter will cause DataTables","\t\t * to simply return the object that has already been set up - it will not take","\t\t * account of any changes you might have made to the initialisation object","\t\t * passed to DataTables (setting this parameter to true is an acknowledgement","\t\t * that you understand this). `destroy` can be used to reinitialise a table if","\t\t * you need.","\t\t *  @type boolean","\t\t *  @default false","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.retrieve","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      initTable();","\t\t *      tableActions();","\t\t *    } );","\t\t *","\t\t *    function initTable ()","\t\t *    {","\t\t *      return $('#example').dataTable( {","\t\t *        \"scrollY\": \"200px\",","\t\t *        \"paginate\": false,","\t\t *        \"retrieve\": true","\t\t *      } );","\t\t *    }","\t\t *","\t\t *    function tableActions ()","\t\t *    {","\t\t *      var table = initTable();","\t\t *      // perform API operations with oTable","\t\t *    }","\t\t */","\t\t\"bRetrieve\": false,","\t","\t","\t\t/**","\t\t * When vertical (y) scrolling is enabled, DataTables will force the height of","\t\t * the table's viewport to the given height at all times (useful for layout).","\t\t * However, this can look odd when filtering data down to a small data set,","\t\t * and the footer is left \"floating\" further down. This parameter (when","\t\t * enabled) will cause DataTables to collapse the table's viewport down when","\t\t * the result set will fit within the given Y height.","\t\t *  @type boolean","\t\t *  @default false","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.scrollCollapse","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"scrollY\": \"200\",","\t\t *        \"scrollCollapse\": true","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bScrollCollapse\": false,","\t","\t","\t\t/**","\t\t * Configure DataTables to use server-side processing. Note that the","\t\t * `ajax` parameter must also be given in order to give DataTables a","\t\t * source to obtain the required data for each draw.","\t\t *  @type boolean","\t\t *  @default false","\t\t *","\t\t *  @dtopt Features","\t\t *  @dtopt Server-side","\t\t *  @name DataTable.defaults.serverSide","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"serverSide\": true,","\t\t *        \"ajax\": \"xhr.php\"","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bServerSide\": false,","\t","\t","\t\t/**","\t\t * Enable or disable sorting of columns. Sorting of individual columns can be","\t\t * disabled by the `sortable` option for each column.","\t\t *  @type boolean","\t\t *  @default true","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.ordering","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"ordering\": false","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bSort\": true,","\t","\t","\t\t/**","\t\t * Enable or display DataTables' ability to sort multiple columns at the","\t\t * same time (activated by shift-click by the user).","\t\t *  @type boolean","\t\t *  @default true","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.orderMulti","\t\t *","\t\t *  @example","\t\t *    // Disable multiple column sorting ability","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"orderMulti\": false","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bSortMulti\": true,","\t","\t","\t\t/**","\t\t * Allows control over whether DataTables should use the top (true) unique","\t\t * cell that is found for a single column, or the bottom (false - default).","\t\t * This is useful when using complex headers.","\t\t *  @type boolean","\t\t *  @default false","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.orderCellsTop","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"orderCellsTop\": true","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bSortCellsTop\": false,","\t","\t","\t\t/**","\t\t * Enable or disable the addition of the classes `sorting\\_1`, `sorting\\_2` and","\t\t * `sorting\\_3` to the columns which are currently being sorted on. This is","\t\t * presented as a feature switch as it can increase processing time (while","\t\t * classes are removed and added) so for large data sets you might want to","\t\t * turn this off.","\t\t *  @type boolean","\t\t *  @default true","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.orderClasses","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"orderClasses\": false","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bSortClasses\": true,","\t","\t","\t\t/**","\t\t * Enable or disable state saving. When enabled HTML5 `localStorage` will be","\t\t * used to save table display information such as pagination information,","\t\t * display length, filtering and sorting. As such when the end user reloads","\t\t * the page the display display will match what thy had previously set up.","\t\t *","\t\t * Due to the use of `localStorage` the default state saving is not supported","\t\t * in IE6 or 7. If state saving is required in those browsers, use","\t\t * `stateSaveCallback` to provide a storage solution such as cookies.","\t\t *  @type boolean","\t\t *  @default false","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.stateSave","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function () {","\t\t *      $('#example').dataTable( {","\t\t *        \"stateSave\": true","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"bStateSave\": false,","\t","\t","\t\t/**","\t\t * This function is called when a TR element is created (and all TD child","\t\t * elements have been inserted), or registered if using a DOM source, allowing","\t\t * manipulation of the TR element (adding classes etc).","\t\t *  @type function","\t\t *  @param {node} row \"TR\" element for the current row","\t\t *  @param {array} data Raw data array for this row","\t\t *  @param {int} dataIndex The index of this row in the internal aoData array","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.createdRow","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"createdRow\": function( row, data, dataIndex ) {","\t\t *          // Bold the grade for all 'A' grade browsers","\t\t *          if ( data[4] == \"A\" )","\t\t *          {","\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );","\t\t *          }","\t\t *        }","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"fnCreatedRow\": null,","\t","\t","\t\t/**","\t\t * This function is called on every 'draw' event, and allows you to","\t\t * dynamically modify any aspect you want about the created DOM.","\t\t *  @type function","\t\t *  @param {object} settings DataTables settings object","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.drawCallback","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"drawCallback\": function( settings ) {","\t\t *          alert( 'DataTables has redrawn the table' );","\t\t *        }","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"fnDrawCallback\": null,","\t","\t","\t\t/**","\t\t * Identical to fnHeaderCallback() but for the table footer this function","\t\t * allows you to modify the table footer on every 'draw' event.","\t\t *  @type function","\t\t *  @param {node} foot \"TR\" element for the footer","\t\t *  @param {array} data Full table data (as derived from the original HTML)","\t\t *  @param {int} start Index for the current display starting point in the","\t\t *    display array","\t\t *  @param {int} end Index for the current display ending point in the","\t\t *    display array","\t\t *  @param {array int} display Index array to translate the visual position","\t\t *    to the full data array","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.footerCallback","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"footerCallback\": function( tfoot, data, start, end, display ) {","\t\t *          tfoot.getElementsByTagName('th')[0].innerHTML = \"Starting index is \"+start;","\t\t *        }","\t\t *      } );","\t\t *    } )","\t\t */","\t\t\"fnFooterCallback\": null,","\t","\t","\t\t/**","\t\t * When rendering large numbers in the information element for the table","\t\t * (i.e. \"Showing 1 to 10 of 57 entries\") DataTables will render large numbers","\t\t * to have a comma separator for the 'thousands' units (e.g. 1 million is","\t\t * rendered as \"1,000,000\") to help readability for the end user. This","\t\t * function will override the default method DataTables uses.","\t\t *  @type function","\t\t *  @member","\t\t *  @param {int} toFormat number to be formatted","\t\t *  @returns {string} formatted string for DataTables to show the number","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.formatNumber","\t\t *","\t\t *  @example","\t\t *    // Format a number using a single quote for the separator (note that","\t\t *    // this can also be done with the language.thousands option)","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"formatNumber\": function ( toFormat ) {","\t\t *          return toFormat.toString().replace(","\t\t *            /\\B(?=(\\d{3})+(?!\\d))/g, \"'\"","\t\t *          );","\t\t *        };","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"fnFormatNumber\": function ( toFormat ) {","\t\t\treturn toFormat.toString().replace(","\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g,","\t\t\t\tthis.oLanguage.sThousands","\t\t\t);","\t\t},","\t","\t","\t\t/**","\t\t * This function is called on every 'draw' event, and allows you to","\t\t * dynamically modify the header row. This can be used to calculate and","\t\t * display useful information about the table.","\t\t *  @type function","\t\t *  @param {node} head \"TR\" element for the header","\t\t *  @param {array} data Full table data (as derived from the original HTML)","\t\t *  @param {int} start Index for the current display starting point in the","\t\t *    display array","\t\t *  @param {int} end Index for the current display ending point in the","\t\t *    display array","\t\t *  @param {array int} display Index array to translate the visual position","\t\t *    to the full data array","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.headerCallback","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"fheaderCallback\": function( head, data, start, end, display ) {","\t\t *          head.getElementsByTagName('th')[0].innerHTML = \"Displaying \"+(end-start)+\" records\";","\t\t *        }","\t\t *      } );","\t\t *    } )","\t\t */","\t\t\"fnHeaderCallback\": null,","\t","\t","\t\t/**","\t\t * The information element can be used to convey information about the current","\t\t * state of the table. Although the internationalisation options presented by","\t\t * DataTables are quite capable of dealing with most customisations, there may","\t\t * be times where you wish to customise the string further. This callback","\t\t * allows you to do exactly that.","\t\t *  @type function","\t\t *  @param {object} oSettings DataTables settings object","\t\t *  @param {int} start Starting position in data for the draw","\t\t *  @param {int} end End position in data for the draw","\t\t *  @param {int} max Total number of rows in the table (regardless of","\t\t *    filtering)","\t\t *  @param {int} total Total number of rows in the data set, after filtering","\t\t *  @param {string} pre The string that DataTables has formatted using it's","\t\t *    own rules","\t\t *  @returns {string} The string to be displayed in the information element.","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.infoCallback","\t\t *","\t\t *  @example","\t\t *    $('#example').dataTable( {","\t\t *      \"infoCallback\": function( settings, start, end, max, total, pre ) {","\t\t *        return start +\" to \"+ end;","\t\t *      }","\t\t *    } );","\t\t */","\t\t\"fnInfoCallback\": null,","\t","\t","\t\t/**","\t\t * Called when the table has been initialised. Normally DataTables will","\t\t * initialise sequentially and there will be no need for this function,","\t\t * however, this does not hold true when using external language information","\t\t * since that is obtained using an async XHR call.","\t\t *  @type function","\t\t *  @param {object} settings DataTables settings object","\t\t *  @param {object} json The JSON object request from the server - only","\t\t *    present if client-side Ajax sourced data is used","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.initComplete","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"initComplete\": function(settings, json) {","\t\t *          alert( 'DataTables has finished its initialisation.' );","\t\t *        }","\t\t *      } );","\t\t *    } )","\t\t */","\t\t\"fnInitComplete\": null,","\t","\t","\t\t/**","\t\t * Called at the very start of each table draw and can be used to cancel the","\t\t * draw by returning false, any other return (including undefined) results in","\t\t * the full draw occurring).","\t\t *  @type function","\t\t *  @param {object} settings DataTables settings object","\t\t *  @returns {boolean} False will cancel the draw, anything else (including no","\t\t *    return) will allow it to complete.","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.preDrawCallback","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"preDrawCallback\": function( settings ) {","\t\t *          if ( $('#test').val() == 1 ) {","\t\t *            return false;","\t\t *          }","\t\t *        }","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"fnPreDrawCallback\": null,","\t","\t","\t\t/**","\t\t * This function allows you to 'post process' each row after it have been","\t\t * generated for each table draw, but before it is rendered on screen. This","\t\t * function might be used for setting the row class name etc.","\t\t *  @type function","\t\t *  @param {node} row \"TR\" element for the current row","\t\t *  @param {array} data Raw data array for this row","\t\t *  @param {int} displayIndex The display index for the current table draw","\t\t *  @param {int} displayIndexFull The index of the data in the full list of","\t\t *    rows (after filtering)","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.rowCallback","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"rowCallback\": function( row, data, displayIndex, displayIndexFull ) {","\t\t *          // Bold the grade for all 'A' grade browsers","\t\t *          if ( data[4] == \"A\" ) {","\t\t *            $('td:eq(4)', row).html( '<b>A</b>' );","\t\t *          }","\t\t *        }","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"fnRowCallback\": null,","\t","\t","\t\t/**","\t\t * __Deprecated__ The functionality provided by this parameter has now been","\t\t * superseded by that provided through `ajax`, which should be used instead.","\t\t *","\t\t * This parameter allows you to override the default function which obtains","\t\t * the data from the server so something more suitable for your application.","\t\t * For example you could use POST data, or pull information from a Gears or","\t\t * AIR database.","\t\t *  @type function","\t\t *  @member","\t\t *  @param {string} source HTTP source to obtain the data from (`ajax`)","\t\t *  @param {array} data A key/value pair object containing the data to send","\t\t *    to the server","\t\t *  @param {function} callback to be called on completion of the data get","\t\t *    process that will draw the data on the page.","\t\t *  @param {object} settings DataTables settings object","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @dtopt Server-side","\t\t *  @name DataTable.defaults.serverData","\t\t *","\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.","\t\t */","\t\t\"fnServerData\": null,","\t","\t","\t\t/**","\t\t * __Deprecated__ The functionality provided by this parameter has now been","\t\t * superseded by that provided through `ajax`, which should be used instead.","\t\t *","\t\t *  It is often useful to send extra data to the server when making an Ajax","\t\t * request - for example custom filtering information, and this callback","\t\t * function makes it trivial to send extra information to the server. The","\t\t * passed in parameter is the data set that has been constructed by","\t\t * DataTables, and you can add to this or modify it as you require.","\t\t *  @type function","\t\t *  @param {array} data Data array (array of objects which are name/value","\t\t *    pairs) that has been constructed by DataTables and will be sent to the","\t\t *    server. In the case of Ajax sourced data with server-side processing","\t\t *    this will be an empty array, for server-side processing there will be a","\t\t *    significant number of parameters!","\t\t *  @returns {undefined} Ensure that you modify the data array passed in,","\t\t *    as this is passed by reference.","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @dtopt Server-side","\t\t *  @name DataTable.defaults.serverParams","\t\t *","\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.","\t\t */","\t\t\"fnServerParams\": null,","\t","\t","\t\t/**","\t\t * Load the table state. With this function you can define from where, and how, the","\t\t * state of a table is loaded. By default DataTables will load from `localStorage`","\t\t * but you might wish to use a server-side database or cookies.","\t\t *  @type function","\t\t *  @member","\t\t *  @param {object} settings DataTables settings object","\t\t *  @return {object} The DataTables state object to be loaded","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.stateLoadCallback","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"stateSave\": true,","\t\t *        \"stateLoadCallback\": function (settings) {","\t\t *          var o;","\t\t *","\t\t *          // Send an Ajax request to the server to get the data. Note that","\t\t *          // this is a synchronous request.","\t\t *          $.ajax( {","\t\t *            \"url\": \"/state_load\",","\t\t *            \"async\": false,","\t\t *            \"dataType\": \"json\",","\t\t *            \"success\": function (json) {","\t\t *              o = json;","\t\t *            }","\t\t *          } );","\t\t *","\t\t *          return o;","\t\t *        }","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"fnStateLoadCallback\": function ( settings ) {","\t\t\ttry {","\t\t\t\treturn JSON.parse(","\t\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).getItem(","\t\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname","\t\t\t\t\t)","\t\t\t\t);","\t\t\t} catch (e) {}","\t\t},","\t","\t","\t\t/**","\t\t * Callback which allows modification of the saved state prior to loading that state.","\t\t * This callback is called when the table is loading state from the stored data, but","\t\t * prior to the settings object being modified by the saved state. Note that for","\t\t * plug-in authors, you should use the `stateLoadParams` event to load parameters for","\t\t * a plug-in.","\t\t *  @type function","\t\t *  @param {object} settings DataTables settings object","\t\t *  @param {object} data The state object that is to be loaded","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.stateLoadParams","\t\t *","\t\t *  @example","\t\t *    // Remove a saved filter, so filtering is never loaded","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"stateSave\": true,","\t\t *        \"stateLoadParams\": function (settings, data) {","\t\t *          data.oSearch.sSearch = \"\";","\t\t *        }","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Disallow state loading by returning false","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"stateSave\": true,","\t\t *        \"stateLoadParams\": function (settings, data) {","\t\t *          return false;","\t\t *        }","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"fnStateLoadParams\": null,","\t","\t","\t\t/**","\t\t * Callback that is called when the state has been loaded from the state saving method","\t\t * and the DataTables settings object has been modified as a result of the loaded state.","\t\t *  @type function","\t\t *  @param {object} settings DataTables settings object","\t\t *  @param {object} data The state object that was loaded","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.stateLoaded","\t\t *","\t\t *  @example","\t\t *    // Show an alert with the filtering value that was saved","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"stateSave\": true,","\t\t *        \"stateLoaded\": function (settings, data) {","\t\t *          alert( 'Saved filter was: '+data.oSearch.sSearch );","\t\t *        }","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"fnStateLoaded\": null,","\t","\t","\t\t/**","\t\t * Save the table state. This function allows you to define where and how the state","\t\t * information for the table is stored By default DataTables will use `localStorage`","\t\t * but you might wish to use a server-side database or cookies.","\t\t *  @type function","\t\t *  @member","\t\t *  @param {object} settings DataTables settings object","\t\t *  @param {object} data The state object to be saved","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.stateSaveCallback","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"stateSave\": true,","\t\t *        \"stateSaveCallback\": function (settings, data) {","\t\t *          // Send an Ajax request to the server with the state object","\t\t *          $.ajax( {","\t\t *            \"url\": \"/state_save\",","\t\t *            \"data\": data,","\t\t *            \"dataType\": \"json\",","\t\t *            \"method\": \"POST\"","\t\t *            \"success\": function () {}","\t\t *          } );","\t\t *        }","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"fnStateSaveCallback\": function ( settings, data ) {","\t\t\ttry {","\t\t\t\t(settings.iStateDuration === -1 ? sessionStorage : localStorage).setItem(","\t\t\t\t\t'DataTables_'+settings.sInstance+'_'+location.pathname,","\t\t\t\t\tJSON.stringify( data )","\t\t\t\t);","\t\t\t} catch (e) {}","\t\t},","\t","\t","\t\t/**","\t\t * Callback which allows modification of the state to be saved. Called when the table","\t\t * has changed state a new state save is required. This method allows modification of","\t\t * the state saving object prior to actually doing the save, including addition or","\t\t * other state properties or modification. Note that for plug-in authors, you should","\t\t * use the `stateSaveParams` event to save parameters for a plug-in.","\t\t *  @type function","\t\t *  @param {object} settings DataTables settings object","\t\t *  @param {object} data The state object to be saved","\t\t *","\t\t *  @dtopt Callbacks","\t\t *  @name DataTable.defaults.stateSaveParams","\t\t *","\t\t *  @example","\t\t *    // Remove a saved filter, so filtering is never saved","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"stateSave\": true,","\t\t *        \"stateSaveParams\": function (settings, data) {","\t\t *          data.oSearch.sSearch = \"\";","\t\t *        }","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"fnStateSaveParams\": null,","\t","\t","\t\t/**","\t\t * Duration for which the saved state information is considered valid. After this period","\t\t * has elapsed the state will be returned to the default.","\t\t * Value is given in seconds.","\t\t *  @type int","\t\t *  @default 7200 <i>(2 hours)</i>","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.stateDuration","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"stateDuration\": 60*60*24; // 1 day","\t\t *      } );","\t\t *    } )","\t\t */","\t\t\"iStateDuration\": 7200,","\t","\t","\t\t/**","\t\t * When enabled DataTables will not make a request to the server for the first","\t\t * page draw - rather it will use the data already on the page (no sorting etc","\t\t * will be applied to it), thus saving on an XHR at load time. `deferLoading`","\t\t * is used to indicate that deferred loading is required, but it is also used","\t\t * to tell DataTables how many records there are in the full table (allowing","\t\t * the information element and pagination to be displayed correctly). In the case","\t\t * where a filtering is applied to the table on initial load, this can be","\t\t * indicated by giving the parameter as an array, where the first element is","\t\t * the number of records available after filtering and the second element is the","\t\t * number of records without filtering (allowing the table information element","\t\t * to be shown correctly).","\t\t *  @type int | array","\t\t *  @default null","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.deferLoading","\t\t *","\t\t *  @example","\t\t *    // 57 records available in the table, no filtering applied","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"serverSide\": true,","\t\t *        \"ajax\": \"scripts/server_processing.php\",","\t\t *        \"deferLoading\": 57","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // 57 records after filtering, 100 without filtering (an initial filter applied)","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"serverSide\": true,","\t\t *        \"ajax\": \"scripts/server_processing.php\",","\t\t *        \"deferLoading\": [ 57, 100 ],","\t\t *        \"search\": {","\t\t *          \"search\": \"my_filter\"","\t\t *        }","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"iDeferLoading\": null,","\t","\t","\t\t/**","\t\t * Number of rows to display on a single page when using pagination. If","\t\t * feature enabled (`lengthChange`) then the end user will be able to override","\t\t * this to a custom setting using a pop-up menu.","\t\t *  @type int","\t\t *  @default 10","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.pageLength","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"pageLength\": 50","\t\t *      } );","\t\t *    } )","\t\t */","\t\t\"iDisplayLength\": 10,","\t","\t","\t\t/**","\t\t * Define the starting point for data display when using DataTables with","\t\t * pagination. Note that this parameter is the number of records, rather than","\t\t * the page number, so if you have 10 records per page and want to start on","\t\t * the third page, it should be \"20\".","\t\t *  @type int","\t\t *  @default 0","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.displayStart","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"displayStart\": 20","\t\t *      } );","\t\t *    } )","\t\t */","\t\t\"iDisplayStart\": 0,","\t","\t","\t\t/**","\t\t * By default DataTables allows keyboard navigation of the table (sorting, paging,","\t\t * and filtering) by adding a `tabindex` attribute to the required elements. This","\t\t * allows you to tab through the controls and press the enter key to activate them.","\t\t * The tabindex is default 0, meaning that the tab follows the flow of the document.","\t\t * You can overrule this using this parameter if you wish. Use a value of -1 to","\t\t * disable built-in keyboard navigation.","\t\t *  @type int","\t\t *  @default 0","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.tabIndex","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"tabIndex\": 1","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"iTabIndex\": 0,","\t","\t","\t\t/**","\t\t * Classes that DataTables assigns to the various components and features","\t\t * that it adds to the HTML table. This allows classes to be configured","\t\t * during initialisation in addition to through the static","\t\t * {@link DataTable.ext.oStdClasses} object).","\t\t *  @namespace","\t\t *  @name DataTable.defaults.classes","\t\t */","\t\t\"oClasses\": {},","\t","\t","\t\t/**","\t\t * All strings that DataTables uses in the user interface that it creates","\t\t * are defined in this object, allowing you to modified them individually or","\t\t * completely replace them all as required.","\t\t *  @namespace","\t\t *  @name DataTable.defaults.language","\t\t */","\t\t\"oLanguage\": {","\t\t\t/**","\t\t\t * Strings that are used for WAI-ARIA labels and controls only (these are not","\t\t\t * actually visible on the page, but will be read by screenreaders, and thus","\t\t\t * must be internationalised as well).","\t\t\t *  @namespace","\t\t\t *  @name DataTable.defaults.language.aria","\t\t\t */","\t\t\t\"oAria\": {","\t\t\t\t/**","\t\t\t\t * ARIA label that is added to the table headers when the column may be","\t\t\t\t * sorted ascending by activing the column (click or return when focused).","\t\t\t\t * Note that the column header is prefixed to this string.","\t\t\t\t *  @type string","\t\t\t\t *  @default : activate to sort column ascending","\t\t\t\t *","\t\t\t\t *  @dtopt Language","\t\t\t\t *  @name DataTable.defaults.language.aria.sortAscending","\t\t\t\t *","\t\t\t\t *  @example","\t\t\t\t *    $(document).ready( function() {","\t\t\t\t *      $('#example').dataTable( {","\t\t\t\t *        \"language\": {","\t\t\t\t *          \"aria\": {","\t\t\t\t *            \"sortAscending\": \" - click/return to sort ascending\"","\t\t\t\t *          }","\t\t\t\t *        }","\t\t\t\t *      } );","\t\t\t\t *    } );","\t\t\t\t */","\t\t\t\t\"sSortAscending\": \": activate to sort column ascending\",","\t","\t\t\t\t/**","\t\t\t\t * ARIA label that is added to the table headers when the column may be","\t\t\t\t * sorted descending by activing the column (click or return when focused).","\t\t\t\t * Note that the column header is prefixed to this string.","\t\t\t\t *  @type string","\t\t\t\t *  @default : activate to sort column ascending","\t\t\t\t *","\t\t\t\t *  @dtopt Language","\t\t\t\t *  @name DataTable.defaults.language.aria.sortDescending","\t\t\t\t *","\t\t\t\t *  @example","\t\t\t\t *    $(document).ready( function() {","\t\t\t\t *      $('#example').dataTable( {","\t\t\t\t *        \"language\": {","\t\t\t\t *          \"aria\": {","\t\t\t\t *            \"sortDescending\": \" - click/return to sort descending\"","\t\t\t\t *          }","\t\t\t\t *        }","\t\t\t\t *      } );","\t\t\t\t *    } );","\t\t\t\t */","\t\t\t\t\"sSortDescending\": \": activate to sort column descending\"","\t\t\t},","\t","\t\t\t/**","\t\t\t * Pagination string used by DataTables for the built-in pagination","\t\t\t * control types.","\t\t\t *  @namespace","\t\t\t *  @name DataTable.defaults.language.paginate","\t\t\t */","\t\t\t\"oPaginate\": {","\t\t\t\t/**","\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the","\t\t\t\t * button to take the user to the first page.","\t\t\t\t *  @type string","\t\t\t\t *  @default First","\t\t\t\t *","\t\t\t\t *  @dtopt Language","\t\t\t\t *  @name DataTable.defaults.language.paginate.first","\t\t\t\t *","\t\t\t\t *  @example","\t\t\t\t *    $(document).ready( function() {","\t\t\t\t *      $('#example').dataTable( {","\t\t\t\t *        \"language\": {","\t\t\t\t *          \"paginate\": {","\t\t\t\t *            \"first\": \"First page\"","\t\t\t\t *          }","\t\t\t\t *        }","\t\t\t\t *      } );","\t\t\t\t *    } );","\t\t\t\t */","\t\t\t\t\"sFirst\": \"First\",","\t","\t","\t\t\t\t/**","\t\t\t\t * Text to use when using the 'full_numbers' type of pagination for the","\t\t\t\t * button to take the user to the last page.","\t\t\t\t *  @type string","\t\t\t\t *  @default Last","\t\t\t\t *","\t\t\t\t *  @dtopt Language","\t\t\t\t *  @name DataTable.defaults.language.paginate.last","\t\t\t\t *","\t\t\t\t *  @example","\t\t\t\t *    $(document).ready( function() {","\t\t\t\t *      $('#example').dataTable( {","\t\t\t\t *        \"language\": {","\t\t\t\t *          \"paginate\": {","\t\t\t\t *            \"last\": \"Last page\"","\t\t\t\t *          }","\t\t\t\t *        }","\t\t\t\t *      } );","\t\t\t\t *    } );","\t\t\t\t */","\t\t\t\t\"sLast\": \"Last\",","\t","\t","\t\t\t\t/**","\t\t\t\t * Text to use for the 'next' pagination button (to take the user to the","\t\t\t\t * next page).","\t\t\t\t *  @type string","\t\t\t\t *  @default Next","\t\t\t\t *","\t\t\t\t *  @dtopt Language","\t\t\t\t *  @name DataTable.defaults.language.paginate.next","\t\t\t\t *","\t\t\t\t *  @example","\t\t\t\t *    $(document).ready( function() {","\t\t\t\t *      $('#example').dataTable( {","\t\t\t\t *        \"language\": {","\t\t\t\t *          \"paginate\": {","\t\t\t\t *            \"next\": \"Next page\"","\t\t\t\t *          }","\t\t\t\t *        }","\t\t\t\t *      } );","\t\t\t\t *    } );","\t\t\t\t */","\t\t\t\t\"sNext\": \"Next\",","\t","\t","\t\t\t\t/**","\t\t\t\t * Text to use for the 'previous' pagination button (to take the user to","\t\t\t\t * the previous page).","\t\t\t\t *  @type string","\t\t\t\t *  @default Previous","\t\t\t\t *","\t\t\t\t *  @dtopt Language","\t\t\t\t *  @name DataTable.defaults.language.paginate.previous","\t\t\t\t *","\t\t\t\t *  @example","\t\t\t\t *    $(document).ready( function() {","\t\t\t\t *      $('#example').dataTable( {","\t\t\t\t *        \"language\": {","\t\t\t\t *          \"paginate\": {","\t\t\t\t *            \"previous\": \"Previous page\"","\t\t\t\t *          }","\t\t\t\t *        }","\t\t\t\t *      } );","\t\t\t\t *    } );","\t\t\t\t */","\t\t\t\t\"sPrevious\": \"Previous\"","\t\t\t},","\t","\t\t\t/**","\t\t\t * This string is shown in preference to `zeroRecords` when the table is","\t\t\t * empty of data (regardless of filtering). Note that this is an optional","\t\t\t * parameter - if it is not given, the value of `zeroRecords` will be used","\t\t\t * instead (either the default or given value).","\t\t\t *  @type string","\t\t\t *  @default No data available in table","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.emptyTable","\t\t\t *","\t\t\t *  @example","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"emptyTable\": \"No data available in table\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sEmptyTable\": \"No data available in table\",","\t","\t","\t\t\t/**","\t\t\t * This string gives information to the end user about the information","\t\t\t * that is current on display on the page. The following tokens can be","\t\t\t * used in the string and will be dynamically replaced as the table","\t\t\t * display updates. This tokens can be placed anywhere in the string, or","\t\t\t * removed as needed by the language requires:","\t\t\t *","\t\t\t * * `\\_START\\_` - Display index of the first record on the current page","\t\t\t * * `\\_END\\_` - Display index of the last record on the current page","\t\t\t * * `\\_TOTAL\\_` - Number of records in the table after filtering","\t\t\t * * `\\_MAX\\_` - Number of records in the table without filtering","\t\t\t * * `\\_PAGE\\_` - Current page number","\t\t\t * * `\\_PAGES\\_` - Total number of pages of data in the table","\t\t\t *","\t\t\t *  @type string","\t\t\t *  @default Showing _START_ to _END_ of _TOTAL_ entries","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.info","\t\t\t *","\t\t\t *  @example","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"info\": \"Showing page _PAGE_ of _PAGES_\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sInfo\": \"Showing _START_ to _END_ of _TOTAL_ entries\",","\t","\t","\t\t\t/**","\t\t\t * Display information string for when the table is empty. Typically the","\t\t\t * format of this string should match `info`.","\t\t\t *  @type string","\t\t\t *  @default Showing 0 to 0 of 0 entries","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.infoEmpty","\t\t\t *","\t\t\t *  @example","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"infoEmpty\": \"No entries to show\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sInfoEmpty\": \"Showing 0 to 0 of 0 entries\",","\t","\t","\t\t\t/**","\t\t\t * When a user filters the information in a table, this string is appended","\t\t\t * to the information (`info`) to give an idea of how strong the filtering","\t\t\t * is. The variable _MAX_ is dynamically updated.","\t\t\t *  @type string","\t\t\t *  @default (filtered from _MAX_ total entries)","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.infoFiltered","\t\t\t *","\t\t\t *  @example","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"infoFiltered\": \" - filtering from _MAX_ records\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sInfoFiltered\": \"(filtered from _MAX_ total entries)\",","\t","\t","\t\t\t/**","\t\t\t * If can be useful to append extra information to the info string at times,","\t\t\t * and this variable does exactly that. This information will be appended to","\t\t\t * the `info` (`infoEmpty` and `infoFiltered` in whatever combination they are","\t\t\t * being used) at all times.","\t\t\t *  @type string","\t\t\t *  @default <i>Empty string</i>","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.infoPostFix","\t\t\t *","\t\t\t *  @example","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"infoPostFix\": \"All records shown are derived from real information.\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sInfoPostFix\": \"\",","\t","\t","\t\t\t/**","\t\t\t * This decimal place operator is a little different from the other","\t\t\t * language options since DataTables doesn't output floating point","\t\t\t * numbers, so it won't ever use this for display of a number. Rather,","\t\t\t * what this parameter does is modify the sort methods of the table so","\t\t\t * that numbers which are in a format which has a character other than","\t\t\t * a period (`.`) as a decimal place will be sorted numerically.","\t\t\t *","\t\t\t * Note that numbers with different decimal places cannot be shown in","\t\t\t * the same table and still be sortable, the table must be consistent.","\t\t\t * However, multiple different tables on the page can use different","\t\t\t * decimal place characters.","\t\t\t *  @type string","\t\t\t *  @default ","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.decimal","\t\t\t *","\t\t\t *  @example","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"decimal\": \",\"","\t\t\t *          \"thousands\": \".\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sDecimal\": \"\",","\t","\t","\t\t\t/**","\t\t\t * DataTables has a build in number formatter (`formatNumber`) which is","\t\t\t * used to format large numbers that are used in the table information.","\t\t\t * By default a comma is used, but this can be trivially changed to any","\t\t\t * character you wish with this parameter.","\t\t\t *  @type string","\t\t\t *  @default ,","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.thousands","\t\t\t *","\t\t\t *  @example","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"thousands\": \"'\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sThousands\": \",\",","\t","\t","\t\t\t/**","\t\t\t * Detail the action that will be taken when the drop down menu for the","\t\t\t * pagination length option is changed. The '_MENU_' variable is replaced","\t\t\t * with a default select list of 10, 25, 50 and 100, and can be replaced","\t\t\t * with a custom select box if required.","\t\t\t *  @type string","\t\t\t *  @default Show _MENU_ entries","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.lengthMenu","\t\t\t *","\t\t\t *  @example","\t\t\t *    // Language change only","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"lengthMenu\": \"Display _MENU_ records\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t *","\t\t\t *  @example","\t\t\t *    // Language and options change","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"lengthMenu\": 'Display <select>'+","\t\t\t *            '<option value=\"10\">10</option>'+","\t\t\t *            '<option value=\"20\">20</option>'+","\t\t\t *            '<option value=\"30\">30</option>'+","\t\t\t *            '<option value=\"40\">40</option>'+","\t\t\t *            '<option value=\"50\">50</option>'+","\t\t\t *            '<option value=\"-1\">All</option>'+","\t\t\t *            '</select> records'","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sLengthMenu\": \"Show _MENU_ entries\",","\t","\t","\t\t\t/**","\t\t\t * When using Ajax sourced data and during the first draw when DataTables is","\t\t\t * gathering the data, this message is shown in an empty row in the table to","\t\t\t * indicate to the end user the the data is being loaded. Note that this","\t\t\t * parameter is not used when loading data by server-side processing, just","\t\t\t * Ajax sourced data with client-side processing.","\t\t\t *  @type string","\t\t\t *  @default Loading...","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.loadingRecords","\t\t\t *","\t\t\t *  @example","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"loadingRecords\": \"Please wait - loading...\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sLoadingRecords\": \"Loading...\",","\t","\t","\t\t\t/**","\t\t\t * Text which is displayed when the table is processing a user action","\t\t\t * (usually a sort command or similar).","\t\t\t *  @type string","\t\t\t *  @default Processing...","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.processing","\t\t\t *","\t\t\t *  @example","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"processing\": \"DataTables is currently busy\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sProcessing\": \"Processing...\",","\t","\t","\t\t\t/**","\t\t\t * Details the actions that will be taken when the user types into the","\t\t\t * filtering input text box. The variable \"_INPUT_\", if used in the string,","\t\t\t * is replaced with the HTML text box for the filtering input allowing","\t\t\t * control over where it appears in the string. If \"_INPUT_\" is not given","\t\t\t * then the input box is appended to the string automatically.","\t\t\t *  @type string","\t\t\t *  @default Search:","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.search","\t\t\t *","\t\t\t *  @example","\t\t\t *    // Input text box will be appended at the end automatically","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"search\": \"Filter records:\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t *","\t\t\t *  @example","\t\t\t *    // Specify where the filter should appear","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"search\": \"Apply filter _INPUT_ to table\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sSearch\": \"Search:\",","\t","\t","\t\t\t/**","\t\t\t * Assign a `placeholder` attribute to the search `input` element","\t\t\t *  @type string","\t\t\t *  @default ","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.searchPlaceholder","\t\t\t */","\t\t\t\"sSearchPlaceholder\": \"\",","\t","\t","\t\t\t/**","\t\t\t * All of the language information can be stored in a file on the","\t\t\t * server-side, which DataTables will look up if this parameter is passed.","\t\t\t * It must store the URL of the language file, which is in a JSON format,","\t\t\t * and the object has the same properties as the oLanguage object in the","\t\t\t * initialiser object (i.e. the above parameters). Please refer to one of","\t\t\t * the example language files to see how this works in action.","\t\t\t *  @type string","\t\t\t *  @default <i>Empty string - i.e. disabled</i>","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.url","\t\t\t *","\t\t\t *  @example","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"url\": \"http://www.sprymedia.co.uk/dataTables/lang.txt\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sUrl\": \"\",","\t","\t","\t\t\t/**","\t\t\t * Text shown inside the table records when the is no information to be","\t\t\t * displayed after filtering. `emptyTable` is shown when there is simply no","\t\t\t * information in the table at all (regardless of filtering).","\t\t\t *  @type string","\t\t\t *  @default No matching records found","\t\t\t *","\t\t\t *  @dtopt Language","\t\t\t *  @name DataTable.defaults.language.zeroRecords","\t\t\t *","\t\t\t *  @example","\t\t\t *    $(document).ready( function() {","\t\t\t *      $('#example').dataTable( {","\t\t\t *        \"language\": {","\t\t\t *          \"zeroRecords\": \"No records to display\"","\t\t\t *        }","\t\t\t *      } );","\t\t\t *    } );","\t\t\t */","\t\t\t\"sZeroRecords\": \"No matching records found\"","\t\t},","\t","\t","\t\t/**","\t\t * This parameter allows you to have define the global filtering state at","\t\t * initialisation time. As an object the `search` parameter must be","\t\t * defined, but all other parameters are optional. When `regex` is true,","\t\t * the search string will be treated as a regular expression, when false","\t\t * (default) it will be treated as a straight string. When `smart`","\t\t * DataTables will use it's smart filtering methods (to word match at","\t\t * any point in the data), when false this will not be done.","\t\t *  @namespace","\t\t *  @extends DataTable.models.oSearch","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.search","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"search\": {\"search\": \"Initial search\"}","\t\t *      } );","\t\t *    } )","\t\t */","\t\t\"oSearch\": $.extend( {}, DataTable.models.oSearch ),","\t","\t","\t\t/**","\t\t * __Deprecated__ The functionality provided by this parameter has now been","\t\t * superseded by that provided through `ajax`, which should be used instead.","\t\t *","\t\t * By default DataTables will look for the property `data` (or `aaData` for","\t\t * compatibility with DataTables 1.9-) when obtaining data from an Ajax","\t\t * source or for server-side processing - this parameter allows that","\t\t * property to be changed. You can use Javascript dotted object notation to","\t\t * get a data source for multiple levels of nesting.","\t\t *  @type string","\t\t *  @default data","\t\t *","\t\t *  @dtopt Options","\t\t *  @dtopt Server-side","\t\t *  @name DataTable.defaults.ajaxDataProp","\t\t *","\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.","\t\t */","\t\t\"sAjaxDataProp\": \"data\",","\t","\t","\t\t/**","\t\t * __Deprecated__ The functionality provided by this parameter has now been","\t\t * superseded by that provided through `ajax`, which should be used instead.","\t\t *","\t\t * You can instruct DataTables to load data from an external","\t\t * source using this parameter (use aData if you want to pass data in you","\t\t * already have). Simply provide a url a JSON object can be obtained from.","\t\t *  @type string","\t\t *  @default null","\t\t *","\t\t *  @dtopt Options","\t\t *  @dtopt Server-side","\t\t *  @name DataTable.defaults.ajaxSource","\t\t *","\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.","\t\t */","\t\t\"sAjaxSource\": null,","\t","\t","\t\t/**","\t\t * This initialisation variable allows you to specify exactly where in the","\t\t * DOM you want DataTables to inject the various controls it adds to the page","\t\t * (for example you might want the pagination controls at the top of the","\t\t * table). DIV elements (with or without a custom class) can also be added to","\t\t * aid styling. The follow syntax is used:","\t\t *   <ul>","\t\t *     <li>The following options are allowed:","\t\t *       <ul>","\t\t *         <li>'l' - Length changing</li>","\t\t *         <li>'f' - Filtering input</li>","\t\t *         <li>'t' - The table!</li>","\t\t *         <li>'i' - Information</li>","\t\t *         <li>'p' - Pagination</li>","\t\t *         <li>'r' - pRocessing</li>","\t\t *       </ul>","\t\t *     </li>","\t\t *     <li>The following constants are allowed:","\t\t *       <ul>","\t\t *         <li>'H' - jQueryUI theme \"header\" classes ('fg-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix')</li>","\t\t *         <li>'F' - jQueryUI theme \"footer\" classes ('fg-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix')</li>","\t\t *       </ul>","\t\t *     </li>","\t\t *     <li>The following syntax is expected:","\t\t *       <ul>","\t\t *         <li>'&lt;' and '&gt;' - div elements</li>","\t\t *         <li>'&lt;\"class\" and '&gt;' - div with a class</li>","\t\t *         <li>'&lt;\"#id\" and '&gt;' - div with an ID</li>","\t\t *       </ul>","\t\t *     </li>","\t\t *     <li>Examples:","\t\t *       <ul>","\t\t *         <li>'&lt;\"wrapper\"flipt&gt;'</li>","\t\t *         <li>'&lt;lf&lt;t&gt;ip&gt;'</li>","\t\t *       </ul>","\t\t *     </li>","\t\t *   </ul>","\t\t *  @type string","\t\t *  @default lfrtip <i>(when `jQueryUI` is false)</i> <b>or</b>","\t\t *    <\"H\"lfr>t<\"F\"ip> <i>(when `jQueryUI` is true)</i>","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.dom","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"dom\": '&lt;\"top\"i&gt;rt&lt;\"bottom\"flp&gt;&lt;\"clear\"&gt;'","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sDom\": \"lfrtip\",","\t","\t","\t\t/**","\t\t * Search delay option. This will throttle full table searches that use the","\t\t * DataTables provided search input element (it does not effect calls to","\t\t * `dt-api search()`, providing a delay before the search is made.","\t\t *  @type integer","\t\t *  @default 0","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.searchDelay","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"searchDelay\": 200","\t\t *      } );","\t\t *    } )","\t\t */","\t\t\"searchDelay\": null,","\t","\t","\t\t/**","\t\t * DataTables features four different built-in options for the buttons to","\t\t * display for pagination control:","\t\t *","\t\t * * `simple` - 'Previous' and 'Next' buttons only","\t\t * * 'simple_numbers` - 'Previous' and 'Next' buttons, plus page numbers","\t\t * * `full` - 'First', 'Previous', 'Next' and 'Last' buttons","\t\t * * `full_numbers` - 'First', 'Previous', 'Next' and 'Last' buttons, plus","\t\t *   page numbers","\t\t *  ","\t\t * Further methods can be added using {@link DataTable.ext.oPagination}.","\t\t *  @type string","\t\t *  @default simple_numbers","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.pagingType","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"pagingType\": \"full_numbers\"","\t\t *      } );","\t\t *    } )","\t\t */","\t\t\"sPaginationType\": \"simple_numbers\",","\t","\t","\t\t/**","\t\t * Enable horizontal scrolling. When a table is too wide to fit into a","\t\t * certain layout, or you have a large number of columns in the table, you","\t\t * can enable x-scrolling to show the table in a viewport, which can be","\t\t * scrolled. This property can be `true` which will allow the table to","\t\t * scroll horizontally when needed, or any CSS unit, or a number (in which","\t\t * case it will be treated as a pixel measurement). Setting as simply `true`","\t\t * is recommended.","\t\t *  @type boolean|string","\t\t *  @default <i>blank string - i.e. disabled</i>","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.scrollX","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"scrollX\": true,","\t\t *        \"scrollCollapse\": true","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sScrollX\": \"\",","\t","\t","\t\t/**","\t\t * This property can be used to force a DataTable to use more width than it","\t\t * might otherwise do when x-scrolling is enabled. For example if you have a","\t\t * table which requires to be well spaced, this parameter is useful for","\t\t * \"over-sizing\" the table, and thus forcing scrolling. This property can by","\t\t * any CSS unit, or a number (in which case it will be treated as a pixel","\t\t * measurement).","\t\t *  @type string","\t\t *  @default <i>blank string - i.e. disabled</i>","\t\t *","\t\t *  @dtopt Options","\t\t *  @name DataTable.defaults.scrollXInner","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"scrollX\": \"100%\",","\t\t *        \"scrollXInner\": \"110%\"","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sScrollXInner\": \"\",","\t","\t","\t\t/**","\t\t * Enable vertical scrolling. Vertical scrolling will constrain the DataTable","\t\t * to the given height, and enable scrolling for any data which overflows the","\t\t * current viewport. This can be used as an alternative to paging to display","\t\t * a lot of data in a small area (although paging and scrolling can both be","\t\t * enabled at the same time). This property can be any CSS unit, or a number","\t\t * (in which case it will be treated as a pixel measurement).","\t\t *  @type string","\t\t *  @default <i>blank string - i.e. disabled</i>","\t\t *","\t\t *  @dtopt Features","\t\t *  @name DataTable.defaults.scrollY","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"scrollY\": \"200px\",","\t\t *        \"paginate\": false","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sScrollY\": \"\",","\t","\t","\t\t/**","\t\t * __Deprecated__ The functionality provided by this parameter has now been","\t\t * superseded by that provided through `ajax`, which should be used instead.","\t\t *","\t\t * Set the HTTP method that is used to make the Ajax call for server-side","\t\t * processing or Ajax sourced data.","\t\t *  @type string","\t\t *  @default GET","\t\t *","\t\t *  @dtopt Options","\t\t *  @dtopt Server-side","\t\t *  @name DataTable.defaults.serverMethod","\t\t *","\t\t *  @deprecated 1.10. Please use `ajax` for this functionality now.","\t\t */","\t\t\"sServerMethod\": \"GET\",","\t","\t","\t\t/**","\t\t * DataTables makes use of renderers when displaying HTML elements for","\t\t * a table. These renderers can be added or modified by plug-ins to","\t\t * generate suitable mark-up for a site. For example the Bootstrap","\t\t * integration plug-in for DataTables uses a paging button renderer to","\t\t * display pagination buttons in the mark-up required by Bootstrap.","\t\t *","\t\t * For further information about the renderers available see","\t\t * DataTable.ext.renderer","\t\t *  @type string|object","\t\t *  @default null","\t\t *","\t\t *  @name DataTable.defaults.renderer","\t\t *","\t\t */","\t\t\"renderer\": null","\t};","\t","\t_fnHungarianMap( DataTable.defaults );","\t","\t","\t","\t/*","\t * Developer note - See note in model.defaults.js about the use of Hungarian","\t * notation and camel case.","\t */","\t","\t/**","\t * Column options that can be given to DataTables at initialisation time.","\t *  @namespace","\t */","\tDataTable.defaults.column = {","\t\t/**","\t\t * Define which column(s) an order will occur on for this column. This","\t\t * allows a column's ordering to take multiple columns into account when","\t\t * doing a sort or use the data from a different column. For example first","\t\t * name / last name columns make sense to do a multi-column sort over the","\t\t * two columns.","\t\t *  @type array|int","\t\t *  @default null <i>Takes the value of the column index automatically</i>","\t\t *","\t\t *  @name DataTable.defaults.column.orderData","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columnDefs`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [","\t\t *          { \"orderData\": [ 0, 1 ], \"targets\": [ 0 ] },","\t\t *          { \"orderData\": [ 1, 0 ], \"targets\": [ 1 ] },","\t\t *          { \"orderData\": 2, \"targets\": [ 2 ] }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          { \"orderData\": [ 0, 1 ] },","\t\t *          { \"orderData\": [ 1, 0 ] },","\t\t *          { \"orderData\": 2 },","\t\t *          null,","\t\t *          null","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"aDataSort\": null,","\t\t\"iDataSort\": -1,","\t","\t","\t\t/**","\t\t * You can control the default ordering direction, and even alter the","\t\t * behaviour of the sort handler (i.e. only allow ascending ordering etc)","\t\t * using this parameter.","\t\t *  @type array","\t\t *  @default [ 'asc', 'desc' ]","\t\t *","\t\t *  @name DataTable.defaults.column.orderSequence","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columnDefs`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [","\t\t *          { \"orderSequence\": [ \"asc\" ], \"targets\": [ 1 ] },","\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ], \"targets\": [ 2 ] },","\t\t *          { \"orderSequence\": [ \"desc\" ], \"targets\": [ 3 ] }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          null,","\t\t *          { \"orderSequence\": [ \"asc\" ] },","\t\t *          { \"orderSequence\": [ \"desc\", \"asc\", \"asc\" ] },","\t\t *          { \"orderSequence\": [ \"desc\" ] },","\t\t *          null","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"asSorting\": [ 'asc', 'desc' ],","\t","\t","\t\t/**","\t\t * Enable or disable filtering on the data in this column.","\t\t *  @type boolean","\t\t *  @default true","\t\t *","\t\t *  @name DataTable.defaults.column.searchable","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columnDefs`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [","\t\t *          { \"searchable\": false, \"targets\": [ 0 ] }","\t\t *        ] } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          { \"searchable\": false },","\t\t *          null,","\t\t *          null,","\t\t *          null,","\t\t *          null","\t\t *        ] } );","\t\t *    } );","\t\t */","\t\t\"bSearchable\": true,","\t","\t","\t\t/**","\t\t * Enable or disable ordering on this column.","\t\t *  @type boolean","\t\t *  @default true","\t\t *","\t\t *  @name DataTable.defaults.column.orderable","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columnDefs`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [","\t\t *          { \"orderable\": false, \"targets\": [ 0 ] }","\t\t *        ] } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          { \"orderable\": false },","\t\t *          null,","\t\t *          null,","\t\t *          null,","\t\t *          null","\t\t *        ] } );","\t\t *    } );","\t\t */","\t\t\"bSortable\": true,","\t","\t","\t\t/**","\t\t * Enable or disable the display of this column.","\t\t *  @type boolean","\t\t *  @default true","\t\t *","\t\t *  @name DataTable.defaults.column.visible","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columnDefs`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [","\t\t *          { \"visible\": false, \"targets\": [ 0 ] }","\t\t *        ] } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          { \"visible\": false },","\t\t *          null,","\t\t *          null,","\t\t *          null,","\t\t *          null","\t\t *        ] } );","\t\t *    } );","\t\t */","\t\t\"bVisible\": true,","\t","\t","\t\t/**","\t\t * Developer definable function that is called whenever a cell is created (Ajax source,","\t\t * etc) or processed for input (DOM source). This can be used as a compliment to mRender","\t\t * allowing you to modify the DOM element (add background colour for example) when the","\t\t * element is available.","\t\t *  @type function","\t\t *  @param {element} td The TD node that has been created","\t\t *  @param {*} cellData The Data for the cell","\t\t *  @param {array|object} rowData The data for the whole row","\t\t *  @param {int} row The row index for the aoData data store","\t\t *  @param {int} col The column index for aoColumns","\t\t *","\t\t *  @name DataTable.defaults.column.createdCell","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [ {","\t\t *          \"targets\": [3],","\t\t *          \"createdCell\": function (td, cellData, rowData, row, col) {","\t\t *            if ( cellData == \"1.7\" ) {","\t\t *              $(td).css('color', 'blue')","\t\t *            }","\t\t *          }","\t\t *        } ]","\t\t *      });","\t\t *    } );","\t\t */","\t\t\"fnCreatedCell\": null,","\t","\t","\t\t/**","\t\t * This parameter has been replaced by `data` in DataTables to ensure naming","\t\t * consistency. `dataProp` can still be used, as there is backwards","\t\t * compatibility in DataTables for this option, but it is strongly","\t\t * recommended that you use `data` in preference to `dataProp`.","\t\t *  @name DataTable.defaults.column.dataProp","\t\t */","\t","\t","\t\t/**","\t\t * This property can be used to read data from any data source property,","\t\t * including deeply nested objects / properties. `data` can be given in a","\t\t * number of different ways which effect its behaviour:","\t\t *","\t\t * * `integer` - treated as an array index for the data source. This is the","\t\t *   default that DataTables uses (incrementally increased for each column).","\t\t * * `string` - read an object property from the data source. There are","\t\t *   three 'special' options that can be used in the string to alter how","\t\t *   DataTables reads the data from the source object:","\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in","\t\t *      Javascript to read from nested objects, so to can the options","\t\t *      specified in `data`. For example: `browser.version` or","\t\t *      `browser.name`. If your object parameter name contains a period, use","\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.","\t\t *    * `[]` - Array notation. DataTables can automatically combine data","\t\t *      from and array source, joining the data with the characters provided","\t\t *      between the two brackets. For example: `name[, ]` would provide a","\t\t *      comma-space separated list from the source array. If no characters","\t\t *      are provided between the brackets, the original array source is","\t\t *      returned.","\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will","\t\t *      execute a function of the name given. For example: `browser()` for a","\t\t *      simple function on the data source, `browser.version()` for a","\t\t *      function in a nested property or even `browser().version` to get an","\t\t *      object property if the function called returns an object. Note that","\t\t *      function notation is recommended for use in `render` rather than","\t\t *      `data` as it is much simpler to use as a renderer.","\t\t * * `null` - use the original data source for the row rather than plucking","\t\t *   data directly from it. This action has effects on two other","\t\t *   initialisation options:","\t\t *    * `defaultContent` - When null is given as the `data` option and","\t\t *      `defaultContent` is specified for the column, the value defined by","\t\t *      `defaultContent` will be used for the cell.","\t\t *    * `render` - When null is used for the `data` option and the `render`","\t\t *      option is specified for the column, the whole data source for the","\t\t *      row is used for the renderer.","\t\t * * `function` - the function given will be executed whenever DataTables","\t\t *   needs to set or get the data for a cell in the column. The function","\t\t *   takes three parameters:","\t\t *    * Parameters:","\t\t *      * `{array|object}` The data source for the row","\t\t *      * `{string}` The type call data requested - this will be 'set' when","\t\t *        setting data or 'filter', 'display', 'type', 'sort' or undefined","\t\t *        when gathering data. Note that when `undefined` is given for the","\t\t *        type DataTables expects to get the raw data for the object back<","\t\t *      * `{*}` Data to set when the second parameter is 'set'.","\t\t *    * Return:","\t\t *      * The return value from the function is not required when 'set' is","\t\t *        the type of call, but otherwise the return is what will be used","\t\t *        for the data requested.","\t\t *","\t\t * Note that `data` is a getter and setter option. If you just require","\t\t * formatting of data for output, you will likely want to use `render` which","\t\t * is simply a getter and thus simpler to use.","\t\t *","\t\t * Note that prior to DataTables 1.9.2 `data` was called `mDataProp`. The","\t\t * name change reflects the flexibility of this property and is consistent","\t\t * with the naming of mRender. If 'mDataProp' is given, then it will still","\t\t * be used by DataTables, as it automatically maps the old name to the new","\t\t * if required.","\t\t *","\t\t *  @type string|int|function|null","\t\t *  @default null <i>Use automatically calculated column index</i>","\t\t *","\t\t *  @name DataTable.defaults.column.data","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Read table data from objects","\t\t *    // JSON structure for each row:","\t\t *    //   {","\t\t *    //      \"engine\": {value},","\t\t *    //      \"browser\": {value},","\t\t *    //      \"platform\": {value},","\t\t *    //      \"version\": {value},","\t\t *    //      \"grade\": {value}","\t\t *    //   }","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"ajaxSource\": \"sources/objects.txt\",","\t\t *        \"columns\": [","\t\t *          { \"data\": \"engine\" },","\t\t *          { \"data\": \"browser\" },","\t\t *          { \"data\": \"platform\" },","\t\t *          { \"data\": \"version\" },","\t\t *          { \"data\": \"grade\" }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Read information from deeply nested objects","\t\t *    // JSON structure for each row:","\t\t *    //   {","\t\t *    //      \"engine\": {value},","\t\t *    //      \"browser\": {value},","\t\t *    //      \"platform\": {","\t\t *    //         \"inner\": {value}","\t\t *    //      },","\t\t *    //      \"details\": [","\t\t *    //         {value}, {value}","\t\t *    //      ]","\t\t *    //   }","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"ajaxSource\": \"sources/deep.txt\",","\t\t *        \"columns\": [","\t\t *          { \"data\": \"engine\" },","\t\t *          { \"data\": \"browser\" },","\t\t *          { \"data\": \"platform.inner\" },","\t\t *          { \"data\": \"platform.details.0\" },","\t\t *          { \"data\": \"platform.details.1\" }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `data` as a function to provide different information for","\t\t *    // sorting, filtering and display. In this case, currency (price)","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [ {","\t\t *          \"targets\": [ 0 ],","\t\t *          \"data\": function ( source, type, val ) {","\t\t *            if (type === 'set') {","\t\t *              source.price = val;","\t\t *              // Store the computed dislay and filter values for efficiency","\t\t *              source.price_display = val==\"\" ? \"\" : \"$\"+numberFormat(val);","\t\t *              source.price_filter  = val==\"\" ? \"\" : \"$\"+numberFormat(val)+\" \"+val;","\t\t *              return;","\t\t *            }","\t\t *            else if (type === 'display') {","\t\t *              return source.price_display;","\t\t *            }","\t\t *            else if (type === 'filter') {","\t\t *              return source.price_filter;","\t\t *            }","\t\t *            // 'sort', 'type' and undefined all just use the integer","\t\t *            return source.price;","\t\t *          }","\t\t *        } ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using default content","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [ {","\t\t *          \"targets\": [ 0 ],","\t\t *          \"data\": null,","\t\t *          \"defaultContent\": \"Click to edit\"","\t\t *        } ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using array notation - outputting a list from an array","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [ {","\t\t *          \"targets\": [ 0 ],","\t\t *          \"data\": \"name[, ]\"","\t\t *        } ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t */","\t\t\"mData\": null,","\t","\t","\t\t/**","\t\t * This property is the rendering partner to `data` and it is suggested that","\t\t * when you want to manipulate data for display (including filtering,","\t\t * sorting etc) without altering the underlying data for the table, use this","\t\t * property. `render` can be considered to be the the read only companion to","\t\t * `data` which is read / write (then as such more complex). Like `data`","\t\t * this option can be given in a number of different ways to effect its","\t\t * behaviour:","\t\t *","\t\t * * `integer` - treated as an array index for the data source. This is the","\t\t *   default that DataTables uses (incrementally increased for each column).","\t\t * * `string` - read an object property from the data source. There are","\t\t *   three 'special' options that can be used in the string to alter how","\t\t *   DataTables reads the data from the source object:","\t\t *    * `.` - Dotted Javascript notation. Just as you use a `.` in","\t\t *      Javascript to read from nested objects, so to can the options","\t\t *      specified in `data`. For example: `browser.version` or","\t\t *      `browser.name`. If your object parameter name contains a period, use","\t\t *      `\\\\` to escape it - i.e. `first\\\\.name`.","\t\t *    * `[]` - Array notation. DataTables can automatically combine data","\t\t *      from and array source, joining the data with the characters provided","\t\t *      between the two brackets. For example: `name[, ]` would provide a","\t\t *      comma-space separated list from the source array. If no characters","\t\t *      are provided between the brackets, the original array source is","\t\t *      returned.","\t\t *    * `()` - Function notation. Adding `()` to the end of a parameter will","\t\t *      execute a function of the name given. For example: `browser()` for a","\t\t *      simple function on the data source, `browser.version()` for a","\t\t *      function in a nested property or even `browser().version` to get an","\t\t *      object property if the function called returns an object.","\t\t * * `object` - use different data for the different data types requested by","\t\t *   DataTables ('filter', 'display', 'type' or 'sort'). The property names","\t\t *   of the object is the data type the property refers to and the value can","\t\t *   defined using an integer, string or function using the same rules as","\t\t *   `render` normally does. Note that an `_` option _must_ be specified.","\t\t *   This is the default value to use if you haven't specified a value for","\t\t *   the data type requested by DataTables.","\t\t * * `function` - the function given will be executed whenever DataTables","\t\t *   needs to set or get the data for a cell in the column. The function","\t\t *   takes three parameters:","\t\t *    * Parameters:","\t\t *      * {array|object} The data source for the row (based on `data`)","\t\t *      * {string} The type call data requested - this will be 'filter',","\t\t *        'display', 'type' or 'sort'.","\t\t *      * {array|object} The full data source for the row (not based on","\t\t *        `data`)","\t\t *    * Return:","\t\t *      * The return value from the function is what will be used for the","\t\t *        data requested.","\t\t *","\t\t *  @type string|int|function|object|null","\t\t *  @default null Use the data source value.","\t\t *","\t\t *  @name DataTable.defaults.column.render","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Create a comma separated list from an array of objects","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"ajaxSource\": \"sources/deep.txt\",","\t\t *        \"columns\": [","\t\t *          { \"data\": \"engine\" },","\t\t *          { \"data\": \"browser\" },","\t\t *          {","\t\t *            \"data\": \"platform\",","\t\t *            \"render\": \"[, ].name\"","\t\t *          }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Execute a function to obtain data","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [ {","\t\t *          \"targets\": [ 0 ],","\t\t *          \"data\": null, // Use the full data source object for the renderer's source","\t\t *          \"render\": \"browserName()\"","\t\t *        } ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // As an object, extracting different data for the different types","\t\t *    // This would be used with a data source such as:","\t\t *    //   { \"phone\": 5552368, \"phone_filter\": \"5552368 555-2368\", \"phone_display\": \"555-2368\" }","\t\t *    // Here the `phone` integer is used for sorting and type detection, while `phone_filter`","\t\t *    // (which has both forms) is used for filtering for if a user inputs either format, while","\t\t *    // the formatted phone number is the one that is shown in the table.","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [ {","\t\t *          \"targets\": [ 0 ],","\t\t *          \"data\": null, // Use the full data source object for the renderer's source","\t\t *          \"render\": {","\t\t *            \"_\": \"phone\",","\t\t *            \"filter\": \"phone_filter\",","\t\t *            \"display\": \"phone_display\"","\t\t *          }","\t\t *        } ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Use as a function to create a link from the data source","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [ {","\t\t *          \"targets\": [ 0 ],","\t\t *          \"data\": \"download_link\",","\t\t *          \"render\": function ( data, type, full ) {","\t\t *            return '<a href=\"'+data+'\">Download</a>';","\t\t *          }","\t\t *        } ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"mRender\": null,","\t","\t","\t\t/**","\t\t * Change the cell type created for the column - either TD cells or TH cells. This","\t\t * can be useful as TH cells have semantic meaning in the table body, allowing them","\t\t * to act as a header for a row (you may wish to add scope='row' to the TH elements).","\t\t *  @type string","\t\t *  @default td","\t\t *","\t\t *  @name DataTable.defaults.column.cellType","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Make the first column use TH cells","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [ {","\t\t *          \"targets\": [ 0 ],","\t\t *          \"cellType\": \"th\"","\t\t *        } ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sCellType\": \"td\",","\t","\t","\t\t/**","\t\t * Class to give to each cell in this column.","\t\t *  @type string","\t\t *  @default <i>Empty string</i>","\t\t *","\t\t *  @name DataTable.defaults.column.class","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columnDefs`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [","\t\t *          { \"class\": \"my_class\", \"targets\": [ 0 ] }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          { \"class\": \"my_class\" },","\t\t *          null,","\t\t *          null,","\t\t *          null,","\t\t *          null","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sClass\": \"\",","\t","\t\t/**","\t\t * When DataTables calculates the column widths to assign to each column,","\t\t * it finds the longest string in each column and then constructs a","\t\t * temporary table and reads the widths from that. The problem with this","\t\t * is that \"mmm\" is much wider then \"iiii\", but the latter is a longer","\t\t * string - thus the calculation can go wrong (doing it properly and putting","\t\t * it into an DOM object and measuring that is horribly(!) slow). Thus as","\t\t * a \"work around\" we provide this option. It will append its value to the","\t\t * text that is found to be the longest string for the column - i.e. padding.","\t\t * Generally you shouldn't need this!","\t\t *  @type string","\t\t *  @default <i>Empty string<i>","\t\t *","\t\t *  @name DataTable.defaults.column.contentPadding","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          null,","\t\t *          null,","\t\t *          null,","\t\t *          {","\t\t *            \"contentPadding\": \"mmm\"","\t\t *          }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sContentPadding\": \"\",","\t","\t","\t\t/**","\t\t * Allows a default value to be given for a column's data, and will be used","\t\t * whenever a null data source is encountered (this can be because `data`","\t\t * is set to null, or because the data source itself is null).","\t\t *  @type string","\t\t *  @default null","\t\t *","\t\t *  @name DataTable.defaults.column.defaultContent","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columnDefs`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [","\t\t *          {","\t\t *            \"data\": null,","\t\t *            \"defaultContent\": \"Edit\",","\t\t *            \"targets\": [ -1 ]","\t\t *          }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          null,","\t\t *          null,","\t\t *          null,","\t\t *          {","\t\t *            \"data\": null,","\t\t *            \"defaultContent\": \"Edit\"","\t\t *          }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sDefaultContent\": null,","\t","\t","\t\t/**","\t\t * This parameter is only used in DataTables' server-side processing. It can","\t\t * be exceptionally useful to know what columns are being displayed on the","\t\t * client side, and to map these to database fields. When defined, the names","\t\t * also allow DataTables to reorder information from the server if it comes","\t\t * back in an unexpected order (i.e. if you switch your columns around on the","\t\t * client-side, your server-side code does not also need updating).","\t\t *  @type string","\t\t *  @default <i>Empty string</i>","\t\t *","\t\t *  @name DataTable.defaults.column.name","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columnDefs`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [","\t\t *          { \"name\": \"engine\", \"targets\": [ 0 ] },","\t\t *          { \"name\": \"browser\", \"targets\": [ 1 ] },","\t\t *          { \"name\": \"platform\", \"targets\": [ 2 ] },","\t\t *          { \"name\": \"version\", \"targets\": [ 3 ] },","\t\t *          { \"name\": \"grade\", \"targets\": [ 4 ] }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          { \"name\": \"engine\" },","\t\t *          { \"name\": \"browser\" },","\t\t *          { \"name\": \"platform\" },","\t\t *          { \"name\": \"version\" },","\t\t *          { \"name\": \"grade\" }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sName\": \"\",","\t","\t","\t\t/**","\t\t * Defines a data source type for the ordering which can be used to read","\t\t * real-time information from the table (updating the internally cached","\t\t * version) prior to ordering. This allows ordering to occur on user","\t\t * editable elements such as form inputs.","\t\t *  @type string","\t\t *  @default std","\t\t *","\t\t *  @name DataTable.defaults.column.orderDataType","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columnDefs`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [","\t\t *          { \"orderDataType\": \"dom-text\", \"targets\": [ 2, 3 ] },","\t\t *          { \"type\": \"numeric\", \"targets\": [ 3 ] },","\t\t *          { \"orderDataType\": \"dom-select\", \"targets\": [ 4 ] },","\t\t *          { \"orderDataType\": \"dom-checkbox\", \"targets\": [ 5 ] }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          null,","\t\t *          null,","\t\t *          { \"orderDataType\": \"dom-text\" },","\t\t *          { \"orderDataType\": \"dom-text\", \"type\": \"numeric\" },","\t\t *          { \"orderDataType\": \"dom-select\" },","\t\t *          { \"orderDataType\": \"dom-checkbox\" }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sSortDataType\": \"std\",","\t","\t","\t\t/**","\t\t * The title of this column.","\t\t *  @type string","\t\t *  @default null <i>Derived from the 'TH' value for this column in the","\t\t *    original HTML table.</i>","\t\t *","\t\t *  @name DataTable.defaults.column.title","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columnDefs`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [","\t\t *          { \"title\": \"My column title\", \"targets\": [ 0 ] }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          { \"title\": \"My column title\" },","\t\t *          null,","\t\t *          null,","\t\t *          null,","\t\t *          null","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sTitle\": null,","\t","\t","\t\t/**","\t\t * The type allows you to specify how the data for this column will be","\t\t * ordered. Four types (string, numeric, date and html (which will strip","\t\t * HTML tags before ordering)) are currently available. Note that only date","\t\t * formats understood by Javascript's Date() object will be accepted as type","\t\t * date. For example: \"Mar 26, 2008 5:03 PM\". May take the values: 'string',","\t\t * 'numeric', 'date' or 'html' (by default). Further types can be adding","\t\t * through plug-ins.","\t\t *  @type string","\t\t *  @default null <i>Auto-detected from raw data</i>","\t\t *","\t\t *  @name DataTable.defaults.column.type","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columnDefs`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [","\t\t *          { \"type\": \"html\", \"targets\": [ 0 ] }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          { \"type\": \"html\" },","\t\t *          null,","\t\t *          null,","\t\t *          null,","\t\t *          null","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sType\": null,","\t","\t","\t\t/**","\t\t * Defining the width of the column, this parameter may take any CSS value","\t\t * (3em, 20px etc). DataTables applies 'smart' widths to columns which have not","\t\t * been given a specific width through this interface ensuring that the table","\t\t * remains readable.","\t\t *  @type string","\t\t *  @default null <i>Automatic</i>","\t\t *","\t\t *  @name DataTable.defaults.column.width","\t\t *  @dtopt Columns","\t\t *","\t\t *  @example","\t\t *    // Using `columnDefs`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columnDefs\": [","\t\t *          { \"width\": \"20%\", \"targets\": [ 0 ] }","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t *","\t\t *  @example","\t\t *    // Using `columns`","\t\t *    $(document).ready( function() {","\t\t *      $('#example').dataTable( {","\t\t *        \"columns\": [","\t\t *          { \"width\": \"20%\" },","\t\t *          null,","\t\t *          null,","\t\t *          null,","\t\t *          null","\t\t *        ]","\t\t *      } );","\t\t *    } );","\t\t */","\t\t\"sWidth\": null","\t};","\t","\t_fnHungarianMap( DataTable.defaults.column );","\t","\t","\t","\t/**","\t * DataTables settings object - this holds all the information needed for a","\t * given table, including configuration, data and current application of the","\t * table options. DataTables does not have a single instance for each DataTable","\t * with the settings attached to that instance, but rather instances of the","\t * DataTable \"class\" are created on-the-fly as needed (typically by a","\t * $().dataTable() call) and the settings object is then applied to that","\t * instance.","\t *","\t * Note that this object is related to {@link DataTable.defaults} but this","\t * one is the internal data store for DataTables's cache of columns. It should","\t * NOT be manipulated outside of DataTables. Any configuration should be done","\t * through the initialisation options.","\t *  @namespace","\t *  @todo Really should attach the settings object to individual instances so we","\t *    don't need to create new instances on each $().dataTable() call (if the","\t *    table already exists). It would also save passing oSettings around and","\t *    into every single function. However, this is a very significant","\t *    architecture change for DataTables and will almost certainly break","\t *    backwards compatibility with older installations. This is something that","\t *    will be done in 2.0.","\t */","\tDataTable.models.oSettings = {","\t\t/**","\t\t * Primary features of DataTables and their enablement state.","\t\t *  @namespace","\t\t */","\t\t\"oFeatures\": {","\t","\t\t\t/**","\t\t\t * Flag to say if DataTables should automatically try to calculate the","\t\t\t * optimum table and columns widths (true) or not (false).","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bAutoWidth\": null,","\t","\t\t\t/**","\t\t\t * Delay the creation of TR and TD elements until they are actually","\t\t\t * needed by a driven page draw. This can give a significant speed","\t\t\t * increase for Ajax source and Javascript source data, but makes no","\t\t\t * difference at all fro DOM and server-side processing tables.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bDeferRender\": null,","\t","\t\t\t/**","\t\t\t * Enable filtering on the table or not. Note that if this is disabled","\t\t\t * then there is no filtering at all on the table, including fnFilter.","\t\t\t * To just remove the filtering input use sDom and remove the 'f' option.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bFilter\": null,","\t","\t\t\t/**","\t\t\t * Table information element (the 'Showing x of y records' div) enable","\t\t\t * flag.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bInfo\": null,","\t","\t\t\t/**","\t\t\t * Present a user control allowing the end user to change the page size","\t\t\t * when pagination is enabled.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bLengthChange\": null,","\t","\t\t\t/**","\t\t\t * Pagination enabled or not. Note that if this is disabled then length","\t\t\t * changing must also be disabled.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bPaginate\": null,","\t","\t\t\t/**","\t\t\t * Processing indicator enable flag whenever DataTables is enacting a","\t\t\t * user request - typically an Ajax request for server-side processing.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bProcessing\": null,","\t","\t\t\t/**","\t\t\t * Server-side processing enabled flag - when enabled DataTables will","\t\t\t * get all data from the server for every draw - there is no filtering,","\t\t\t * sorting or paging done on the client-side.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bServerSide\": null,","\t","\t\t\t/**","\t\t\t * Sorting enablement flag.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bSort\": null,","\t","\t\t\t/**","\t\t\t * Multi-column sorting","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bSortMulti\": null,","\t","\t\t\t/**","\t\t\t * Apply a class to the columns which are being sorted to provide a","\t\t\t * visual highlight or not. This can slow things down when enabled since","\t\t\t * there is a lot of DOM interaction.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bSortClasses\": null,","\t","\t\t\t/**","\t\t\t * State saving enablement flag.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bStateSave\": null","\t\t},","\t","\t","\t\t/**","\t\t * Scrolling settings for a table.","\t\t *  @namespace","\t\t */","\t\t\"oScroll\": {","\t\t\t/**","\t\t\t * When the table is shorter in height than sScrollY, collapse the","\t\t\t * table container down to the height of the table (when true).","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type boolean","\t\t\t */","\t\t\t\"bCollapse\": null,","\t","\t\t\t/**","\t\t\t * Width of the scrollbar for the web-browser's platform. Calculated","\t\t\t * during table initialisation.","\t\t\t *  @type int","\t\t\t *  @default 0","\t\t\t */","\t\t\t\"iBarWidth\": 0,","\t","\t\t\t/**","\t\t\t * Viewport width for horizontal scrolling. Horizontal scrolling is","\t\t\t * disabled if an empty string.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type string","\t\t\t */","\t\t\t\"sX\": null,","\t","\t\t\t/**","\t\t\t * Width to expand the table to when using x-scrolling. Typically you","\t\t\t * should not need to use this.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type string","\t\t\t *  @deprecated","\t\t\t */","\t\t\t\"sXInner\": null,","\t","\t\t\t/**","\t\t\t * Viewport height for vertical scrolling. Vertical scrolling is disabled","\t\t\t * if an empty string.","\t\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t\t * set a default use {@link DataTable.defaults}.","\t\t\t *  @type string","\t\t\t */","\t\t\t\"sY\": null","\t\t},","\t","\t\t/**","\t\t * Language information for the table.","\t\t *  @namespace","\t\t *  @extends DataTable.defaults.oLanguage","\t\t */","\t\t\"oLanguage\": {","\t\t\t/**","\t\t\t * Information callback function. See","\t\t\t * {@link DataTable.defaults.fnInfoCallback}","\t\t\t *  @type function","\t\t\t *  @default null","\t\t\t */","\t\t\t\"fnInfoCallback\": null","\t\t},","\t","\t\t/**","\t\t * Browser support parameters","\t\t *  @namespace","\t\t */","\t\t\"oBrowser\": {","\t\t\t/**","\t\t\t * Indicate if the browser incorrectly calculates width:100% inside a","\t\t\t * scrolling element (IE6/7)","\t\t\t *  @type boolean","\t\t\t *  @default false","\t\t\t */","\t\t\t\"bScrollOversize\": false,","\t","\t\t\t/**","\t\t\t * Determine if the vertical scrollbar is on the right or left of the","\t\t\t * scrolling container - needed for rtl language layout, although not","\t\t\t * all browsers move the scrollbar (Safari).","\t\t\t *  @type boolean","\t\t\t *  @default false","\t\t\t */","\t\t\t\"bScrollbarLeft\": false","\t\t},","\t","\t","\t\t\"ajax\": null,","\t","\t","\t\t/**","\t\t * Array referencing the nodes which are used for the features. The","\t\t * parameters of this object match what is allowed by sDom - i.e.","\t\t *   <ul>","\t\t *     <li>'l' - Length changing</li>","\t\t *     <li>'f' - Filtering input</li>","\t\t *     <li>'t' - The table!</li>","\t\t *     <li>'i' - Information</li>","\t\t *     <li>'p' - Pagination</li>","\t\t *     <li>'r' - pRocessing</li>","\t\t *   </ul>","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aanFeatures\": [],","\t","\t\t/**","\t\t * Store data information - see {@link DataTable.models.oRow} for detailed","\t\t * information.","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoData\": [],","\t","\t\t/**","\t\t * Array of indexes which are in the current display (after filtering etc)","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aiDisplay\": [],","\t","\t\t/**","\t\t * Array of indexes for display - no filtering","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aiDisplayMaster\": [],","\t","\t\t/**","\t\t * Store information about each column that is in use","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoColumns\": [],","\t","\t\t/**","\t\t * Store information about the table's header","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoHeader\": [],","\t","\t\t/**","\t\t * Store information about the table's footer","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoFooter\": [],","\t","\t\t/**","\t\t * Store the applied global search information in case we want to force a","\t\t * research or compare the old search to a new one.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @namespace","\t\t *  @extends DataTable.models.oSearch","\t\t */","\t\t\"oPreviousSearch\": {},","\t","\t\t/**","\t\t * Store the applied search for each column - see","\t\t * {@link DataTable.models.oSearch} for the format that is used for the","\t\t * filtering information for each column.","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoPreSearchCols\": [],","\t","\t\t/**","\t\t * Sorting that is applied to the table. Note that the inner arrays are","\t\t * used in the following manner:","\t\t * <ul>","\t\t *   <li>Index 0 - column number</li>","\t\t *   <li>Index 1 - current sorting direction</li>","\t\t * </ul>","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type array","\t\t *  @todo These inner arrays should really be objects","\t\t */","\t\t\"aaSorting\": null,","\t","\t\t/**","\t\t * Sorting that is always applied to the table (i.e. prefixed in front of","\t\t * aaSorting).","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aaSortingFixed\": [],","\t","\t\t/**","\t\t * Classes to use for the striping of a table.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"asStripeClasses\": null,","\t","\t\t/**","\t\t * If restoring a table - we should restore its striping classes as well","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"asDestroyStripes\": [],","\t","\t\t/**","\t\t * If restoring a table - we should restore its width","\t\t *  @type int","\t\t *  @default 0","\t\t */","\t\t\"sDestroyWidth\": 0,","\t","\t\t/**","\t\t * Callback functions array for every time a row is inserted (i.e. on a draw).","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoRowCallback\": [],","\t","\t\t/**","\t\t * Callback functions for the header on each draw.","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoHeaderCallback\": [],","\t","\t\t/**","\t\t * Callback function for the footer on each draw.","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoFooterCallback\": [],","\t","\t\t/**","\t\t * Array of callback functions for draw callback functions","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoDrawCallback\": [],","\t","\t\t/**","\t\t * Array of callback functions for row created function","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoRowCreatedCallback\": [],","\t","\t\t/**","\t\t * Callback functions for just before the table is redrawn. A return of","\t\t * false will be used to cancel the draw.","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoPreDrawCallback\": [],","\t","\t\t/**","\t\t * Callback functions for when the table has been initialised.","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoInitComplete\": [],","\t","\t","\t\t/**","\t\t * Callbacks for modifying the settings to be stored for state saving, prior to","\t\t * saving state.","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoStateSaveParams\": [],","\t","\t\t/**","\t\t * Callbacks for modifying the settings that have been stored for state saving","\t\t * prior to using the stored values to restore the state.","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoStateLoadParams\": [],","\t","\t\t/**","\t\t * Callbacks for operating on the settings object once the saved state has been","\t\t * loaded","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoStateLoaded\": [],","\t","\t\t/**","\t\t * Cache the table ID for quick access","\t\t *  @type string","\t\t *  @default <i>Empty string</i>","\t\t */","\t\t\"sTableId\": \"\",","\t","\t\t/**","\t\t * The TABLE node for the main table","\t\t *  @type node","\t\t *  @default null","\t\t */","\t\t\"nTable\": null,","\t","\t\t/**","\t\t * Permanent ref to the thead element","\t\t *  @type node","\t\t *  @default null","\t\t */","\t\t\"nTHead\": null,","\t","\t\t/**","\t\t * Permanent ref to the tfoot element - if it exists","\t\t *  @type node","\t\t *  @default null","\t\t */","\t\t\"nTFoot\": null,","\t","\t\t/**","\t\t * Permanent ref to the tbody element","\t\t *  @type node","\t\t *  @default null","\t\t */","\t\t\"nTBody\": null,","\t","\t\t/**","\t\t * Cache the wrapper node (contains all DataTables controlled elements)","\t\t *  @type node","\t\t *  @default null","\t\t */","\t\t\"nTableWrapper\": null,","\t","\t\t/**","\t\t * Indicate if when using server-side processing the loading of data","\t\t * should be deferred until the second draw.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type boolean","\t\t *  @default false","\t\t */","\t\t\"bDeferLoading\": false,","\t","\t\t/**","\t\t * Indicate if all required information has been read in","\t\t *  @type boolean","\t\t *  @default false","\t\t */","\t\t\"bInitialised\": false,","\t","\t\t/**","\t\t * Information about open rows. Each object in the array has the parameters","\t\t * 'nTr' and 'nParent'","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoOpenRows\": [],","\t","\t\t/**","\t\t * Dictate the positioning of DataTables' control elements - see","\t\t * {@link DataTable.model.oInit.sDom}.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type string","\t\t *  @default null","\t\t */","\t\t\"sDom\": null,","\t","\t\t/**","\t\t * Search delay (in mS)","\t\t *  @type integer","\t\t *  @default null","\t\t */","\t\t\"searchDelay\": null,","\t","\t\t/**","\t\t * Which type of pagination should be used.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type string","\t\t *  @default two_button","\t\t */","\t\t\"sPaginationType\": \"two_button\",","\t","\t\t/**","\t\t * The state duration (for `stateSave`) in seconds.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type int","\t\t *  @default 0","\t\t */","\t\t\"iStateDuration\": 0,","\t","\t\t/**","\t\t * Array of callback functions for state saving. Each array element is an","\t\t * object with the following parameters:","\t\t *   <ul>","\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings","\t\t *       and the JSON string to save that has been thus far created. Returns","\t\t *       a JSON string to be inserted into a json object","\t\t *       (i.e. '\"param\": [ 0, 1, 2]')</li>","\t\t *     <li>string:sName - name of callback</li>","\t\t *   </ul>","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoStateSave\": [],","\t","\t\t/**","\t\t * Array of callback functions for state loading. Each array element is an","\t\t * object with the following parameters:","\t\t *   <ul>","\t\t *     <li>function:fn - function to call. Takes two parameters, oSettings","\t\t *       and the object stored. May return false to cancel state loading</li>","\t\t *     <li>string:sName - name of callback</li>","\t\t *   </ul>","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoStateLoad\": [],","\t","\t\t/**","\t\t * State that was saved. Useful for back reference","\t\t *  @type object","\t\t *  @default null","\t\t */","\t\t\"oSavedState\": null,","\t","\t\t/**","\t\t * State that was loaded. Useful for back reference","\t\t *  @type object","\t\t *  @default null","\t\t */","\t\t\"oLoadedState\": null,","\t","\t\t/**","\t\t * Source url for AJAX data for the table.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type string","\t\t *  @default null","\t\t */","\t\t\"sAjaxSource\": null,","\t","\t\t/**","\t\t * Property from a given object from which to read the table data from. This","\t\t * can be an empty string (when not server-side processing), in which case","\t\t * it is  assumed an an array is given directly.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type string","\t\t */","\t\t\"sAjaxDataProp\": null,","\t","\t\t/**","\t\t * Note if draw should be blocked while getting data","\t\t *  @type boolean","\t\t *  @default true","\t\t */","\t\t\"bAjaxDataGet\": true,","\t","\t\t/**","\t\t * The last jQuery XHR object that was used for server-side data gathering.","\t\t * This can be used for working with the XHR information in one of the","\t\t * callbacks","\t\t *  @type object","\t\t *  @default null","\t\t */","\t\t\"jqXHR\": null,","\t","\t\t/**","\t\t * JSON returned from the server in the last Ajax request","\t\t *  @type object","\t\t *  @default undefined","\t\t */","\t\t\"json\": undefined,","\t","\t\t/**","\t\t * Data submitted as part of the last Ajax request","\t\t *  @type object","\t\t *  @default undefined","\t\t */","\t\t\"oAjaxData\": undefined,","\t","\t\t/**","\t\t * Function to get the server-side data.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type function","\t\t */","\t\t\"fnServerData\": null,","\t","\t\t/**","\t\t * Functions which are called prior to sending an Ajax request so extra","\t\t * parameters can easily be sent to the server","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoServerParams\": [],","\t","\t\t/**","\t\t * Send the XHR HTTP method - GET or POST (could be PUT or DELETE if","\t\t * required).","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type string","\t\t */","\t\t\"sServerMethod\": null,","\t","\t\t/**","\t\t * Format numbers for display.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type function","\t\t */","\t\t\"fnFormatNumber\": null,","\t","\t\t/**","\t\t * List of options that can be used for the user selectable length menu.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aLengthMenu\": null,","\t","\t\t/**","\t\t * Counter for the draws that the table does. Also used as a tracker for","\t\t * server-side processing","\t\t *  @type int","\t\t *  @default 0","\t\t */","\t\t\"iDraw\": 0,","\t","\t\t/**","\t\t * Indicate if a redraw is being done - useful for Ajax","\t\t *  @type boolean","\t\t *  @default false","\t\t */","\t\t\"bDrawing\": false,","\t","\t\t/**","\t\t * Draw index (iDraw) of the last error when parsing the returned data","\t\t *  @type int","\t\t *  @default -1","\t\t */","\t\t\"iDrawError\": -1,","\t","\t\t/**","\t\t * Paging display length","\t\t *  @type int","\t\t *  @default 10","\t\t */","\t\t\"_iDisplayLength\": 10,","\t","\t\t/**","\t\t * Paging start point - aiDisplay index","\t\t *  @type int","\t\t *  @default 0","\t\t */","\t\t\"_iDisplayStart\": 0,","\t","\t\t/**","\t\t * Server-side processing - number of records in the result set","\t\t * (i.e. before filtering), Use fnRecordsTotal rather than","\t\t * this property to get the value of the number of records, regardless of","\t\t * the server-side processing setting.","\t\t *  @type int","\t\t *  @default 0","\t\t *  @private","\t\t */","\t\t\"_iRecordsTotal\": 0,","\t","\t\t/**","\t\t * Server-side processing - number of records in the current display set","\t\t * (i.e. after filtering). Use fnRecordsDisplay rather than","\t\t * this property to get the value of the number of records, regardless of","\t\t * the server-side processing setting.","\t\t *  @type boolean","\t\t *  @default 0","\t\t *  @private","\t\t */","\t\t\"_iRecordsDisplay\": 0,","\t","\t\t/**","\t\t * Flag to indicate if jQuery UI marking and classes should be used.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type boolean","\t\t */","\t\t\"bJUI\": null,","\t","\t\t/**","\t\t * The classes to use for the table","\t\t *  @type object","\t\t *  @default {}","\t\t */","\t\t\"oClasses\": {},","\t","\t\t/**","\t\t * Flag attached to the settings object so you can check in the draw","\t\t * callback if filtering has been done in the draw. Deprecated in favour of","\t\t * events.","\t\t *  @type boolean","\t\t *  @default false","\t\t *  @deprecated","\t\t */","\t\t\"bFiltered\": false,","\t","\t\t/**","\t\t * Flag attached to the settings object so you can check in the draw","\t\t * callback if sorting has been done in the draw. Deprecated in favour of","\t\t * events.","\t\t *  @type boolean","\t\t *  @default false","\t\t *  @deprecated","\t\t */","\t\t\"bSorted\": false,","\t","\t\t/**","\t\t * Indicate that if multiple rows are in the header and there is more than","\t\t * one unique cell per column, if the top one (true) or bottom one (false)","\t\t * should be used for sorting / title by DataTables.","\t\t * Note that this parameter will be set by the initialisation routine. To","\t\t * set a default use {@link DataTable.defaults}.","\t\t *  @type boolean","\t\t */","\t\t\"bSortCellsTop\": null,","\t","\t\t/**","\t\t * Initialisation object that is used for the table","\t\t *  @type object","\t\t *  @default null","\t\t */","\t\t\"oInit\": null,","\t","\t\t/**","\t\t * Destroy callback functions - for plug-ins to attach themselves to the","\t\t * destroy so they can clean up markup and events.","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aoDestroyCallback\": [],","\t","\t","\t\t/**","\t\t * Get the number of records in the current record set, before filtering","\t\t *  @type function","\t\t */","\t\t\"fnRecordsTotal\": function ()","\t\t{","\t\t\treturn _fnDataSource( this ) == 'ssp' ?","\t\t\t\tthis._iRecordsTotal * 1 :","\t\t\t\tthis.aiDisplayMaster.length;","\t\t},","\t","\t\t/**","\t\t * Get the number of records in the current record set, after filtering","\t\t *  @type function","\t\t */","\t\t\"fnRecordsDisplay\": function ()","\t\t{","\t\t\treturn _fnDataSource( this ) == 'ssp' ?","\t\t\t\tthis._iRecordsDisplay * 1 :","\t\t\t\tthis.aiDisplay.length;","\t\t},","\t","\t\t/**","\t\t * Get the display end point - aiDisplay index","\t\t *  @type function","\t\t */","\t\t\"fnDisplayEnd\": function ()","\t\t{","\t\t\tvar","\t\t\t\tlen      = this._iDisplayLength,","\t\t\t\tstart    = this._iDisplayStart,","\t\t\t\tcalc     = start + len,","\t\t\t\trecords  = this.aiDisplay.length,","\t\t\t\tfeatures = this.oFeatures,","\t\t\t\tpaginate = features.bPaginate;","\t","\t\t\tif ( features.bServerSide ) {","\t\t\t\treturn paginate === false || len === -1 ?","\t\t\t\t\tstart + records :","\t\t\t\t\tMath.min( start+len, this._iRecordsDisplay );","\t\t\t}","\t\t\telse {","\t\t\t\treturn ! paginate || calc>records || len===-1 ?","\t\t\t\t\trecords :","\t\t\t\t\tcalc;","\t\t\t}","\t\t},","\t","\t\t/**","\t\t * The DataTables object for this table","\t\t *  @type object","\t\t *  @default null","\t\t */","\t\t\"oInstance\": null,","\t","\t\t/**","\t\t * Unique identifier for each instance of the DataTables object. If there","\t\t * is an ID on the table node, then it takes that value, otherwise an","\t\t * incrementing internal counter is used.","\t\t *  @type string","\t\t *  @default null","\t\t */","\t\t\"sInstance\": null,","\t","\t\t/**","\t\t * tabindex attribute value that is added to DataTables control elements, allowing","\t\t * keyboard navigation of the table and its controls.","\t\t */","\t\t\"iTabIndex\": 0,","\t","\t\t/**","\t\t * DIV container for the footer scrolling table if scrolling","\t\t */","\t\t\"nScrollHead\": null,","\t","\t\t/**","\t\t * DIV container for the footer scrolling table if scrolling","\t\t */","\t\t\"nScrollFoot\": null,","\t","\t\t/**","\t\t * Last applied sort","\t\t *  @type array","\t\t *  @default []","\t\t */","\t\t\"aLastSort\": [],","\t","\t\t/**","\t\t * Stored plug-in instances","\t\t *  @type object","\t\t *  @default {}","\t\t */","\t\t\"oPlugins\": {}","\t};","","\t/**","\t * Extension object for DataTables that is used to provide all extension","\t * options.","\t *","\t * Note that the `DataTable.ext` object is available through","\t * `jQuery.fn.dataTable.ext` where it may be accessed and manipulated. It is","\t * also aliased to `jQuery.fn.dataTableExt` for historic reasons.","\t *  @namespace","\t *  @extends DataTable.models.ext","\t */","\t","\t","\t/**","\t * DataTables extensions","\t * ","\t * This namespace acts as a collection area for plug-ins that can be used to","\t * extend DataTables capabilities. Indeed many of the build in methods","\t * use this method to provide their own capabilities (sorting methods for","\t * example).","\t *","\t * Note that this namespace is aliased to `jQuery.fn.dataTableExt` for legacy","\t * reasons","\t *","\t *  @namespace","\t */","\tDataTable.ext = _ext = {","\t\t/**","\t\t * Buttons. For use with the Buttons extension for DataTables. This is","\t\t * defined here so other extensions can define buttons regardless of load","\t\t * order. It is _not_ used by DataTables core.","\t\t *","\t\t *  @type object","\t\t *  @default {}","\t\t */","\t\tbuttons: {},","\t","\t","\t\t/**","\t\t * Element class names","\t\t *","\t\t *  @type object","\t\t *  @default {}","\t\t */","\t\tclasses: {},","\t","\t","\t\t/**","\t\t * Error reporting.","\t\t * ","\t\t * How should DataTables report an error. Can take the value 'alert',","\t\t * 'throw', 'none' or a function.","\t\t *","\t\t *  @type string|function","\t\t *  @default alert","\t\t */","\t\terrMode: \"alert\",","\t","\t","\t\t/**","\t\t * Feature plug-ins.","\t\t * ","\t\t * This is an array of objects which describe the feature plug-ins that are","\t\t * available to DataTables. These feature plug-ins are then available for","\t\t * use through the `dom` initialisation option.","\t\t * ","\t\t * Each feature plug-in is described by an object which must have the","\t\t * following properties:","\t\t * ","\t\t * * `fnInit` - function that is used to initialise the plug-in,","\t\t * * `cFeature` - a character so the feature can be enabled by the `dom`","\t\t *   instillation option. This is case sensitive.","\t\t *","\t\t * The `fnInit` function has the following input parameters:","\t\t *","\t\t * 1. `{object}` DataTables settings object: see","\t\t *    {@link DataTable.models.oSettings}","\t\t *","\t\t * And the following return is expected:","\t\t * ","\t\t * * {node|null} The element which contains your feature. Note that the","\t\t *   return may also be void if your plug-in does not require to inject any","\t\t *   DOM elements into DataTables control (`dom`) - for example this might","\t\t *   be useful when developing a plug-in which allows table control via","\t\t *   keyboard entry","\t\t *","\t\t *  @type array","\t\t *","\t\t *  @example","\t\t *    $.fn.dataTable.ext.features.push( {","\t\t *      \"fnInit\": function( oSettings ) {","\t\t *        return new TableTools( { \"oDTSettings\": oSettings } );","\t\t *      },","\t\t *      \"cFeature\": \"T\"","\t\t *    } );","\t\t */","\t\tfeature: [],","\t","\t","\t\t/**","\t\t * Row searching.","\t\t * ","\t\t * This method of searching is complimentary to the default type based","\t\t * searching, and a lot more comprehensive as it allows you complete control","\t\t * over the searching logic. Each element in this array is a function","\t\t * (parameters described below) that is called for every row in the table,","\t\t * and your logic decides if it should be included in the searching data set","\t\t * or not.","\t\t *","\t\t * Searching functions have the following input parameters:","\t\t *","\t\t * 1. `{object}` DataTables settings object: see","\t\t *    {@link DataTable.models.oSettings}","\t\t * 2. `{array|object}` Data for the row to be processed (same as the","\t\t *    original format that was passed in as the data source, or an array","\t\t *    from a DOM data source","\t\t * 3. `{int}` Row index ({@link DataTable.models.oSettings.aoData}), which","\t\t *    can be useful to retrieve the `TR` element if you need DOM interaction.","\t\t *","\t\t * And the following return is expected:","\t\t *","\t\t * * {boolean} Include the row in the searched result set (true) or not","\t\t *   (false)","\t\t *","\t\t * Note that as with the main search ability in DataTables, technically this","\t\t * is \"filtering\", since it is subtractive. However, for consistency in","\t\t * naming we call it searching here.","\t\t *","\t\t *  @type array","\t\t *  @default []","\t\t *","\t\t *  @example","\t\t *    // The following example shows custom search being applied to the","\t\t *    // fourth column (i.e. the data[3] index) based on two input values","\t\t *    // from the end-user, matching the data in a certain range.","\t\t *    $.fn.dataTable.ext.search.push(","\t\t *      function( settings, data, dataIndex ) {","\t\t *        var min = document.getElementById('min').value * 1;","\t\t *        var max = document.getElementById('max').value * 1;","\t\t *        var version = data[3] == \"-\" ? 0 : data[3]*1;","\t\t *","\t\t *        if ( min == \"\" && max == \"\" ) {","\t\t *          return true;","\t\t *        }","\t\t *        else if ( min == \"\" && version < max ) {","\t\t *          return true;","\t\t *        }","\t\t *        else if ( min < version && \"\" == max ) {","\t\t *          return true;","\t\t *        }","\t\t *        else if ( min < version && version < max ) {","\t\t *          return true;","\t\t *        }","\t\t *        return false;","\t\t *      }","\t\t *    );","\t\t */","\t\tsearch: [],","\t","\t","\t\t/**","\t\t * Internal functions, exposed for used in plug-ins.","\t\t * ","\t\t * Please note that you should not need to use the internal methods for","\t\t * anything other than a plug-in (and even then, try to avoid if possible).","\t\t * The internal function may change between releases.","\t\t *","\t\t *  @type object","\t\t *  @default {}","\t\t */","\t\tinternal: {},","\t","\t","\t\t/**","\t\t * Legacy configuration options. Enable and disable legacy options that","\t\t * are available in DataTables.","\t\t *","\t\t *  @type object","\t\t */","\t\tlegacy: {","\t\t\t/**","\t\t\t * Enable / disable DataTables 1.9 compatible server-side processing","\t\t\t * requests","\t\t\t *","\t\t\t *  @type boolean","\t\t\t *  @default null","\t\t\t */","\t\t\tajax: null","\t\t},","\t","\t","\t\t/**","\t\t * Pagination plug-in methods.","\t\t * ","\t\t * Each entry in this object is a function and defines which buttons should","\t\t * be shown by the pagination rendering method that is used for the table:","\t\t * {@link DataTable.ext.renderer.pageButton}. The renderer addresses how the","\t\t * buttons are displayed in the document, while the functions here tell it","\t\t * what buttons to display. This is done by returning an array of button","\t\t * descriptions (what each button will do).","\t\t *","\t\t * Pagination types (the four built in options and any additional plug-in","\t\t * options defined here) can be used through the `paginationType`","\t\t * initialisation parameter.","\t\t *","\t\t * The functions defined take two parameters:","\t\t *","\t\t * 1. `{int} page` The current page index","\t\t * 2. `{int} pages` The number of pages in the table","\t\t *","\t\t * Each function is expected to return an array where each element of the","\t\t * array can be one of:","\t\t *","\t\t * * `first` - Jump to first page when activated","\t\t * * `last` - Jump to last page when activated","\t\t * * `previous` - Show previous page when activated","\t\t * * `next` - Show next page when activated","\t\t * * `{int}` - Show page of the index given","\t\t * * `{array}` - A nested array containing the above elements to add a","\t\t *   containing 'DIV' element (might be useful for styling).","\t\t *","\t\t * Note that DataTables v1.9- used this object slightly differently whereby","\t\t * an object with two functions would be defined for each plug-in. That","\t\t * ability is still supported by DataTables 1.10+ to provide backwards","\t\t * compatibility, but this option of use is now decremented and no longer","\t\t * documented in DataTables 1.10+.","\t\t *","\t\t *  @type object","\t\t *  @default {}","\t\t *","\t\t *  @example","\t\t *    // Show previous, next and current page buttons only","\t\t *    $.fn.dataTableExt.oPagination.current = function ( page, pages ) {","\t\t *      return [ 'previous', page, 'next' ];","\t\t *    };","\t\t */","\t\tpager: {},","\t","\t","\t\trenderer: {","\t\t\tpageButton: {},","\t\t\theader: {}","\t\t},","\t","\t","\t\t/**","\t\t * Ordering plug-ins - custom data source","\t\t * ","\t\t * The extension options for ordering of data available here is complimentary","\t\t * to the default type based ordering that DataTables typically uses. It","\t\t * allows much greater control over the the data that is being used to","\t\t * order a column, but is necessarily therefore more complex.","\t\t * ","\t\t * This type of ordering is useful if you want to do ordering based on data","\t\t * live from the DOM (for example the contents of an 'input' element) rather","\t\t * than just the static string that DataTables knows of.","\t\t * ","\t\t * The way these plug-ins work is that you create an array of the values you","\t\t * wish to be ordering for the column in question and then return that","\t\t * array. The data in the array much be in the index order of the rows in","\t\t * the table (not the currently ordering order!). Which order data gathering","\t\t * function is run here depends on the `dt-init columns.orderDataType`","\t\t * parameter that is used for the column (if any).","\t\t *","\t\t * The functions defined take two parameters:","\t\t *","\t\t * 1. `{object}` DataTables settings object: see","\t\t *    {@link DataTable.models.oSettings}","\t\t * 2. `{int}` Target column index","\t\t *","\t\t * Each function is expected to return an array:","\t\t *","\t\t * * `{array}` Data for the column to be ordering upon","\t\t *","\t\t *  @type array","\t\t *","\t\t *  @example","\t\t *    // Ordering using `input` node values","\t\t *    $.fn.dataTable.ext.order['dom-text'] = function  ( settings, col )","\t\t *    {","\t\t *      return this.api().column( col, {order:'index'} ).nodes().map( function ( td, i ) {","\t\t *        return $('input', td).val();","\t\t *      } );","\t\t *    }","\t\t */","\t\torder: {},","\t","\t","\t\t/**","\t\t * Type based plug-ins.","\t\t *","\t\t * Each column in DataTables has a type assigned to it, either by automatic","\t\t * detection or by direct assignment using the `type` option for the column.","\t\t * The type of a column will effect how it is ordering and search (plug-ins","\t\t * can also make use of the column type if required).","\t\t *","\t\t * @namespace","\t\t */","\t\ttype: {","\t\t\t/**","\t\t\t * Type detection functions.","\t\t\t *","\t\t\t * The functions defined in this object are used to automatically detect","\t\t\t * a column's type, making initialisation of DataTables super easy, even","\t\t\t * when complex data is in the table.","\t\t\t *","\t\t\t * The functions defined take two parameters:","\t\t\t *","\t\t     *  1. `{*}` Data from the column cell to be analysed","\t\t     *  2. `{settings}` DataTables settings object. This can be used to","\t\t     *     perform context specific type detection - for example detection","\t\t     *     based on language settings such as using a comma for a decimal","\t\t     *     place. Generally speaking the options from the settings will not","\t\t     *     be required","\t\t\t *","\t\t\t * Each function is expected to return:","\t\t\t *","\t\t\t * * `{string|null}` Data type detected, or null if unknown (and thus","\t\t\t *   pass it on to the other type detection functions.","\t\t\t *","\t\t\t *  @type array","\t\t\t *","\t\t\t *  @example","\t\t\t *    // Currency type detection plug-in:","\t\t\t *    $.fn.dataTable.ext.type.detect.push(","\t\t\t *      function ( data, settings ) {","\t\t\t *        // Check the numeric part","\t\t\t *        if ( ! $.isNumeric( data.substring(1) ) ) {","\t\t\t *          return null;","\t\t\t *        }","\t\t\t *","\t\t\t *        // Check prefixed by currency","\t\t\t *        if ( data.charAt(0) == '$' || data.charAt(0) == '&pound;' ) {","\t\t\t *          return 'currency';","\t\t\t *        }","\t\t\t *        return null;","\t\t\t *      }","\t\t\t *    );","\t\t\t */","\t\t\tdetect: [],","\t","\t","\t\t\t/**","\t\t\t * Type based search formatting.","\t\t\t *","\t\t\t * The type based searching functions can be used to pre-format the","\t\t\t * data to be search on. For example, it can be used to strip HTML","\t\t\t * tags or to de-format telephone numbers for numeric only searching.","\t\t\t *","\t\t\t * Note that is a search is not defined for a column of a given type,","\t\t\t * no search formatting will be performed.","\t\t\t * ","\t\t\t * Pre-processing of searching data plug-ins - When you assign the sType","\t\t\t * for a column (or have it automatically detected for you by DataTables","\t\t\t * or a type detection plug-in), you will typically be using this for","\t\t\t * custom sorting, but it can also be used to provide custom searching","\t\t\t * by allowing you to pre-processing the data and returning the data in","\t\t\t * the format that should be searched upon. This is done by adding","\t\t\t * functions this object with a parameter name which matches the sType","\t\t\t * for that target column. This is the corollary of <i>afnSortData</i>","\t\t\t * for searching data.","\t\t\t *","\t\t\t * The functions defined take a single parameter:","\t\t\t *","\t\t     *  1. `{*}` Data from the column cell to be prepared for searching","\t\t\t *","\t\t\t * Each function is expected to return:","\t\t\t *","\t\t\t * * `{string|null}` Formatted string that will be used for the searching.","\t\t\t *","\t\t\t *  @type object","\t\t\t *  @default {}","\t\t\t *","\t\t\t *  @example","\t\t\t *    $.fn.dataTable.ext.type.search['title-numeric'] = function ( d ) {","\t\t\t *      return d.replace(/\\n/g,\" \").replace( /<.*?>/g, \"\" );","\t\t\t *    }","\t\t\t */","\t\t\tsearch: {},","\t","\t","\t\t\t/**","\t\t\t * Type based ordering.","\t\t\t *","\t\t\t * The column type tells DataTables what ordering to apply to the table","\t\t\t * when a column is sorted upon. The order for each type that is defined,","\t\t\t * is defined by the functions available in this object.","\t\t\t *","\t\t\t * Each ordering option can be described by three properties added to","\t\t\t * this object:","\t\t\t *","\t\t\t * * `{type}-pre` - Pre-formatting function","\t\t\t * * `{type}-asc` - Ascending order function","\t\t\t * * `{type}-desc` - Descending order function","\t\t\t *","\t\t\t * All three can be used together, only `{type}-pre` or only","\t\t\t * `{type}-asc` and `{type}-desc` together. It is generally recommended","\t\t\t * that only `{type}-pre` is used, as this provides the optimal","\t\t\t * implementation in terms of speed, although the others are provided","\t\t\t * for compatibility with existing Javascript sort functions.","\t\t\t *","\t\t\t * `{type}-pre`: Functions defined take a single parameter:","\t\t\t *","\t\t     *  1. `{*}` Data from the column cell to be prepared for ordering","\t\t\t *","\t\t\t * And return:","\t\t\t *","\t\t\t * * `{*}` Data to be sorted upon","\t\t\t *","\t\t\t * `{type}-asc` and `{type}-desc`: Functions are typical Javascript sort","\t\t\t * functions, taking two parameters:","\t\t\t *","\t\t     *  1. `{*}` Data to compare to the second parameter","\t\t     *  2. `{*}` Data to compare to the first parameter","\t\t\t *","\t\t\t * And returning:","\t\t\t *","\t\t\t * * `{*}` Ordering match: <0 if first parameter should be sorted lower","\t\t\t *   than the second parameter, ===0 if the two parameters are equal and","\t\t\t *   >0 if the first parameter should be sorted height than the second","\t\t\t *   parameter.","\t\t\t * ","\t\t\t *  @type object","\t\t\t *  @default {}","\t\t\t *","\t\t\t *  @example","\t\t\t *    // Numeric ordering of formatted numbers with a pre-formatter","\t\t\t *    $.extend( $.fn.dataTable.ext.type.order, {","\t\t\t *      \"string-pre\": function(x) {","\t\t\t *        a = (a === \"-\" || a === \"\") ? 0 : a.replace( /[^\\d\\-\\.]/g, \"\" );","\t\t\t *        return parseFloat( a );","\t\t\t *      }","\t\t\t *    } );","\t\t\t *","\t\t\t *  @example","\t\t\t *    // Case-sensitive string ordering, with no pre-formatting method","\t\t\t *    $.extend( $.fn.dataTable.ext.order, {","\t\t\t *      \"string-case-asc\": function(x,y) {","\t\t\t *        return ((x < y) ? -1 : ((x > y) ? 1 : 0));","\t\t\t *      },","\t\t\t *      \"string-case-desc\": function(x,y) {","\t\t\t *        return ((x < y) ? 1 : ((x > y) ? -1 : 0));","\t\t\t *      }","\t\t\t *    } );","\t\t\t */","\t\t\torder: {}","\t\t},","\t","\t\t/**","\t\t * Unique DataTables instance counter","\t\t *","\t\t * @type int","\t\t * @private","\t\t */","\t\t_unique: 0,","\t","\t","\t\t//","\t\t// Depreciated","\t\t// The following properties are retained for backwards compatiblity only.","\t\t// The should not be used in new projects and will be removed in a future","\t\t// version","\t\t//","\t","\t\t/**","\t\t * Version check function.","\t\t *  @type function","\t\t *  @depreciated Since 1.10","\t\t */","\t\tfnVersionCheck: DataTable.fnVersionCheck,","\t","\t","\t\t/**","\t\t * Index for what 'this' index API functions should use","\t\t *  @type int","\t\t *  @deprecated Since v1.10","\t\t */","\t\tiApiIndex: 0,","\t","\t","\t\t/**","\t\t * jQuery UI class container","\t\t *  @type object","\t\t *  @deprecated Since v1.10","\t\t */","\t\toJUIClasses: {},","\t","\t","\t\t/**","\t\t * Software version","\t\t *  @type string","\t\t *  @deprecated Since v1.10","\t\t */","\t\tsVersion: DataTable.version","\t};","\t","\t","\t//","\t// Backwards compatibility. Alias to pre 1.10 Hungarian notation counter parts","\t//","\t$.extend( _ext, {","\t\tafnFiltering: _ext.search,","\t\taTypes:       _ext.type.detect,","\t\tofnSearch:    _ext.type.search,","\t\toSort:        _ext.type.order,","\t\tafnSortData:  _ext.order,","\t\taoFeatures:   _ext.feature,","\t\toApi:         _ext.internal,","\t\toStdClasses:  _ext.classes,","\t\toPagination:  _ext.pager","\t} );","\t","\t","\t$.extend( DataTable.ext.classes, {","\t\t\"sTable\": \"dataTable\",","\t\t\"sNoFooter\": \"no-footer\",","\t","\t\t/* Paging buttons */","\t\t\"sPageButton\": \"paginate_button\",","\t\t\"sPageButtonActive\": \"current\",","\t\t\"sPageButtonDisabled\": \"disabled\",","\t","\t\t/* Striping classes */","\t\t\"sStripeOdd\": \"odd\",","\t\t\"sStripeEven\": \"even\",","\t","\t\t/* Empty row */","\t\t\"sRowEmpty\": \"dataTables_empty\",","\t","\t\t/* Features */","\t\t\"sWrapper\": \"dataTables_wrapper\",","\t\t\"sFilter\": \"dataTables_filter\",","\t\t\"sInfo\": \"dataTables_info\",","\t\t\"sPaging\": \"dataTables_paginate paging_\", /* Note that the type is postfixed */","\t\t\"sLength\": \"dataTables_length\",","\t\t\"sProcessing\": \"dataTables_processing\",","\t","\t\t/* Sorting */","\t\t\"sSortAsc\": \"sorting_asc\",","\t\t\"sSortDesc\": \"sorting_desc\",","\t\t\"sSortable\": \"sorting\", /* Sortable in both directions */","\t\t\"sSortableAsc\": \"sorting_asc_disabled\",","\t\t\"sSortableDesc\": \"sorting_desc_disabled\",","\t\t\"sSortableNone\": \"sorting_disabled\",","\t\t\"sSortColumn\": \"sorting_\", /* Note that an int is postfixed for the sorting order */","\t","\t\t/* Filtering */","\t\t\"sFilterInput\": \"\",","\t","\t\t/* Page length */","\t\t\"sLengthSelect\": \"\",","\t","\t\t/* Scrolling */","\t\t\"sScrollWrapper\": \"dataTables_scroll\",","\t\t\"sScrollHead\": \"dataTables_scrollHead\",","\t\t\"sScrollHeadInner\": \"dataTables_scrollHeadInner\",","\t\t\"sScrollBody\": \"dataTables_scrollBody\",","\t\t\"sScrollFoot\": \"dataTables_scrollFoot\",","\t\t\"sScrollFootInner\": \"dataTables_scrollFootInner\",","\t","\t\t/* Misc */","\t\t\"sHeaderTH\": \"\",","\t\t\"sFooterTH\": \"\",","\t","\t\t// Deprecated","\t\t\"sSortJUIAsc\": \"\",","\t\t\"sSortJUIDesc\": \"\",","\t\t\"sSortJUI\": \"\",","\t\t\"sSortJUIAscAllowed\": \"\",","\t\t\"sSortJUIDescAllowed\": \"\",","\t\t\"sSortJUIWrapper\": \"\",","\t\t\"sSortIcon\": \"\",","\t\t\"sJUIHeader\": \"\",","\t\t\"sJUIFooter\": \"\"","\t} );","\t","\t","\t(function() {","\t","\t// Reused strings for better compression. Closure compiler appears to have a","\t// weird edge case where it is trying to expand strings rather than use the","\t// variable version. This results in about 200 bytes being added, for very","\t// little preference benefit since it this run on script load only.","\tvar _empty = '';","\t_empty = '';","\t","\tvar _stateDefault = _empty + 'ui-state-default';","\tvar _sortIcon     = _empty + 'css_right ui-icon ui-icon-';","\tvar _headerFooter = _empty + 'fg-toolbar ui-toolbar ui-widget-header ui-helper-clearfix';","\t","\t$.extend( DataTable.ext.oJUIClasses, DataTable.ext.classes, {","\t\t/* Full numbers paging buttons */","\t\t\"sPageButton\":         \"fg-button ui-button \"+_stateDefault,","\t\t\"sPageButtonActive\":   \"ui-state-disabled\",","\t\t\"sPageButtonDisabled\": \"ui-state-disabled\",","\t","\t\t/* Features */","\t\t\"sPaging\": \"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi \"+","\t\t\t\"ui-buttonset-multi paging_\", /* Note that the type is postfixed */","\t","\t\t/* Sorting */","\t\t\"sSortAsc\":            _stateDefault+\" sorting_asc\",","\t\t\"sSortDesc\":           _stateDefault+\" sorting_desc\",","\t\t\"sSortable\":           _stateDefault+\" sorting\",","\t\t\"sSortableAsc\":        _stateDefault+\" sorting_asc_disabled\",","\t\t\"sSortableDesc\":       _stateDefault+\" sorting_desc_disabled\",","\t\t\"sSortableNone\":       _stateDefault+\" sorting_disabled\",","\t\t\"sSortJUIAsc\":         _sortIcon+\"triangle-1-n\",","\t\t\"sSortJUIDesc\":        _sortIcon+\"triangle-1-s\",","\t\t\"sSortJUI\":            _sortIcon+\"carat-2-n-s\",","\t\t\"sSortJUIAscAllowed\":  _sortIcon+\"carat-1-n\",","\t\t\"sSortJUIDescAllowed\": _sortIcon+\"carat-1-s\",","\t\t\"sSortJUIWrapper\":     \"DataTables_sort_wrapper\",","\t\t\"sSortIcon\":           \"DataTables_sort_icon\",","\t","\t\t/* Scrolling */","\t\t\"sScrollHead\": \"dataTables_scrollHead \"+_stateDefault,","\t\t\"sScrollFoot\": \"dataTables_scrollFoot \"+_stateDefault,","\t","\t\t/* Misc */","\t\t\"sHeaderTH\":  _stateDefault,","\t\t\"sFooterTH\":  _stateDefault,","\t\t\"sJUIHeader\": _headerFooter+\" ui-corner-tl ui-corner-tr\",","\t\t\"sJUIFooter\": _headerFooter+\" ui-corner-bl ui-corner-br\"","\t} );","\t","\t}());","\t","\t","\t","\tvar extPagination = DataTable.ext.pager;","\t","\tfunction _numbers ( page, pages ) {","\t\tvar","\t\t\tnumbers = [],","\t\t\tbuttons = extPagination.numbers_length,","\t\t\thalf = Math.floor( buttons / 2 ),","\t\t\ti = 1;","\t","\t\tif ( pages <= buttons ) {","\t\t\tnumbers = _range( 0, pages );","\t\t}","\t\telse if ( page <= half ) {","\t\t\tnumbers = _range( 0, buttons-2 );","\t\t\tnumbers.push( 'ellipsis' );","\t\t\tnumbers.push( pages-1 );","\t\t}","\t\telse if ( page >= pages - 1 - half ) {","\t\t\tnumbers = _range( pages-(buttons-2), pages );","\t\t\tnumbers.splice( 0, 0, 'ellipsis' ); // no unshift in ie6","\t\t\tnumbers.splice( 0, 0, 0 );","\t\t}","\t\telse {","\t\t\tnumbers = _range( page-half+2, page+half-1 );","\t\t\tnumbers.push( 'ellipsis' );","\t\t\tnumbers.push( pages-1 );","\t\t\tnumbers.splice( 0, 0, 'ellipsis' );","\t\t\tnumbers.splice( 0, 0, 0 );","\t\t}","\t","\t\tnumbers.DT_el = 'span';","\t\treturn numbers;","\t}","\t","\t","\t$.extend( extPagination, {","\t\tsimple: function ( page, pages ) {","\t\t\treturn [ 'previous', 'next' ];","\t\t},","\t","\t\tfull: function ( page, pages ) {","\t\t\treturn [  'first', 'previous', 'next', 'last' ];","\t\t},","\t","\t\tsimple_numbers: function ( page, pages ) {","\t\t\treturn [ 'previous', _numbers(page, pages), 'next' ];","\t\t},","\t","\t\tfull_numbers: function ( page, pages ) {","\t\t\treturn [ 'first', 'previous', _numbers(page, pages), 'next', 'last' ];","\t\t},","\t","\t\t// For testing and plug-ins to use","\t\t_numbers: _numbers,","\t","\t\t// Number of number buttons (including ellipsis) to show. _Must be odd!_","\t\tnumbers_length: 7","\t} );","\t","\t","\t$.extend( true, DataTable.ext.renderer, {","\t\tpageButton: {","\t\t\t_: function ( settings, host, idx, buttons, page, pages ) {","\t\t\t\tvar classes = settings.oClasses;","\t\t\t\tvar lang = settings.oLanguage.oPaginate;","\t\t\t\tvar btnDisplay, btnClass, counter=0;","\t","\t\t\t\tvar attach = function( container, buttons ) {","\t\t\t\t\tvar i, ien, node, button;","\t\t\t\t\tvar clickHandler = function ( e ) {","\t\t\t\t\t\t_fnPageChange( settings, e.data.action, true );","\t\t\t\t\t};","\t","\t\t\t\t\tfor ( i=0, ien=buttons.length ; i<ien ; i++ ) {","\t\t\t\t\t\tbutton = buttons[i];","\t","\t\t\t\t\t\tif ( $.isArray( button ) ) {","\t\t\t\t\t\t\tvar inner = $( '<'+(button.DT_el || 'div')+'/>' )","\t\t\t\t\t\t\t\t.appendTo( container );","\t\t\t\t\t\t\tattach( inner, button );","\t\t\t\t\t\t}","\t\t\t\t\t\telse {","\t\t\t\t\t\t\tbtnDisplay = '';","\t\t\t\t\t\t\tbtnClass = '';","\t","\t\t\t\t\t\t\tswitch ( button ) {","\t\t\t\t\t\t\t\tcase 'ellipsis':","\t\t\t\t\t\t\t\t\tcontainer.append('<span class=\"ellipsis\">&#x2026;</span>');","\t\t\t\t\t\t\t\t\tbreak;","\t","\t\t\t\t\t\t\t\tcase 'first':","\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sFirst;","\t\t\t\t\t\t\t\t\tbtnClass = button + (page > 0 ?","\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);","\t\t\t\t\t\t\t\t\tbreak;","\t","\t\t\t\t\t\t\t\tcase 'previous':","\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sPrevious;","\t\t\t\t\t\t\t\t\tbtnClass = button + (page > 0 ?","\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);","\t\t\t\t\t\t\t\t\tbreak;","\t","\t\t\t\t\t\t\t\tcase 'next':","\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sNext;","\t\t\t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?","\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);","\t\t\t\t\t\t\t\t\tbreak;","\t","\t\t\t\t\t\t\t\tcase 'last':","\t\t\t\t\t\t\t\t\tbtnDisplay = lang.sLast;","\t\t\t\t\t\t\t\t\tbtnClass = button + (page < pages-1 ?","\t\t\t\t\t\t\t\t\t\t'' : ' '+classes.sPageButtonDisabled);","\t\t\t\t\t\t\t\t\tbreak;","\t","\t\t\t\t\t\t\t\tdefault:","\t\t\t\t\t\t\t\t\tbtnDisplay = button + 1;","\t\t\t\t\t\t\t\t\tbtnClass = page === button ?","\t\t\t\t\t\t\t\t\t\tclasses.sPageButtonActive : '';","\t\t\t\t\t\t\t\t\tbreak;","\t\t\t\t\t\t\t}","\t","\t\t\t\t\t\t\tif ( btnDisplay ) {","\t\t\t\t\t\t\t\tnode = $('<a>', {","\t\t\t\t\t\t\t\t\t\t'class': classes.sPageButton+' '+btnClass,","\t\t\t\t\t\t\t\t\t\t'aria-controls': settings.sTableId,","\t\t\t\t\t\t\t\t\t\t'data-dt-idx': counter,","\t\t\t\t\t\t\t\t\t\t'tabindex': settings.iTabIndex,","\t\t\t\t\t\t\t\t\t\t'id': idx === 0 && typeof button === 'string' ?","\t\t\t\t\t\t\t\t\t\t\tsettings.sTableId +'_'+ button :","\t\t\t\t\t\t\t\t\t\t\tnull","\t\t\t\t\t\t\t\t\t} )","\t\t\t\t\t\t\t\t\t.html( btnDisplay )","\t\t\t\t\t\t\t\t\t.appendTo( container );","\t","\t\t\t\t\t\t\t\t_fnBindAction(","\t\t\t\t\t\t\t\t\tnode, {action: button}, clickHandler","\t\t\t\t\t\t\t\t);","\t","\t\t\t\t\t\t\t\tcounter++;","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t};","\t","\t\t\t\t// IE9 throws an 'unknown error' if document.activeElement is used","\t\t\t\t// inside an iframe or frame. Try / catch the error. Not good for","\t\t\t\t// accessibility, but neither are frames.","\t\t\t\tvar activeEl;","\t","\t\t\t\ttry {","\t\t\t\t\t// Because this approach is destroying and recreating the paging","\t\t\t\t\t// elements, focus is lost on the select button which is bad for","\t\t\t\t\t// accessibility. So we want to restore focus once the draw has","\t\t\t\t\t// completed","\t\t\t\t\tactiveEl = $(document.activeElement).data('dt-idx');","\t\t\t\t}","\t\t\t\tcatch (e) {}","\t","\t\t\t\tattach( $(host).empty(), buttons );","\t","\t\t\t\tif ( activeEl ) {","\t\t\t\t\t$(host).find( '[data-dt-idx='+activeEl+']' ).focus();","\t\t\t\t}","\t\t\t}","\t\t}","\t} );","\t","\t","\t","\t// Built in type detection. See model.ext.aTypes for information about","\t// what is required from this methods.","\t$.extend( DataTable.ext.type.detect, [","\t\t// Plain numbers - first since V8 detects some plain numbers as dates","\t\t// e.g. Date.parse('55') (but not all, e.g. Date.parse('22')...).","\t\tfunction ( d, settings )","\t\t{","\t\t\tvar decimal = settings.oLanguage.sDecimal;","\t\t\treturn _isNumber( d, decimal ) ? 'num'+decimal : null;","\t\t},","\t","\t\t// Dates (only those recognised by the browser's Date.parse)","\t\tfunction ( d, settings )","\t\t{","\t\t\t// V8 will remove any unknown characters at the start and end of the","\t\t\t// expression, leading to false matches such as `$245.12` or `10%` being","\t\t\t// a valid date. See forum thread 18941 for detail.","\t\t\tif ( d && !(d instanceof Date) && ( ! _re_date_start.test(d) || ! _re_date_end.test(d) ) ) {","\t\t\t\treturn null;","\t\t\t}","\t\t\tvar parsed = Date.parse(d);","\t\t\treturn (parsed !== null && !isNaN(parsed)) || _empty(d) ? 'date' : null;","\t\t},","\t","\t\t// Formatted numbers","\t\tfunction ( d, settings )","\t\t{","\t\t\tvar decimal = settings.oLanguage.sDecimal;","\t\t\treturn _isNumber( d, decimal, true ) ? 'num-fmt'+decimal : null;","\t\t},","\t","\t\t// HTML numeric","\t\tfunction ( d, settings )","\t\t{","\t\t\tvar decimal = settings.oLanguage.sDecimal;","\t\t\treturn _htmlNumeric( d, decimal ) ? 'html-num'+decimal : null;","\t\t},","\t","\t\t// HTML numeric, formatted","\t\tfunction ( d, settings )","\t\t{","\t\t\tvar decimal = settings.oLanguage.sDecimal;","\t\t\treturn _htmlNumeric( d, decimal, true ) ? 'html-num-fmt'+decimal : null;","\t\t},","\t","\t\t// HTML (this is strict checking - there must be html)","\t\tfunction ( d, settings )","\t\t{","\t\t\treturn _empty( d ) || (typeof d === 'string' && d.indexOf('<') !== -1) ?","\t\t\t\t'html' : null;","\t\t}","\t] );","\t","\t","\t","\t// Filter formatting functions. See model.ext.ofnSearch for information about","\t// what is required from these methods.","\t// ","\t// Note that additional search methods are added for the html numbers and","\t// html formatted numbers by `_addNumericSort()` when we know what the decimal","\t// place is","\t","\t","\t$.extend( DataTable.ext.type.search, {","\t\thtml: function ( data ) {","\t\t\treturn _empty(data) ?","\t\t\t\tdata :","\t\t\t\ttypeof data === 'string' ?","\t\t\t\t\tdata","\t\t\t\t\t\t.replace( _re_new_lines, \" \" )","\t\t\t\t\t\t.replace( _re_html, \"\" ) :","\t\t\t\t\t'';","\t\t},","\t","\t\tstring: function ( data ) {","\t\t\treturn _empty(data) ?","\t\t\t\tdata :","\t\t\t\ttypeof data === 'string' ?","\t\t\t\t\tdata.replace( _re_new_lines, \" \" ) :","\t\t\t\t\tdata;","\t\t}","\t} );","\t","\t","\t","\tvar __numericReplace = function ( d, decimalPlace, re1, re2 ) {","\t\tif ( d !== 0 && (!d || d === '-') ) {","\t\t\treturn -Infinity;","\t\t}","\t","\t\t// If a decimal place other than `.` is used, it needs to be given to the","\t\t// function so we can detect it and replace with a `.` which is the only","\t\t// decimal place Javascript recognises - it is not locale aware.","\t\tif ( decimalPlace ) {","\t\t\td = _numToDecimal( d, decimalPlace );","\t\t}","\t","\t\tif ( d.replace ) {","\t\t\tif ( re1 ) {","\t\t\t\td = d.replace( re1, '' );","\t\t\t}","\t","\t\t\tif ( re2 ) {","\t\t\t\td = d.replace( re2, '' );","\t\t\t}","\t\t}","\t","\t\treturn d * 1;","\t};","\t","\t","\t// Add the numeric 'deformatting' functions for sorting and search. This is done","\t// in a function to provide an easy ability for the language options to add","\t// additional methods if a non-period decimal place is used.","\tfunction _addNumericSort ( decimalPlace ) {","\t\t$.each(","\t\t\t{","\t\t\t\t// Plain numbers","\t\t\t\t\"num\": function ( d ) {","\t\t\t\t\treturn __numericReplace( d, decimalPlace );","\t\t\t\t},","\t","\t\t\t\t// Formatted numbers","\t\t\t\t\"num-fmt\": function ( d ) {","\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_formatted_numeric );","\t\t\t\t},","\t","\t\t\t\t// HTML numeric","\t\t\t\t\"html-num\": function ( d ) {","\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html );","\t\t\t\t},","\t","\t\t\t\t// HTML numeric, formatted","\t\t\t\t\"html-num-fmt\": function ( d ) {","\t\t\t\t\treturn __numericReplace( d, decimalPlace, _re_html, _re_formatted_numeric );","\t\t\t\t}","\t\t\t},","\t\t\tfunction ( key, fn ) {","\t\t\t\t// Add the ordering method","\t\t\t\t_ext.type.order[ key+decimalPlace+'-pre' ] = fn;","\t","\t\t\t\t// For HTML types add a search formatter that will strip the HTML","\t\t\t\tif ( key.match(/^html\\-/) ) {","\t\t\t\t\t_ext.type.search[ key+decimalPlace ] = _ext.type.search.html;","\t\t\t\t}","\t\t\t}","\t\t);","\t}","\t","\t","\t// Default sort methods","\t$.extend( _ext.type.order, {","\t\t// Dates","\t\t\"date-pre\": function ( d ) {","\t\t\treturn Date.parse( d ) || 0;","\t\t},","\t","\t\t// html","\t\t\"html-pre\": function ( a ) {","\t\t\treturn _empty(a) ?","\t\t\t\t'' :","\t\t\t\ta.replace ?","\t\t\t\t\ta.replace( /<.*?>/g, \"\" ).toLowerCase() :","\t\t\t\t\ta+'';","\t\t},","\t","\t\t// string","\t\t\"string-pre\": function ( a ) {","\t\t\t// This is a little complex, but faster than always calling toString,","\t\t\t// http://jsperf.com/tostring-v-check","\t\t\treturn _empty(a) ?","\t\t\t\t'' :","\t\t\t\ttypeof a === 'string' ?","\t\t\t\t\ta.toLowerCase() :","\t\t\t\t\t! a.toString ?","\t\t\t\t\t\t'' :","\t\t\t\t\t\ta.toString();","\t\t},","\t","\t\t// string-asc and -desc are retained only for compatibility with the old","\t\t// sort methods","\t\t\"string-asc\": function ( x, y ) {","\t\t\treturn ((x < y) ? -1 : ((x > y) ? 1 : 0));","\t\t},","\t","\t\t\"string-desc\": function ( x, y ) {","\t\t\treturn ((x < y) ? 1 : ((x > y) ? -1 : 0));","\t\t}","\t} );","\t","\t","\t// Numeric sorting types - order doesn't matter here","\t_addNumericSort( '' );","\t","\t","\t$.extend( true, DataTable.ext.renderer, {","\t\theader: {","\t\t\t_: function ( settings, cell, column, classes ) {","\t\t\t\t// No additional mark-up required","\t\t\t\t// Attach a sort listener to update on sort - note that using the","\t\t\t\t// `DT` namespace will allow the event to be removed automatically","\t\t\t\t// on destroy, while the `dt` namespaced event is the one we are","\t\t\t\t// listening for","\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {","\t\t\t\t\tif ( settings !== ctx ) { // need to check this this is the host","\t\t\t\t\t\treturn;               // table, not a nested one","\t\t\t\t\t}","\t","\t\t\t\t\tvar colIdx = column.idx;","\t","\t\t\t\t\tcell","\t\t\t\t\t\t.removeClass(","\t\t\t\t\t\t\tcolumn.sSortingClass +' '+","\t\t\t\t\t\t\tclasses.sSortAsc +' '+","\t\t\t\t\t\t\tclasses.sSortDesc","\t\t\t\t\t\t)","\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?","\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?","\t\t\t\t\t\t\t\tclasses.sSortDesc :","\t\t\t\t\t\t\t\tcolumn.sSortingClass","\t\t\t\t\t\t);","\t\t\t\t} );","\t\t\t},","\t","\t\t\tjqueryui: function ( settings, cell, column, classes ) {","\t\t\t\t$('<div/>')","\t\t\t\t\t.addClass( classes.sSortJUIWrapper )","\t\t\t\t\t.append( cell.contents() )","\t\t\t\t\t.append( $('<span/>')","\t\t\t\t\t\t.addClass( classes.sSortIcon+' '+column.sSortingClassJUI )","\t\t\t\t\t)","\t\t\t\t\t.appendTo( cell );","\t","\t\t\t\t// Attach a sort listener to update on sort","\t\t\t\t$(settings.nTable).on( 'order.dt.DT', function ( e, ctx, sorting, columns ) {","\t\t\t\t\tif ( settings !== ctx ) {","\t\t\t\t\t\treturn;","\t\t\t\t\t}","\t","\t\t\t\t\tvar colIdx = column.idx;","\t","\t\t\t\t\tcell","\t\t\t\t\t\t.removeClass( classes.sSortAsc +\" \"+classes.sSortDesc )","\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?","\t\t\t\t\t\t\tclasses.sSortAsc : columns[ colIdx ] == 'desc' ?","\t\t\t\t\t\t\t\tclasses.sSortDesc :","\t\t\t\t\t\t\t\tcolumn.sSortingClass","\t\t\t\t\t\t);","\t","\t\t\t\t\tcell","\t\t\t\t\t\t.find( 'span.'+classes.sSortIcon )","\t\t\t\t\t\t.removeClass(","\t\t\t\t\t\t\tclasses.sSortJUIAsc +\" \"+","\t\t\t\t\t\t\tclasses.sSortJUIDesc +\" \"+","\t\t\t\t\t\t\tclasses.sSortJUI +\" \"+","\t\t\t\t\t\t\tclasses.sSortJUIAscAllowed +\" \"+","\t\t\t\t\t\t\tclasses.sSortJUIDescAllowed","\t\t\t\t\t\t)","\t\t\t\t\t\t.addClass( columns[ colIdx ] == 'asc' ?","\t\t\t\t\t\t\tclasses.sSortJUIAsc : columns[ colIdx ] == 'desc' ?","\t\t\t\t\t\t\t\tclasses.sSortJUIDesc :","\t\t\t\t\t\t\t\tcolumn.sSortingClassJUI","\t\t\t\t\t\t);","\t\t\t\t} );","\t\t\t}","\t\t}","\t} );","\t","\t/*","\t * Public helper functions. These aren't used internally by DataTables, or","\t * called by any of the options passed into DataTables, but they can be used","\t * externally by developers working with DataTables. They are helper functions","\t * to make working with DataTables a little bit easier.","\t */","\t","\t/**","\t * Helpers for `columns.render`.","\t *","\t * The options defined here can be used with the `columns.render` initialisation","\t * option to provide a display renderer. The following functions are defined:","\t *","\t * * `number` - Will format numeric data (defined by `columns.data`) for","\t *   display, retaining the original unformatted data for sorting and filtering.","\t *   It takes 4 parameters:","\t *   * `string` - Thousands grouping separator","\t *   * `string` - Decimal point indicator","\t *   * `integer` - Number of decimal points to show","\t *   * `string` (optional) - Prefix.","\t *","\t * @example","\t *   // Column definition using the number renderer","\t *   {","\t *     data: \"salary\",","\t *     render: $.fn.dataTable.render.number( '\\'', '.', 0, '$' )","\t *   }","\t *","\t * @namespace","\t */","\tDataTable.render = {","\t\tnumber: function ( thousands, decimal, precision, prefix ) {","\t\t\treturn {","\t\t\t\tdisplay: function ( d ) {","\t\t\t\t\tif ( typeof d !== 'number' && typeof d !== 'string' ) {","\t\t\t\t\t\treturn d;","\t\t\t\t\t}","\t","\t\t\t\t\tvar negative = d < 0 ? '-' : '';","\t\t\t\t\td = Math.abs( parseFloat( d ) );","\t","\t\t\t\t\tvar intPart = parseInt( d, 10 );","\t\t\t\t\tvar floatPart = precision ?","\t\t\t\t\t\tdecimal+(d - intPart).toFixed( precision ).substring( 2 ):","\t\t\t\t\t\t'';","\t","\t\t\t\t\treturn negative + (prefix||'') +","\t\t\t\t\t\tintPart.toString().replace(","\t\t\t\t\t\t\t/\\B(?=(\\d{3})+(?!\\d))/g, thousands","\t\t\t\t\t\t) +","\t\t\t\t\t\tfloatPart;","\t\t\t\t}","\t\t\t};","\t\t}","\t};","\t","\t","\t/*","\t * This is really a good bit rubbish this method of exposing the internal methods","\t * publicly... - To be fixed in 2.0 using methods on the prototype","\t */","\t","\t","\t/**","\t * Create a wrapper function for exporting an internal functions to an external API.","\t *  @param {string} fn API function name","\t *  @returns {function} wrapped function","\t *  @memberof DataTable#internal","\t */","\tfunction _fnExternApiFunc (fn)","\t{","\t\treturn function() {","\t\t\tvar args = [_fnSettingsFromNode( this[DataTable.ext.iApiIndex] )].concat(","\t\t\t\tArray.prototype.slice.call(arguments)","\t\t\t);","\t\t\treturn DataTable.ext.internal[fn].apply( this, args );","\t\t};","\t}","\t","\t","\t/**","\t * Reference to internal functions for use by plug-in developers. Note that","\t * these methods are references to internal functions and are considered to be","\t * private. If you use these methods, be aware that they are liable to change","\t * between versions.","\t *  @namespace","\t */","\t$.extend( DataTable.ext.internal, {","\t\t_fnExternApiFunc: _fnExternApiFunc,","\t\t_fnBuildAjax: _fnBuildAjax,","\t\t_fnAjaxUpdate: _fnAjaxUpdate,","\t\t_fnAjaxParameters: _fnAjaxParameters,","\t\t_fnAjaxUpdateDraw: _fnAjaxUpdateDraw,","\t\t_fnAjaxDataSrc: _fnAjaxDataSrc,","\t\t_fnAddColumn: _fnAddColumn,","\t\t_fnColumnOptions: _fnColumnOptions,","\t\t_fnAdjustColumnSizing: _fnAdjustColumnSizing,","\t\t_fnVisibleToColumnIndex: _fnVisibleToColumnIndex,","\t\t_fnColumnIndexToVisible: _fnColumnIndexToVisible,","\t\t_fnVisbleColumns: _fnVisbleColumns,","\t\t_fnGetColumns: _fnGetColumns,","\t\t_fnColumnTypes: _fnColumnTypes,","\t\t_fnApplyColumnDefs: _fnApplyColumnDefs,","\t\t_fnHungarianMap: _fnHungarianMap,","\t\t_fnCamelToHungarian: _fnCamelToHungarian,","\t\t_fnLanguageCompat: _fnLanguageCompat,","\t\t_fnBrowserDetect: _fnBrowserDetect,","\t\t_fnAddData: _fnAddData,","\t\t_fnAddTr: _fnAddTr,","\t\t_fnNodeToDataIndex: _fnNodeToDataIndex,","\t\t_fnNodeToColumnIndex: _fnNodeToColumnIndex,","\t\t_fnGetCellData: _fnGetCellData,","\t\t_fnSetCellData: _fnSetCellData,","\t\t_fnSplitObjNotation: _fnSplitObjNotation,","\t\t_fnGetObjectDataFn: _fnGetObjectDataFn,","\t\t_fnSetObjectDataFn: _fnSetObjectDataFn,","\t\t_fnGetDataMaster: _fnGetDataMaster,","\t\t_fnClearTable: _fnClearTable,","\t\t_fnDeleteIndex: _fnDeleteIndex,","\t\t_fnInvalidate: _fnInvalidate,","\t\t_fnGetRowElements: _fnGetRowElements,","\t\t_fnCreateTr: _fnCreateTr,","\t\t_fnBuildHead: _fnBuildHead,","\t\t_fnDrawHead: _fnDrawHead,","\t\t_fnDraw: _fnDraw,","\t\t_fnReDraw: _fnReDraw,","\t\t_fnAddOptionsHtml: _fnAddOptionsHtml,","\t\t_fnDetectHeader: _fnDetectHeader,","\t\t_fnGetUniqueThs: _fnGetUniqueThs,","\t\t_fnFeatureHtmlFilter: _fnFeatureHtmlFilter,","\t\t_fnFilterComplete: _fnFilterComplete,","\t\t_fnFilterCustom: _fnFilterCustom,","\t\t_fnFilterColumn: _fnFilterColumn,","\t\t_fnFilter: _fnFilter,","\t\t_fnFilterCreateSearch: _fnFilterCreateSearch,","\t\t_fnEscapeRegex: _fnEscapeRegex,","\t\t_fnFilterData: _fnFilterData,","\t\t_fnFeatureHtmlInfo: _fnFeatureHtmlInfo,","\t\t_fnUpdateInfo: _fnUpdateInfo,","\t\t_fnInfoMacros: _fnInfoMacros,","\t\t_fnInitialise: _fnInitialise,","\t\t_fnInitComplete: _fnInitComplete,","\t\t_fnLengthChange: _fnLengthChange,","\t\t_fnFeatureHtmlLength: _fnFeatureHtmlLength,","\t\t_fnFeatureHtmlPaginate: _fnFeatureHtmlPaginate,","\t\t_fnPageChange: _fnPageChange,","\t\t_fnFeatureHtmlProcessing: _fnFeatureHtmlProcessing,","\t\t_fnProcessingDisplay: _fnProcessingDisplay,","\t\t_fnFeatureHtmlTable: _fnFeatureHtmlTable,","\t\t_fnScrollDraw: _fnScrollDraw,","\t\t_fnApplyToChildren: _fnApplyToChildren,","\t\t_fnCalculateColumnWidths: _fnCalculateColumnWidths,","\t\t_fnThrottle: _fnThrottle,","\t\t_fnConvertToWidth: _fnConvertToWidth,","\t\t_fnScrollingWidthAdjust: _fnScrollingWidthAdjust,","\t\t_fnGetWidestNode: _fnGetWidestNode,","\t\t_fnGetMaxLenString: _fnGetMaxLenString,","\t\t_fnStringToCss: _fnStringToCss,","\t\t_fnScrollBarWidth: _fnScrollBarWidth,","\t\t_fnSortFlatten: _fnSortFlatten,","\t\t_fnSort: _fnSort,","\t\t_fnSortAria: _fnSortAria,","\t\t_fnSortListener: _fnSortListener,","\t\t_fnSortAttachListener: _fnSortAttachListener,","\t\t_fnSortingClasses: _fnSortingClasses,","\t\t_fnSortData: _fnSortData,","\t\t_fnSaveState: _fnSaveState,","\t\t_fnLoadState: _fnLoadState,","\t\t_fnSettingsFromNode: _fnSettingsFromNode,","\t\t_fnLog: _fnLog,","\t\t_fnMap: _fnMap,","\t\t_fnBindAction: _fnBindAction,","\t\t_fnCallbackReg: _fnCallbackReg,","\t\t_fnCallbackFire: _fnCallbackFire,","\t\t_fnLengthOverflow: _fnLengthOverflow,","\t\t_fnRenderer: _fnRenderer,","\t\t_fnDataSource: _fnDataSource,","\t\t_fnRowAttributes: _fnRowAttributes,","\t\t_fnCalculateEnd: function () {} // Used by a lot of plug-ins, but redundant","\t\t                                // in 1.10, so this dead-end function is","\t\t                                // added to prevent errors","\t} );","\t","","\t// jQuery access","\t$.fn.dataTable = DataTable;","","\t// Legacy aliases","\t$.fn.dataTableSettings = DataTable.settings;","\t$.fn.dataTableExt = DataTable.ext;","","\t// With a capital `D` we return a DataTables API instance rather than a","\t// jQuery object","\t$.fn.DataTable = function ( opts ) {","\t\treturn $(this).dataTable( opts ).api();","\t};","","\t// All properties that are available to $.fn.dataTable should also be","\t// available on $.fn.DataTable","\t$.each( DataTable, function ( prop, val ) {","\t\t$.fn.DataTable[ prop ] = val;","\t} );","","","\t// Information about events fired by DataTables - for documentation.","\t/**","\t * Draw event, fired whenever the table is redrawn on the page, at the same","\t * point as fnDrawCallback. This may be useful for binding events or","\t * performing calculations when the table is altered at all.","\t *  @name DataTable#draw.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}","\t */","","\t/**","\t * Search event, fired when the searching applied to the table (using the","\t * built-in global search, or column filters) is altered.","\t *  @name DataTable#search.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}","\t */","","\t/**","\t * Page change event, fired when the paging of the table is altered.","\t *  @name DataTable#page.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}","\t */","","\t/**","\t * Order event, fired when the ordering applied to the table is altered.","\t *  @name DataTable#order.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}","\t */","","\t/**","\t * DataTables initialisation complete event, fired when the table is fully","\t * drawn, including Ajax data loaded, if Ajax data is required.","\t *  @name DataTable#init.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} oSettings DataTables settings object","\t *  @param {object} json The JSON object request from the server - only","\t *    present if client-side Ajax sourced data is used</li></ol>","\t */","","\t/**","\t * State save event, fired when the table has changed state a new state save","\t * is required. This event allows modification of the state saving object","\t * prior to actually doing the save, including addition or other state","\t * properties (for plug-ins) or modification of a DataTables core property.","\t *  @name DataTable#stateSaveParams.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} oSettings DataTables settings object","\t *  @param {object} json The state information to be saved","\t */","","\t/**","\t * State load event, fired when the table is loading state from the stored","\t * data, but prior to the settings object being modified by the saved state","\t * - allowing modification of the saved state is required or loading of","\t * state for a plug-in.","\t *  @name DataTable#stateLoadParams.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} oSettings DataTables settings object","\t *  @param {object} json The saved state information","\t */","","\t/**","\t * State loaded event, fired when state has been loaded from stored data and","\t * the settings object has been modified by the loaded data.","\t *  @name DataTable#stateLoaded.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} oSettings DataTables settings object","\t *  @param {object} json The saved state information","\t */","","\t/**","\t * Processing event, fired when DataTables is doing some kind of processing","\t * (be it, order, searcg or anything else). It can be used to indicate to","\t * the end user that there is something happening, or that something has","\t * finished.","\t *  @name DataTable#processing.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} oSettings DataTables settings object","\t *  @param {boolean} bShow Flag for if DataTables is doing processing or not","\t */","","\t/**","\t * Ajax (XHR) event, fired whenever an Ajax request is completed from a","\t * request to made to the server for new data. This event is called before","\t * DataTables processed the returned data, so it can also be used to pre-","\t * process the data returned from the server, if needed.","\t *","\t * Note that this trigger is called in `fnServerData`, if you override","\t * `fnServerData` and which to use this event, you need to trigger it in you","\t * success function.","\t *  @name DataTable#xhr.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}","\t *  @param {object} json JSON returned from the server","\t *","\t *  @example","\t *     // Use a custom property returned from the server in another DOM element","\t *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {","\t *       $('#status').html( json.status );","\t *     } );","\t *","\t *  @example","\t *     // Pre-process the data returned from the server","\t *     $('#table').dataTable().on('xhr.dt', function (e, settings, json) {","\t *       for ( var i=0, ien=json.aaData.length ; i<ien ; i++ ) {","\t *         json.aaData[i].sum = json.aaData[i].one + json.aaData[i].two;","\t *       }","\t *       // Note no return - manipulate the data directly in the JSON object.","\t *     } );","\t */","","\t/**","\t * Destroy event, fired when the DataTable is destroyed by calling fnDestroy","\t * or passing the bDestroy:true parameter in the initialisation object. This","\t * can be used to remove bound events, added DOM nodes, etc.","\t *  @name DataTable#destroy.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}","\t */","","\t/**","\t * Page length change event, fired when number of records to show on each","\t * page (the length) is changed.","\t *  @name DataTable#length.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}","\t *  @param {integer} len New length","\t */","","\t/**","\t * Column sizing has changed.","\t *  @name DataTable#column-sizing.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}","\t */","","\t/**","\t * Column visibility has changed.","\t *  @name DataTable#column-visibility.dt","\t *  @event","\t *  @param {event} e jQuery event object","\t *  @param {object} o DataTables settings object {@link DataTable.models.oSettings}","\t *  @param {int} column Column index","\t *  @param {bool} vis `false` if column now hidden, or `true` if visible","\t */","","\treturn $.fn.dataTable;","}));","","}(window, document));"]}]}]]},"ace":{"folds":[],"scrolltop":36517.5,"scrollleft":0,"selection":{"start":{"row":2622,"column":17},"end":{"row":2622,"column":24},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":2607,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1429202711222,"hash":"7cb5aa3dd99bb83e65d48bda933dc20985316a5d"}